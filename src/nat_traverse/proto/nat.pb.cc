// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nat.proto

#include "nat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_nat_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DetectionRequest;
}  // namespace protobuf_nat_2eproto
namespace tenon {
namespace nat {
namespace protobuf {
class DetectionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetectionRequest>
      _instance;
} _DetectionRequest_default_instance_;
class NatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NatMessage>
      _instance;
} _NatMessage_default_instance_;
}  // namespace protobuf
}  // namespace nat
}  // namespace tenon
namespace protobuf_nat_2eproto {
static void InitDefaultsDetectionRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::nat::protobuf::_DetectionRequest_default_instance_;
    new (ptr) ::tenon::nat::protobuf::DetectionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::nat::protobuf::DetectionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DetectionRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDetectionRequest}, {}};

static void InitDefaultsNatMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::nat::protobuf::_NatMessage_default_instance_;
    new (ptr) ::tenon::nat::protobuf::NatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::nat::protobuf::NatMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NatMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNatMessage}, {
      &protobuf_nat_2eproto::scc_info_DetectionRequest.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DetectionRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NatMessage.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, public_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, local_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, local_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, nat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, dht_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, min_svr_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, max_svr_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, min_route_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, max_route_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, node_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, min_udp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, max_udp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::DetectionRequest, node_tag_),
  0,
  5,
  1,
  6,
  2,
  7,
  3,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::NatMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::NatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::nat::protobuf::NatMessage, detection_req_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::tenon::nat::protobuf::DetectionRequest)},
  { 37, 43, sizeof(::tenon::nat::protobuf::NatMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::nat::protobuf::_DetectionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::nat::protobuf::_NatMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "nat.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tnat.proto\022\022tenon.nat.protobuf\"\316\002\n\020Dete"
      "ctionRequest\022\021\n\tpublic_ip\030\001 \001(\014\022\023\n\013publi"
      "c_port\030\002 \001(\005\022\020\n\010local_ip\030\003 \001(\014\022\022\n\nlocal_"
      "port\030\004 \001(\005\022\n\n\002id\030\005 \001(\014\022\020\n\010nat_type\030\006 \001(\005"
      "\022\017\n\007dht_key\030\007 \001(\014\022\016\n\006client\030\010 \001(\010\022\024\n\014min"
      "_svr_port\030\t \001(\r\022\024\n\014max_svr_port\030\n \001(\r\022\026\n"
      "\016min_route_port\030\013 \001(\r\022\026\n\016max_route_port\030"
      "\014 \001(\r\022\023\n\013node_weight\030\r \001(\r\022\024\n\014min_udp_po"
      "rt\030\016 \001(\r\022\024\n\014max_udp_port\030\017 \001(\r\022\020\n\010node_t"
      "ag\030\020 \001(\014\"I\n\nNatMessage\022;\n\rdetection_req\030"
      "\001 \001(\0132$.tenon.nat.protobuf.DetectionRequ"
      "est"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 443);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nat.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_nat_2eproto
namespace tenon {
namespace nat {
namespace protobuf {

// ===================================================================

void DetectionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionRequest::kPublicIpFieldNumber;
const int DetectionRequest::kPublicPortFieldNumber;
const int DetectionRequest::kLocalIpFieldNumber;
const int DetectionRequest::kLocalPortFieldNumber;
const int DetectionRequest::kIdFieldNumber;
const int DetectionRequest::kNatTypeFieldNumber;
const int DetectionRequest::kDhtKeyFieldNumber;
const int DetectionRequest::kClientFieldNumber;
const int DetectionRequest::kMinSvrPortFieldNumber;
const int DetectionRequest::kMaxSvrPortFieldNumber;
const int DetectionRequest::kMinRoutePortFieldNumber;
const int DetectionRequest::kMaxRoutePortFieldNumber;
const int DetectionRequest::kNodeWeightFieldNumber;
const int DetectionRequest::kMinUdpPortFieldNumber;
const int DetectionRequest::kMaxUdpPortFieldNumber;
const int DetectionRequest::kNodeTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionRequest::DetectionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nat_2eproto::scc_info_DetectionRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.nat.protobuf.DetectionRequest)
}
DetectionRequest::DetectionRequest(const DetectionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_ip()) {
    public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
  }
  local_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_local_ip()) {
    local_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_ip_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dht_key()) {
    dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dht_key_);
  }
  node_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_node_tag()) {
    node_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_tag_);
  }
  ::memcpy(&public_port_, &from.public_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_udp_port_) -
    reinterpret_cast<char*>(&public_port_)) + sizeof(max_udp_port_));
  // @@protoc_insertion_point(copy_constructor:tenon.nat.protobuf.DetectionRequest)
}

void DetectionRequest::SharedCtor() {
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&public_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_udp_port_) -
      reinterpret_cast<char*>(&public_port_)) + sizeof(max_udp_port_));
}

DetectionRequest::~DetectionRequest() {
  // @@protoc_insertion_point(destructor:tenon.nat.protobuf.DetectionRequest)
  SharedDtor();
}

void DetectionRequest::SharedDtor() {
  public_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dht_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DetectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DetectionRequest::descriptor() {
  ::protobuf_nat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectionRequest& DetectionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nat_2eproto::scc_info_DetectionRequest.base);
  return *internal_default_instance();
}


void DetectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.nat.protobuf.DetectionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      public_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      local_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      dht_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      node_tag_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&public_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nat_type_) -
        reinterpret_cast<char*>(&public_port_)) + sizeof(nat_type_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&client_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_udp_port_) -
        reinterpret_cast<char*>(&client_)) + sizeof(max_udp_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DetectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.nat.protobuf.DetectionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 public_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_public_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes local_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_local_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 local_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_local_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nat_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_nat_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nat_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes dht_key = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dht_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool client = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_client();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_svr_port = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_min_svr_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_svr_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_svr_port = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_max_svr_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_svr_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_route_port = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_min_route_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_route_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_route_port = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_max_route_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_route_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 node_weight = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_node_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_udp_port = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_min_udp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_udp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_udp_port = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_max_udp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_udp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes node_tag = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.nat.protobuf.DetectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.nat.protobuf.DetectionRequest)
  return false;
#undef DO_
}

void DetectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.nat.protobuf.DetectionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_ip(), output);
  }

  // optional int32 public_port = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->public_port(), output);
  }

  // optional bytes local_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->local_ip(), output);
  }

  // optional int32 local_port = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->local_port(), output);
  }

  // optional bytes id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->id(), output);
  }

  // optional int32 nat_type = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nat_type(), output);
  }

  // optional bytes dht_key = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->dht_key(), output);
  }

  // optional bool client = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->client(), output);
  }

  // optional uint32 min_svr_port = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->min_svr_port(), output);
  }

  // optional uint32 max_svr_port = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->max_svr_port(), output);
  }

  // optional uint32 min_route_port = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->min_route_port(), output);
  }

  // optional uint32 max_route_port = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->max_route_port(), output);
  }

  // optional uint32 node_weight = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->node_weight(), output);
  }

  // optional uint32 min_udp_port = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->min_udp_port(), output);
  }

  // optional uint32 max_udp_port = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->max_udp_port(), output);
  }

  // optional bytes node_tag = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->node_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.nat.protobuf.DetectionRequest)
}

::google::protobuf::uint8* DetectionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.nat.protobuf.DetectionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_ip(), target);
  }

  // optional int32 public_port = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->public_port(), target);
  }

  // optional bytes local_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->local_ip(), target);
  }

  // optional int32 local_port = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->local_port(), target);
  }

  // optional bytes id = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->id(), target);
  }

  // optional int32 nat_type = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nat_type(), target);
  }

  // optional bytes dht_key = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->dht_key(), target);
  }

  // optional bool client = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->client(), target);
  }

  // optional uint32 min_svr_port = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->min_svr_port(), target);
  }

  // optional uint32 max_svr_port = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->max_svr_port(), target);
  }

  // optional uint32 min_route_port = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->min_route_port(), target);
  }

  // optional uint32 max_route_port = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->max_route_port(), target);
  }

  // optional uint32 node_weight = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->node_weight(), target);
  }

  // optional uint32 min_udp_port = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->min_udp_port(), target);
  }

  // optional uint32 max_udp_port = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->max_udp_port(), target);
  }

  // optional bytes node_tag = 16;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->node_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.nat.protobuf.DetectionRequest)
  return target;
}

size_t DetectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.nat.protobuf.DetectionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes public_ip = 1;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_ip());
    }

    // optional bytes local_ip = 3;
    if (has_local_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->local_ip());
    }

    // optional bytes id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes dht_key = 7;
    if (has_dht_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dht_key());
    }

    // optional bytes node_tag = 16;
    if (has_node_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_tag());
    }

    // optional int32 public_port = 2;
    if (has_public_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->public_port());
    }

    // optional int32 local_port = 4;
    if (has_local_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_port());
    }

    // optional int32 nat_type = 6;
    if (has_nat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nat_type());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool client = 8;
    if (has_client()) {
      total_size += 1 + 1;
    }

    // optional uint32 min_svr_port = 9;
    if (has_min_svr_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_svr_port());
    }

    // optional uint32 max_svr_port = 10;
    if (has_max_svr_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_svr_port());
    }

    // optional uint32 min_route_port = 11;
    if (has_min_route_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_route_port());
    }

    // optional uint32 max_route_port = 12;
    if (has_max_route_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_route_port());
    }

    // optional uint32 node_weight = 13;
    if (has_node_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_weight());
    }

    // optional uint32 min_udp_port = 14;
    if (has_min_udp_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_udp_port());
    }

    // optional uint32 max_udp_port = 15;
    if (has_max_udp_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_udp_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.nat.protobuf.DetectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.nat.protobuf.DetectionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.nat.protobuf.DetectionRequest)
    MergeFrom(*source);
  }
}

void DetectionRequest::MergeFrom(const DetectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.nat.protobuf.DetectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_public_ip();
      public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_local_ip();
      local_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_dht_key();
      dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dht_key_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_node_tag();
      node_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_tag_);
    }
    if (cached_has_bits & 0x00000020u) {
      public_port_ = from.public_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      local_port_ = from.local_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      nat_type_ = from.nat_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      client_ = from.client_;
    }
    if (cached_has_bits & 0x00000200u) {
      min_svr_port_ = from.min_svr_port_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_svr_port_ = from.max_svr_port_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_route_port_ = from.min_route_port_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_route_port_ = from.max_route_port_;
    }
    if (cached_has_bits & 0x00002000u) {
      node_weight_ = from.node_weight_;
    }
    if (cached_has_bits & 0x00004000u) {
      min_udp_port_ = from.min_udp_port_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_udp_port_ = from.max_udp_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.nat.protobuf.DetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionRequest::CopyFrom(const DetectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.nat.protobuf.DetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionRequest::IsInitialized() const {
  return true;
}

void DetectionRequest::Swap(DetectionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectionRequest::InternalSwap(DetectionRequest* other) {
  using std::swap;
  public_ip_.Swap(&other->public_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_ip_.Swap(&other->local_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dht_key_.Swap(&other->dht_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_tag_.Swap(&other->node_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(public_port_, other->public_port_);
  swap(local_port_, other->local_port_);
  swap(nat_type_, other->nat_type_);
  swap(client_, other->client_);
  swap(min_svr_port_, other->min_svr_port_);
  swap(max_svr_port_, other->max_svr_port_);
  swap(min_route_port_, other->min_route_port_);
  swap(max_route_port_, other->max_route_port_);
  swap(node_weight_, other->node_weight_);
  swap(min_udp_port_, other->min_udp_port_);
  swap(max_udp_port_, other->max_udp_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DetectionRequest::GetMetadata() const {
  protobuf_nat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NatMessage::InitAsDefaultInstance() {
  ::tenon::nat::protobuf::_NatMessage_default_instance_._instance.get_mutable()->detection_req_ = const_cast< ::tenon::nat::protobuf::DetectionRequest*>(
      ::tenon::nat::protobuf::DetectionRequest::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NatMessage::kDetectionReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NatMessage::NatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nat_2eproto::scc_info_NatMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.nat.protobuf.NatMessage)
}
NatMessage::NatMessage(const NatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_detection_req()) {
    detection_req_ = new ::tenon::nat::protobuf::DetectionRequest(*from.detection_req_);
  } else {
    detection_req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tenon.nat.protobuf.NatMessage)
}

void NatMessage::SharedCtor() {
  detection_req_ = NULL;
}

NatMessage::~NatMessage() {
  // @@protoc_insertion_point(destructor:tenon.nat.protobuf.NatMessage)
  SharedDtor();
}

void NatMessage::SharedDtor() {
  if (this != internal_default_instance()) delete detection_req_;
}

void NatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NatMessage::descriptor() {
  ::protobuf_nat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NatMessage& NatMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nat_2eproto::scc_info_NatMessage.base);
  return *internal_default_instance();
}


void NatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.nat.protobuf.NatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(detection_req_ != NULL);
    detection_req_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.nat.protobuf.NatMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tenon.nat.protobuf.DetectionRequest detection_req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.nat.protobuf.NatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.nat.protobuf.NatMessage)
  return false;
#undef DO_
}

void NatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.nat.protobuf.NatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.nat.protobuf.DetectionRequest detection_req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_detection_req(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.nat.protobuf.NatMessage)
}

::google::protobuf::uint8* NatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.nat.protobuf.NatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.nat.protobuf.DetectionRequest detection_req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_detection_req(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.nat.protobuf.NatMessage)
  return target;
}

size_t NatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.nat.protobuf.NatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .tenon.nat.protobuf.DetectionRequest detection_req = 1;
  if (has_detection_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.nat.protobuf.NatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NatMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.nat.protobuf.NatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.nat.protobuf.NatMessage)
    MergeFrom(*source);
  }
}

void NatMessage::MergeFrom(const NatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.nat.protobuf.NatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_detection_req()) {
    mutable_detection_req()->::tenon::nat::protobuf::DetectionRequest::MergeFrom(from.detection_req());
  }
}

void NatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.nat.protobuf.NatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NatMessage::CopyFrom(const NatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.nat.protobuf.NatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NatMessage::IsInitialized() const {
  return true;
}

void NatMessage::Swap(NatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NatMessage::InternalSwap(NatMessage* other) {
  using std::swap;
  swap(detection_req_, other->detection_req_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NatMessage::GetMetadata() const {
  protobuf_nat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace nat
}  // namespace tenon
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::nat::protobuf::DetectionRequest* Arena::CreateMaybeMessage< ::tenon::nat::protobuf::DetectionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::nat::protobuf::DetectionRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::nat::protobuf::NatMessage* Arena::CreateMaybeMessage< ::tenon::nat::protobuf::NatMessage >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::nat::protobuf::NatMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
