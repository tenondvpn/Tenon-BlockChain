// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#include "block.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_block_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountAttrRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountAttrResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountHeightRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountHeightResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AdRewardRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetAccountInitInfoRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetTxBlockRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetTxBlockResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TxItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UpdateVpnActiveRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UpdateVpnCountRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VpnCountItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetAccountInitInfoResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UpdateVpnCountResponse;
}  // namespace protobuf_block_2eproto
namespace tenon {
namespace block {
namespace protobuf {
class GetTxBlockRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTxBlockRequest>
      _instance;
} _GetTxBlockRequest_default_instance_;
class GetTxBlockResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTxBlockResponse>
      _instance;
} _GetTxBlockResponse_default_instance_;
class AccountHeightRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountHeightRequest>
      _instance;
} _AccountHeightRequest_default_instance_;
class AccountHeightResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountHeightResponse>
      _instance;
} _AccountHeightResponse_default_instance_;
class AccountAttrRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountAttrRequest>
      _instance;
} _AccountAttrRequest_default_instance_;
class AccountAttrResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountAttrResponse>
      _instance;
} _AccountAttrResponse_default_instance_;
class UpdateVpnCountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateVpnCountRequest>
      _instance;
} _UpdateVpnCountRequest_default_instance_;
class VpnCountItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VpnCountItem>
      _instance;
} _VpnCountItem_default_instance_;
class UpdateVpnCountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateVpnCountResponse>
      _instance;
} _UpdateVpnCountResponse_default_instance_;
class GetAccountInitInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetAccountInitInfoRequest>
      _instance;
} _GetAccountInitInfoRequest_default_instance_;
class TxItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxItem>
      _instance;
} _TxItem_default_instance_;
class GetAccountInitInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetAccountInitInfoResponse>
      _instance;
} _GetAccountInitInfoResponse_default_instance_;
class UpdateVpnActiveRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateVpnActiveRequest>
      _instance;
} _UpdateVpnActiveRequest_default_instance_;
class AdRewardRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdRewardRequest>
      _instance;
} _AdRewardRequest_default_instance_;
class BlockMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockMessage>
      _instance;
} _BlockMessage_default_instance_;
}  // namespace protobuf
}  // namespace block
}  // namespace tenon
namespace protobuf_block_2eproto {
static void InitDefaultsGetTxBlockRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_GetTxBlockRequest_default_instance_;
    new (ptr) ::tenon::block::protobuf::GetTxBlockRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::GetTxBlockRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetTxBlockRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetTxBlockRequest}, {}};

static void InitDefaultsGetTxBlockResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_GetTxBlockResponse_default_instance_;
    new (ptr) ::tenon::block::protobuf::GetTxBlockResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::GetTxBlockResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetTxBlockResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetTxBlockResponse}, {}};

static void InitDefaultsAccountHeightRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_AccountHeightRequest_default_instance_;
    new (ptr) ::tenon::block::protobuf::AccountHeightRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::AccountHeightRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountHeightRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountHeightRequest}, {}};

static void InitDefaultsAccountHeightResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_AccountHeightResponse_default_instance_;
    new (ptr) ::tenon::block::protobuf::AccountHeightResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::AccountHeightResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountHeightResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountHeightResponse}, {}};

static void InitDefaultsAccountAttrRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_AccountAttrRequest_default_instance_;
    new (ptr) ::tenon::block::protobuf::AccountAttrRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::AccountAttrRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountAttrRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountAttrRequest}, {}};

static void InitDefaultsAccountAttrResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_AccountAttrResponse_default_instance_;
    new (ptr) ::tenon::block::protobuf::AccountAttrResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::AccountAttrResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountAttrResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountAttrResponse}, {}};

static void InitDefaultsUpdateVpnCountRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_UpdateVpnCountRequest_default_instance_;
    new (ptr) ::tenon::block::protobuf::UpdateVpnCountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::UpdateVpnCountRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateVpnCountRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateVpnCountRequest}, {}};

static void InitDefaultsVpnCountItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_VpnCountItem_default_instance_;
    new (ptr) ::tenon::block::protobuf::VpnCountItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::VpnCountItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VpnCountItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVpnCountItem}, {}};

static void InitDefaultsUpdateVpnCountResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_UpdateVpnCountResponse_default_instance_;
    new (ptr) ::tenon::block::protobuf::UpdateVpnCountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::UpdateVpnCountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateVpnCountResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateVpnCountResponse}, {
      &protobuf_block_2eproto::scc_info_VpnCountItem.base,}};

static void InitDefaultsGetAccountInitInfoRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_GetAccountInitInfoRequest_default_instance_;
    new (ptr) ::tenon::block::protobuf::GetAccountInitInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::GetAccountInitInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetAccountInitInfoRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetAccountInitInfoRequest}, {}};

static void InitDefaultsTxItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_TxItem_default_instance_;
    new (ptr) ::tenon::block::protobuf::TxItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::TxItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TxItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTxItem}, {}};

static void InitDefaultsGetAccountInitInfoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_GetAccountInitInfoResponse_default_instance_;
    new (ptr) ::tenon::block::protobuf::GetAccountInitInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::GetAccountInitInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetAccountInitInfoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetAccountInitInfoResponse}, {
      &protobuf_block_2eproto::scc_info_TxItem.base,}};

static void InitDefaultsUpdateVpnActiveRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_UpdateVpnActiveRequest_default_instance_;
    new (ptr) ::tenon::block::protobuf::UpdateVpnActiveRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::UpdateVpnActiveRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateVpnActiveRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateVpnActiveRequest}, {}};

static void InitDefaultsAdRewardRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_AdRewardRequest_default_instance_;
    new (ptr) ::tenon::block::protobuf::AdRewardRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::AdRewardRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AdRewardRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAdRewardRequest}, {}};

static void InitDefaultsBlockMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::block::protobuf::_BlockMessage_default_instance_;
    new (ptr) ::tenon::block::protobuf::BlockMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::block::protobuf::BlockMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_BlockMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsBlockMessage}, {
      &protobuf_block_2eproto::scc_info_GetTxBlockRequest.base,
      &protobuf_block_2eproto::scc_info_GetTxBlockResponse.base,
      &protobuf_block_2eproto::scc_info_AccountHeightRequest.base,
      &protobuf_block_2eproto::scc_info_AccountHeightResponse.base,
      &protobuf_block_2eproto::scc_info_AccountAttrRequest.base,
      &protobuf_block_2eproto::scc_info_AccountAttrResponse.base,
      &protobuf_block_2eproto::scc_info_UpdateVpnCountRequest.base,
      &protobuf_block_2eproto::scc_info_UpdateVpnCountResponse.base,
      &protobuf_block_2eproto::scc_info_GetAccountInitInfoRequest.base,
      &protobuf_block_2eproto::scc_info_GetAccountInitInfoResponse.base,
      &protobuf_block_2eproto::scc_info_UpdateVpnActiveRequest.base,
      &protobuf_block_2eproto::scc_info_AdRewardRequest.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetTxBlockRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTxBlockResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountHeightRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountHeightResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountAttrRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountAttrResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateVpnCountRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VpnCountItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateVpnCountResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetAccountInitInfoRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetAccountInitInfoResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateVpnActiveRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdRewardRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlockMessage.base);
}

::google::protobuf::Metadata file_level_metadata[15];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetTxBlockRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetTxBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetTxBlockRequest, tx_gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetTxBlockRequest, block_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetTxBlockRequest, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetTxBlockRequest, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetTxBlockRequest, account_address_),
  0,
  1,
  4,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetTxBlockResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetTxBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetTxBlockResponse, block_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountHeightRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountHeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountHeightRequest, account_addr_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountHeightResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountHeightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountHeightResponse, heights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountHeightResponse, account_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountHeightResponse, type_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountAttrRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountAttrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountAttrRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountAttrRequest, attr_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountAttrRequest, height_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountAttrResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountAttrResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountAttrResponse, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountAttrResponse, attr_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountAttrResponse, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AccountAttrResponse, block_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnCountRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnCountRequest, account_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnCountRequest, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnCountRequest, old_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnCountRequest, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnCountRequest, just_set_),
  3,
  0,
  1,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::VpnCountItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::VpnCountItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::VpnCountItem, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::VpnCountItem, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnCountResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnCountResponse, vpn_nodes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetAccountInitInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetAccountInitInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetAccountInitInfoRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetAccountInitInfoRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetAccountInitInfoRequest, height_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::TxItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::TxItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::TxItem, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::TxItem, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::TxItem, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::TxItem, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::TxItem, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::TxItem, balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::TxItem, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::TxItem, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::TxItem, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::TxItem, version_),
  0,
  1,
  3,
  4,
  5,
  6,
  2,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetAccountInitInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetAccountInitInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetAccountInitInfoResponse, balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetAccountInitInfoResponse, tx_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::GetAccountInitInfoResponse, id_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnActiveRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnActiveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnActiveRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::UpdateVpnActiveRequest, ip_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AdRewardRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AdRewardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AdRewardRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AdRewardRequest, reward_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::AdRewardRequest, gid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, block_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, block_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, height_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, height_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, acc_attr_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, acc_attr_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, up_vpn_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, up_vpn_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, account_init_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, account_init_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, vpn_active_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::block::protobuf::BlockMessage, ad_reward_req_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::tenon::block::protobuf::GetTxBlockRequest)},
  { 15, 21, sizeof(::tenon::block::protobuf::GetTxBlockResponse)},
  { 22, 28, sizeof(::tenon::block::protobuf::AccountHeightRequest)},
  { 29, 37, sizeof(::tenon::block::protobuf::AccountHeightResponse)},
  { 40, 48, sizeof(::tenon::block::protobuf::AccountAttrRequest)},
  { 51, 60, sizeof(::tenon::block::protobuf::AccountAttrResponse)},
  { 64, 74, sizeof(::tenon::block::protobuf::UpdateVpnCountRequest)},
  { 79, 86, sizeof(::tenon::block::protobuf::VpnCountItem)},
  { 88, 94, sizeof(::tenon::block::protobuf::UpdateVpnCountResponse)},
  { 95, 103, sizeof(::tenon::block::protobuf::GetAccountInitInfoRequest)},
  { 106, 121, sizeof(::tenon::block::protobuf::TxItem)},
  { 131, 139, sizeof(::tenon::block::protobuf::GetAccountInitInfoResponse)},
  { 142, 149, sizeof(::tenon::block::protobuf::UpdateVpnActiveRequest)},
  { 151, 159, sizeof(::tenon::block::protobuf::AdRewardRequest)},
  { 162, 179, sizeof(::tenon::block::protobuf::BlockMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_GetTxBlockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_GetTxBlockResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_AccountHeightRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_AccountHeightResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_AccountAttrRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_AccountAttrResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_UpdateVpnCountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_VpnCountItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_UpdateVpnCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_GetAccountInitInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_TxItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_GetAccountInitInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_UpdateVpnActiveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_AdRewardRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::block::protobuf::_BlockMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "block.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013block.proto\022\024tenon.block.protobuf\"n\n\021G"
      "etTxBlockRequest\022\016\n\006tx_gid\030\001 \001(\014\022\022\n\nbloc"
      "k_hash\030\002 \001(\014\022\014\n\004from\030\003 \001(\010\022\016\n\006height\030\004 \001"
      "(\004\022\027\n\017account_address\030\005 \001(\014\"#\n\022GetTxBloc"
      "kResponse\022\r\n\005block\030\001 \001(\014\",\n\024AccountHeigh"
      "tRequest\022\024\n\014account_addr\030\001 \001(\014\"L\n\025Accoun"
      "tHeightResponse\022\017\n\007heights\030\001 \003(\004\022\024\n\014acco"
      "unt_addr\030\002 \001(\014\022\014\n\004type\030\003 \001(\014\"G\n\022AccountA"
      "ttrRequest\022\017\n\007account\030\001 \001(\014\022\020\n\010attr_key\030"
      "\002 \001(\014\022\016\n\006height\030\003 \001(\004\"W\n\023AccountAttrResp"
      "onse\022\017\n\007account\030\001 \001(\014\022\020\n\010attr_key\030\002 \001(\014\022"
      "\016\n\006height\030\003 \001(\004\022\r\n\005block\030\004 \001(\014\"h\n\025Update"
      "VpnCountRequest\022\024\n\014account_hash\030\001 \001(\004\022\n\n"
      "\002ip\030\002 \001(\014\022\016\n\006old_ip\030\003 \001(\014\022\013\n\003uid\030\004 \001(\014\022\020"
      "\n\010just_set\030\005 \001(\010\")\n\014VpnCountItem\022\n\n\002ip\030\001"
      " \001(\014\022\r\n\005count\030\002 \001(\r\"O\n\026UpdateVpnCountRes"
      "ponse\0225\n\tvpn_nodes\030\001 \003(\0132\".tenon.block.p"
      "rotobuf.VpnCountItem\"F\n\031GetAccountInitIn"
      "foRequest\022\n\n\002id\030\001 \001(\014\022\r\n\005count\030\002 \001(\r\022\016\n\006"
      "height\030\003 \001(\004\"\242\001\n\006TxItem\022\014\n\004from\030\001 \001(\014\022\n\n"
      "\002to\030\002 \001(\014\022\016\n\006amount\030\003 \001(\004\022\021\n\ttimestamp\030\004"
      " \001(\004\022\016\n\006height\030\005 \001(\004\022\017\n\007balance\030\006 \001(\004\022\013\n"
      "\003gid\030\007 \001(\014\022\014\n\004type\030\010 \001(\r\022\016\n\006status\030\t \001(\r"
      "\022\017\n\007version\030\n \001(\r\"h\n\032GetAccountInitInfoR"
      "esponse\022\017\n\007balance\030\001 \001(\004\022-\n\007tx_list\030\002 \003("
      "\0132\034.tenon.block.protobuf.TxItem\022\n\n\002id\030\003 "
      "\001(\014\"0\n\026UpdateVpnActiveRequest\022\n\n\002id\030\001 \001("
      "\014\022\n\n\002ip\030\002 \001(\014\">\n\017AdRewardRequest\022\n\n\002id\030\001"
      " \001(\014\022\022\n\nreward_key\030\002 \001(\014\022\013\n\003gid\030\003 \001(\014\"\247\006"
      "\n\014BlockMessage\022:\n\tblock_req\030\001 \001(\0132\'.teno"
      "n.block.protobuf.GetTxBlockRequest\022;\n\tbl"
      "ock_res\030\002 \001(\0132(.tenon.block.protobuf.Get"
      "TxBlockResponse\022>\n\nheight_req\030\003 \001(\0132*.te"
      "non.block.protobuf.AccountHeightRequest\022"
      "\?\n\nheight_res\030\004 \001(\0132+.tenon.block.protob"
      "uf.AccountHeightResponse\022>\n\014acc_attr_req"
      "\030\005 \001(\0132(.tenon.block.protobuf.AccountAtt"
      "rRequest\022\?\n\014acc_attr_res\030\006 \001(\0132).tenon.b"
      "lock.protobuf.AccountAttrResponse\022\?\n\nup_"
      "vpn_req\030\007 \001(\0132+.tenon.block.protobuf.Upd"
      "ateVpnCountRequest\022@\n\nup_vpn_res\030\010 \001(\0132,"
      ".tenon.block.protobuf.UpdateVpnCountResp"
      "onse\022I\n\020account_init_req\030\t \001(\0132/.tenon.b"
      "lock.protobuf.GetAccountInitInfoRequest\022"
      "J\n\020account_init_res\030\n \001(\01320.tenon.block."
      "protobuf.GetAccountInitInfoResponse\022D\n\016v"
      "pn_active_req\030\013 \001(\0132,.tenon.block.protob"
      "uf.UpdateVpnActiveRequest\022<\n\rad_reward_r"
      "eq\030\014 \001(\0132%.tenon.block.protobuf.AdReward"
      "Request"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1967);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "block.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_block_2eproto
namespace tenon {
namespace block {
namespace protobuf {

// ===================================================================

void GetTxBlockRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTxBlockRequest::kTxGidFieldNumber;
const int GetTxBlockRequest::kBlockHashFieldNumber;
const int GetTxBlockRequest::kFromFieldNumber;
const int GetTxBlockRequest::kHeightFieldNumber;
const int GetTxBlockRequest::kAccountAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTxBlockRequest::GetTxBlockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_GetTxBlockRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.GetTxBlockRequest)
}
GetTxBlockRequest::GetTxBlockRequest(const GetTxBlockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tx_gid()) {
    tx_gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_gid_);
  }
  block_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_block_hash()) {
    block_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_hash_);
  }
  account_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_address()) {
    account_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_address_);
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_) -
    reinterpret_cast<char*>(&height_)) + sizeof(from_));
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.GetTxBlockRequest)
}

void GetTxBlockRequest::SharedCtor() {
  tx_gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_) -
      reinterpret_cast<char*>(&height_)) + sizeof(from_));
}

GetTxBlockRequest::~GetTxBlockRequest() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.GetTxBlockRequest)
  SharedDtor();
}

void GetTxBlockRequest::SharedDtor() {
  tx_gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetTxBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTxBlockRequest::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTxBlockRequest& GetTxBlockRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_GetTxBlockRequest.base);
  return *internal_default_instance();
}


void GetTxBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.GetTxBlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      tx_gid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      block_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      account_address_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_) -
        reinterpret_cast<char*>(&height_)) + sizeof(from_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTxBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.GetTxBlockRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes tx_gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx_gid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes block_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes account_address = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.GetTxBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.GetTxBlockRequest)
  return false;
#undef DO_
}

void GetTxBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.GetTxBlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes tx_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tx_gid(), output);
  }

  // optional bytes block_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->block_hash(), output);
  }

  // optional bool from = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from(), output);
  }

  // optional uint64 height = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->height(), output);
  }

  // optional bytes account_address = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->account_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.GetTxBlockRequest)
}

::google::protobuf::uint8* GetTxBlockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.GetTxBlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes tx_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tx_gid(), target);
  }

  // optional bytes block_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->block_hash(), target);
  }

  // optional bool from = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from(), target);
  }

  // optional uint64 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->height(), target);
  }

  // optional bytes account_address = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->account_address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.GetTxBlockRequest)
  return target;
}

size_t GetTxBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.GetTxBlockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes tx_gid = 1;
    if (has_tx_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tx_gid());
    }

    // optional bytes block_hash = 2;
    if (has_block_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->block_hash());
    }

    // optional bytes account_address = 5;
    if (has_account_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account_address());
    }

    // optional uint64 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

    // optional bool from = 3;
    if (has_from()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTxBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.GetTxBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTxBlockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTxBlockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.GetTxBlockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.GetTxBlockRequest)
    MergeFrom(*source);
  }
}

void GetTxBlockRequest::MergeFrom(const GetTxBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.GetTxBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tx_gid();
      tx_gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_gid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_block_hash();
      block_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_account_address();
      account_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_address_);
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      from_ = from.from_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetTxBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.GetTxBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTxBlockRequest::CopyFrom(const GetTxBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.GetTxBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxBlockRequest::IsInitialized() const {
  return true;
}

void GetTxBlockRequest::Swap(GetTxBlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTxBlockRequest::InternalSwap(GetTxBlockRequest* other) {
  using std::swap;
  tx_gid_.Swap(&other->tx_gid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  block_hash_.Swap(&other->block_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_address_.Swap(&other->account_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
  swap(from_, other->from_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTxBlockRequest::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTxBlockResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTxBlockResponse::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTxBlockResponse::GetTxBlockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_GetTxBlockResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.GetTxBlockResponse)
}
GetTxBlockResponse::GetTxBlockResponse(const GetTxBlockResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_block()) {
    block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_);
  }
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.GetTxBlockResponse)
}

void GetTxBlockResponse::SharedCtor() {
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetTxBlockResponse::~GetTxBlockResponse() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.GetTxBlockResponse)
  SharedDtor();
}

void GetTxBlockResponse::SharedDtor() {
  block_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetTxBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTxBlockResponse::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTxBlockResponse& GetTxBlockResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_GetTxBlockResponse.base);
  return *internal_default_instance();
}


void GetTxBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.GetTxBlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    block_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTxBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.GetTxBlockResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes block = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.GetTxBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.GetTxBlockResponse)
  return false;
#undef DO_
}

void GetTxBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.GetTxBlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes block = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->block(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.GetTxBlockResponse)
}

::google::protobuf::uint8* GetTxBlockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.GetTxBlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes block = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->block(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.GetTxBlockResponse)
  return target;
}

size_t GetTxBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.GetTxBlockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes block = 1;
  if (has_block()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->block());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTxBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.GetTxBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTxBlockResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTxBlockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.GetTxBlockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.GetTxBlockResponse)
    MergeFrom(*source);
  }
}

void GetTxBlockResponse::MergeFrom(const GetTxBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.GetTxBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    set_has_block();
    block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_);
  }
}

void GetTxBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.GetTxBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTxBlockResponse::CopyFrom(const GetTxBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.GetTxBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxBlockResponse::IsInitialized() const {
  return true;
}

void GetTxBlockResponse::Swap(GetTxBlockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTxBlockResponse::InternalSwap(GetTxBlockResponse* other) {
  using std::swap;
  block_.Swap(&other->block_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTxBlockResponse::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountHeightRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountHeightRequest::kAccountAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountHeightRequest::AccountHeightRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_AccountHeightRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.AccountHeightRequest)
}
AccountHeightRequest::AccountHeightRequest(const AccountHeightRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_addr()) {
    account_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_addr_);
  }
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.AccountHeightRequest)
}

void AccountHeightRequest::SharedCtor() {
  account_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccountHeightRequest::~AccountHeightRequest() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.AccountHeightRequest)
  SharedDtor();
}

void AccountHeightRequest::SharedDtor() {
  account_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountHeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountHeightRequest::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountHeightRequest& AccountHeightRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_AccountHeightRequest.base);
  return *internal_default_instance();
}


void AccountHeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.AccountHeightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    account_addr_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountHeightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.AccountHeightRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.AccountHeightRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.AccountHeightRequest)
  return false;
#undef DO_
}

void AccountHeightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.AccountHeightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account_addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.AccountHeightRequest)
}

::google::protobuf::uint8* AccountHeightRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.AccountHeightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account_addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.AccountHeightRequest)
  return target;
}

size_t AccountHeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.AccountHeightRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes account_addr = 1;
  if (has_account_addr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account_addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountHeightRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.AccountHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountHeightRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountHeightRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.AccountHeightRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.AccountHeightRequest)
    MergeFrom(*source);
  }
}

void AccountHeightRequest::MergeFrom(const AccountHeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.AccountHeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_addr()) {
    set_has_account_addr();
    account_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_addr_);
  }
}

void AccountHeightRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.AccountHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountHeightRequest::CopyFrom(const AccountHeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.AccountHeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountHeightRequest::IsInitialized() const {
  return true;
}

void AccountHeightRequest::Swap(AccountHeightRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountHeightRequest::InternalSwap(AccountHeightRequest* other) {
  using std::swap;
  account_addr_.Swap(&other->account_addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountHeightRequest::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountHeightResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountHeightResponse::kHeightsFieldNumber;
const int AccountHeightResponse::kAccountAddrFieldNumber;
const int AccountHeightResponse::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountHeightResponse::AccountHeightResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_AccountHeightResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.AccountHeightResponse)
}
AccountHeightResponse::AccountHeightResponse(const AccountHeightResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      heights_(from.heights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_addr()) {
    account_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_addr_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.AccountHeightResponse)
}

void AccountHeightResponse::SharedCtor() {
  account_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccountHeightResponse::~AccountHeightResponse() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.AccountHeightResponse)
  SharedDtor();
}

void AccountHeightResponse::SharedDtor() {
  account_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountHeightResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountHeightResponse::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountHeightResponse& AccountHeightResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_AccountHeightResponse.base);
  return *internal_default_instance();
}


void AccountHeightResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.AccountHeightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heights_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_addr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountHeightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.AccountHeightResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 heights = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_heights())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes account_addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.AccountHeightResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.AccountHeightResponse)
  return false;
#undef DO_
}

void AccountHeightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.AccountHeightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 heights = 1;
  for (int i = 0, n = this->heights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->heights(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes account_addr = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->account_addr(), output);
  }

  // optional bytes type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.AccountHeightResponse)
}

::google::protobuf::uint8* AccountHeightResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.AccountHeightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 heights = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->heights_, target);

  cached_has_bits = _has_bits_[0];
  // optional bytes account_addr = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account_addr(), target);
  }

  // optional bytes type = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.AccountHeightResponse)
  return target;
}

size_t AccountHeightResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.AccountHeightResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 heights = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->heights_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->heights_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes account_addr = 2;
    if (has_account_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account_addr());
    }

    // optional bytes type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountHeightResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.AccountHeightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountHeightResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountHeightResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.AccountHeightResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.AccountHeightResponse)
    MergeFrom(*source);
  }
}

void AccountHeightResponse::MergeFrom(const AccountHeightResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.AccountHeightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heights_.MergeFrom(from.heights_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account_addr();
      account_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
}

void AccountHeightResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.AccountHeightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountHeightResponse::CopyFrom(const AccountHeightResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.AccountHeightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountHeightResponse::IsInitialized() const {
  return true;
}

void AccountHeightResponse::Swap(AccountHeightResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountHeightResponse::InternalSwap(AccountHeightResponse* other) {
  using std::swap;
  heights_.InternalSwap(&other->heights_);
  account_addr_.Swap(&other->account_addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountHeightResponse::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountAttrRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountAttrRequest::kAccountFieldNumber;
const int AccountAttrRequest::kAttrKeyFieldNumber;
const int AccountAttrRequest::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountAttrRequest::AccountAttrRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_AccountAttrRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.AccountAttrRequest)
}
AccountAttrRequest::AccountAttrRequest(const AccountAttrRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  attr_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attr_key()) {
    attr_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attr_key_);
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.AccountAttrRequest)
}

void AccountAttrRequest::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attr_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = GOOGLE_ULONGLONG(0);
}

AccountAttrRequest::~AccountAttrRequest() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.AccountAttrRequest)
  SharedDtor();
}

void AccountAttrRequest::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attr_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountAttrRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountAttrRequest::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountAttrRequest& AccountAttrRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_AccountAttrRequest.base);
  return *internal_default_instance();
}


void AccountAttrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.AccountAttrRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      attr_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  height_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountAttrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.AccountAttrRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes attr_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attr_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.AccountAttrRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.AccountAttrRequest)
  return false;
#undef DO_
}

void AccountAttrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.AccountAttrRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account(), output);
  }

  // optional bytes attr_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->attr_key(), output);
  }

  // optional uint64 height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.AccountAttrRequest)
}

::google::protobuf::uint8* AccountAttrRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.AccountAttrRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes attr_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attr_key(), target);
  }

  // optional uint64 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.AccountAttrRequest)
  return target;
}

size_t AccountAttrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.AccountAttrRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes attr_key = 2;
    if (has_attr_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attr_key());
    }

    // optional uint64 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountAttrRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.AccountAttrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountAttrRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountAttrRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.AccountAttrRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.AccountAttrRequest)
    MergeFrom(*source);
  }
}

void AccountAttrRequest::MergeFrom(const AccountAttrRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.AccountAttrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_attr_key();
      attr_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attr_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountAttrRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.AccountAttrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountAttrRequest::CopyFrom(const AccountAttrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.AccountAttrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountAttrRequest::IsInitialized() const {
  return true;
}

void AccountAttrRequest::Swap(AccountAttrRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountAttrRequest::InternalSwap(AccountAttrRequest* other) {
  using std::swap;
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attr_key_.Swap(&other->attr_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountAttrRequest::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountAttrResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountAttrResponse::kAccountFieldNumber;
const int AccountAttrResponse::kAttrKeyFieldNumber;
const int AccountAttrResponse::kHeightFieldNumber;
const int AccountAttrResponse::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountAttrResponse::AccountAttrResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_AccountAttrResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.AccountAttrResponse)
}
AccountAttrResponse::AccountAttrResponse(const AccountAttrResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  attr_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attr_key()) {
    attr_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attr_key_);
  }
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_block()) {
    block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_);
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.AccountAttrResponse)
}

void AccountAttrResponse::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attr_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = GOOGLE_ULONGLONG(0);
}

AccountAttrResponse::~AccountAttrResponse() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.AccountAttrResponse)
  SharedDtor();
}

void AccountAttrResponse::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attr_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountAttrResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountAttrResponse::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountAttrResponse& AccountAttrResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_AccountAttrResponse.base);
  return *internal_default_instance();
}


void AccountAttrResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.AccountAttrResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      attr_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      block_.ClearNonDefaultToEmptyNoArena();
    }
  }
  height_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountAttrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.AccountAttrResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes attr_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attr_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes block = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.AccountAttrResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.AccountAttrResponse)
  return false;
#undef DO_
}

void AccountAttrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.AccountAttrResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account(), output);
  }

  // optional bytes attr_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->attr_key(), output);
  }

  // optional uint64 height = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->height(), output);
  }

  // optional bytes block = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->block(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.AccountAttrResponse)
}

::google::protobuf::uint8* AccountAttrResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.AccountAttrResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes attr_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attr_key(), target);
  }

  // optional uint64 height = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->height(), target);
  }

  // optional bytes block = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->block(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.AccountAttrResponse)
  return target;
}

size_t AccountAttrResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.AccountAttrResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes attr_key = 2;
    if (has_attr_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attr_key());
    }

    // optional bytes block = 4;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->block());
    }

    // optional uint64 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountAttrResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.AccountAttrResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountAttrResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountAttrResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.AccountAttrResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.AccountAttrResponse)
    MergeFrom(*source);
  }
}

void AccountAttrResponse::MergeFrom(const AccountAttrResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.AccountAttrResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_attr_key();
      attr_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attr_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_block();
      block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_);
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountAttrResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.AccountAttrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountAttrResponse::CopyFrom(const AccountAttrResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.AccountAttrResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountAttrResponse::IsInitialized() const {
  return true;
}

void AccountAttrResponse::Swap(AccountAttrResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountAttrResponse::InternalSwap(AccountAttrResponse* other) {
  using std::swap;
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attr_key_.Swap(&other->attr_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  block_.Swap(&other->block_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountAttrResponse::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateVpnCountRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateVpnCountRequest::kAccountHashFieldNumber;
const int UpdateVpnCountRequest::kIpFieldNumber;
const int UpdateVpnCountRequest::kOldIpFieldNumber;
const int UpdateVpnCountRequest::kUidFieldNumber;
const int UpdateVpnCountRequest::kJustSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateVpnCountRequest::UpdateVpnCountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_UpdateVpnCountRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.UpdateVpnCountRequest)
}
UpdateVpnCountRequest::UpdateVpnCountRequest(const UpdateVpnCountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  old_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_old_ip()) {
    old_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_ip_);
  }
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid()) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  ::memcpy(&account_hash_, &from.account_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&just_set_) -
    reinterpret_cast<char*>(&account_hash_)) + sizeof(just_set_));
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.UpdateVpnCountRequest)
}

void UpdateVpnCountRequest::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&just_set_) -
      reinterpret_cast<char*>(&account_hash_)) + sizeof(just_set_));
}

UpdateVpnCountRequest::~UpdateVpnCountRequest() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.UpdateVpnCountRequest)
  SharedDtor();
}

void UpdateVpnCountRequest::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateVpnCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateVpnCountRequest::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateVpnCountRequest& UpdateVpnCountRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_UpdateVpnCountRequest.base);
  return *internal_default_instance();
}


void UpdateVpnCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.UpdateVpnCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      old_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      uid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&account_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&just_set_) -
        reinterpret_cast<char*>(&account_hash_)) + sizeof(just_set_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateVpnCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.UpdateVpnCountRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 account_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes old_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_old_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes uid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool just_set = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_just_set();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &just_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.UpdateVpnCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.UpdateVpnCountRequest)
  return false;
#undef DO_
}

void UpdateVpnCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.UpdateVpnCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account_hash = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account_hash(), output);
  }

  // optional bytes ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ip(), output);
  }

  // optional bytes old_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->old_ip(), output);
  }

  // optional bytes uid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->uid(), output);
  }

  // optional bool just_set = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->just_set(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.UpdateVpnCountRequest)
}

::google::protobuf::uint8* UpdateVpnCountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.UpdateVpnCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account_hash = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account_hash(), target);
  }

  // optional bytes ip = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // optional bytes old_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->old_ip(), target);
  }

  // optional bytes uid = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->uid(), target);
  }

  // optional bool just_set = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->just_set(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.UpdateVpnCountRequest)
  return target;
}

size_t UpdateVpnCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.UpdateVpnCountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional bytes old_ip = 3;
    if (has_old_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->old_ip());
    }

    // optional bytes uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uid());
    }

    // optional uint64 account_hash = 1;
    if (has_account_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account_hash());
    }

    // optional bool just_set = 5;
    if (has_just_set()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateVpnCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.UpdateVpnCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateVpnCountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateVpnCountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.UpdateVpnCountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.UpdateVpnCountRequest)
    MergeFrom(*source);
  }
}

void UpdateVpnCountRequest::MergeFrom(const UpdateVpnCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.UpdateVpnCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_old_ip();
      old_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (cached_has_bits & 0x00000008u) {
      account_hash_ = from.account_hash_;
    }
    if (cached_has_bits & 0x00000010u) {
      just_set_ = from.just_set_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateVpnCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.UpdateVpnCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateVpnCountRequest::CopyFrom(const UpdateVpnCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.UpdateVpnCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVpnCountRequest::IsInitialized() const {
  return true;
}

void UpdateVpnCountRequest::Swap(UpdateVpnCountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateVpnCountRequest::InternalSwap(UpdateVpnCountRequest* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  old_ip_.Swap(&other->old_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uid_.Swap(&other->uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_hash_, other->account_hash_);
  swap(just_set_, other->just_set_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateVpnCountRequest::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VpnCountItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VpnCountItem::kIpFieldNumber;
const int VpnCountItem::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VpnCountItem::VpnCountItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_VpnCountItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.VpnCountItem)
}
VpnCountItem::VpnCountItem(const VpnCountItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.VpnCountItem)
}

void VpnCountItem::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
}

VpnCountItem::~VpnCountItem() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.VpnCountItem)
  SharedDtor();
}

void VpnCountItem::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VpnCountItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VpnCountItem::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VpnCountItem& VpnCountItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_VpnCountItem.base);
  return *internal_default_instance();
}


void VpnCountItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.VpnCountItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmptyNoArena();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VpnCountItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.VpnCountItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.VpnCountItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.VpnCountItem)
  return false;
#undef DO_
}

void VpnCountItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.VpnCountItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.VpnCountItem)
}

::google::protobuf::uint8* VpnCountItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.VpnCountItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.VpnCountItem)
  return target;
}

size_t VpnCountItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.VpnCountItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VpnCountItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.VpnCountItem)
  GOOGLE_DCHECK_NE(&from, this);
  const VpnCountItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VpnCountItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.VpnCountItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.VpnCountItem)
    MergeFrom(*source);
  }
}

void VpnCountItem::MergeFrom(const VpnCountItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.VpnCountItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VpnCountItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.VpnCountItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VpnCountItem::CopyFrom(const VpnCountItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.VpnCountItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VpnCountItem::IsInitialized() const {
  return true;
}

void VpnCountItem::Swap(VpnCountItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VpnCountItem::InternalSwap(VpnCountItem* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VpnCountItem::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateVpnCountResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateVpnCountResponse::kVpnNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateVpnCountResponse::UpdateVpnCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_UpdateVpnCountResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.UpdateVpnCountResponse)
}
UpdateVpnCountResponse::UpdateVpnCountResponse(const UpdateVpnCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      vpn_nodes_(from.vpn_nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.UpdateVpnCountResponse)
}

void UpdateVpnCountResponse::SharedCtor() {
}

UpdateVpnCountResponse::~UpdateVpnCountResponse() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.UpdateVpnCountResponse)
  SharedDtor();
}

void UpdateVpnCountResponse::SharedDtor() {
}

void UpdateVpnCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateVpnCountResponse::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateVpnCountResponse& UpdateVpnCountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_UpdateVpnCountResponse.base);
  return *internal_default_instance();
}


void UpdateVpnCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.UpdateVpnCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vpn_nodes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateVpnCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.UpdateVpnCountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tenon.block.protobuf.VpnCountItem vpn_nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vpn_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.UpdateVpnCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.UpdateVpnCountResponse)
  return false;
#undef DO_
}

void UpdateVpnCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.UpdateVpnCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tenon.block.protobuf.VpnCountItem vpn_nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vpn_nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->vpn_nodes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.UpdateVpnCountResponse)
}

::google::protobuf::uint8* UpdateVpnCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.UpdateVpnCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tenon.block.protobuf.VpnCountItem vpn_nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vpn_nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vpn_nodes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.UpdateVpnCountResponse)
  return target;
}

size_t UpdateVpnCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.UpdateVpnCountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tenon.block.protobuf.VpnCountItem vpn_nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vpn_nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vpn_nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateVpnCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.UpdateVpnCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateVpnCountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateVpnCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.UpdateVpnCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.UpdateVpnCountResponse)
    MergeFrom(*source);
  }
}

void UpdateVpnCountResponse::MergeFrom(const UpdateVpnCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.UpdateVpnCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vpn_nodes_.MergeFrom(from.vpn_nodes_);
}

void UpdateVpnCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.UpdateVpnCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateVpnCountResponse::CopyFrom(const UpdateVpnCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.UpdateVpnCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVpnCountResponse::IsInitialized() const {
  return true;
}

void UpdateVpnCountResponse::Swap(UpdateVpnCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateVpnCountResponse::InternalSwap(UpdateVpnCountResponse* other) {
  using std::swap;
  CastToBase(&vpn_nodes_)->InternalSwap(CastToBase(&other->vpn_nodes_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateVpnCountResponse::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetAccountInitInfoRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAccountInitInfoRequest::kIdFieldNumber;
const int GetAccountInitInfoRequest::kCountFieldNumber;
const int GetAccountInitInfoRequest::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAccountInitInfoRequest::GetAccountInitInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_GetAccountInitInfoRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.GetAccountInitInfoRequest)
}
GetAccountInitInfoRequest::GetAccountInitInfoRequest(const GetAccountInitInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&height_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.GetAccountInitInfoRequest)
}

void GetAccountInitInfoRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&height_)) + sizeof(count_));
}

GetAccountInitInfoRequest::~GetAccountInitInfoRequest() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.GetAccountInitInfoRequest)
  SharedDtor();
}

void GetAccountInitInfoRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetAccountInitInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetAccountInitInfoRequest::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAccountInitInfoRequest& GetAccountInitInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_GetAccountInitInfoRequest.base);
  return *internal_default_instance();
}


void GetAccountInitInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.GetAccountInitInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&height_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetAccountInitInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.GetAccountInitInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.GetAccountInitInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.GetAccountInitInfoRequest)
  return false;
#undef DO_
}

void GetAccountInitInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.GetAccountInitInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint64 height = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.GetAccountInitInfoRequest)
}

::google::protobuf::uint8* GetAccountInitInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.GetAccountInitInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint64 height = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.GetAccountInitInfoRequest)
  return target;
}

size_t GetAccountInitInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.GetAccountInitInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional uint64 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountInitInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.GetAccountInitInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountInitInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAccountInitInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.GetAccountInitInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.GetAccountInitInfoRequest)
    MergeFrom(*source);
  }
}

void GetAccountInitInfoRequest::MergeFrom(const GetAccountInitInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.GetAccountInitInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetAccountInitInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.GetAccountInitInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountInitInfoRequest::CopyFrom(const GetAccountInitInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.GetAccountInitInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountInitInfoRequest::IsInitialized() const {
  return true;
}

void GetAccountInitInfoRequest::Swap(GetAccountInitInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAccountInitInfoRequest::InternalSwap(GetAccountInitInfoRequest* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetAccountInitInfoRequest::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TxItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxItem::kFromFieldNumber;
const int TxItem::kToFieldNumber;
const int TxItem::kAmountFieldNumber;
const int TxItem::kTimestampFieldNumber;
const int TxItem::kHeightFieldNumber;
const int TxItem::kBalanceFieldNumber;
const int TxItem::kGidFieldNumber;
const int TxItem::kTypeFieldNumber;
const int TxItem::kStatusFieldNumber;
const int TxItem::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxItem::TxItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_TxItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.TxItem)
}
TxItem::TxItem(const TxItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from()) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to()) {
    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gid()) {
    gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.TxItem)
}

void TxItem::SharedCtor() {
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(version_));
}

TxItem::~TxItem() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.TxItem)
  SharedDtor();
}

void TxItem::SharedDtor() {
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TxItem::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxItem& TxItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_TxItem.base);
  return *internal_default_instance();
}


void TxItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.TxItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      from_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      to_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      gid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(type_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&status_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TxItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.TxItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 balance = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes gid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.TxItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.TxItem)
  return false;
#undef DO_
}

void TxItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.TxItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->from(), output);
  }

  // optional bytes to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->to(), output);
  }

  // optional uint64 amount = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  // optional uint64 height = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->height(), output);
  }

  // optional uint64 balance = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->balance(), output);
  }

  // optional bytes gid = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->gid(), output);
  }

  // optional uint32 type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->type(), output);
  }

  // optional uint32 status = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->status(), output);
  }

  // optional uint32 version = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.TxItem)
}

::google::protobuf::uint8* TxItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.TxItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes from = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->from(), target);
  }

  // optional bytes to = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->to(), target);
  }

  // optional uint64 amount = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  // optional uint64 height = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->height(), target);
  }

  // optional uint64 balance = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->balance(), target);
  }

  // optional bytes gid = 7;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->gid(), target);
  }

  // optional uint32 type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->type(), target);
  }

  // optional uint32 status = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->status(), target);
  }

  // optional uint32 version = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.TxItem)
  return target;
}

size_t TxItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.TxItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }

    // optional bytes to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to());
    }

    // optional bytes gid = 7;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

    // optional uint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint64 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

    // optional uint64 balance = 6;
    if (has_balance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->balance());
    }

    // optional uint32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.TxItem)
  GOOGLE_DCHECK_NE(&from, this);
  const TxItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.TxItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.TxItem)
    MergeFrom(*source);
  }
}

void TxItem::MergeFrom(const TxItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.TxItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from();
      from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to();
      to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_gid();
      gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
    }
    if (cached_has_bits & 0x00000008u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000200u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TxItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.TxItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxItem::CopyFrom(const TxItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.TxItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxItem::IsInitialized() const {
  return true;
}

void TxItem::Swap(TxItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxItem::InternalSwap(TxItem* other) {
  using std::swap;
  from_.Swap(&other->from_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_.Swap(&other->to_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gid_.Swap(&other->gid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(timestamp_, other->timestamp_);
  swap(height_, other->height_);
  swap(balance_, other->balance_);
  swap(type_, other->type_);
  swap(status_, other->status_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TxItem::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetAccountInitInfoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAccountInitInfoResponse::kBalanceFieldNumber;
const int GetAccountInitInfoResponse::kTxListFieldNumber;
const int GetAccountInitInfoResponse::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAccountInitInfoResponse::GetAccountInitInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_GetAccountInitInfoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.GetAccountInitInfoResponse)
}
GetAccountInitInfoResponse::GetAccountInitInfoResponse(const GetAccountInitInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tx_list_(from.tx_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  balance_ = from.balance_;
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.GetAccountInitInfoResponse)
}

void GetAccountInitInfoResponse::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  balance_ = GOOGLE_ULONGLONG(0);
}

GetAccountInitInfoResponse::~GetAccountInitInfoResponse() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.GetAccountInitInfoResponse)
  SharedDtor();
}

void GetAccountInitInfoResponse::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetAccountInitInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetAccountInitInfoResponse::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAccountInitInfoResponse& GetAccountInitInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_GetAccountInitInfoResponse.base);
  return *internal_default_instance();
}


void GetAccountInitInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.GetAccountInitInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  balance_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetAccountInitInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.GetAccountInitInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 balance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tenon.block.protobuf.TxItem tx_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tx_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.GetAccountInitInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.GetAccountInitInfoResponse)
  return false;
#undef DO_
}

void GetAccountInitInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.GetAccountInitInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 balance = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->balance(), output);
  }

  // repeated .tenon.block.protobuf.TxItem tx_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tx_list(static_cast<int>(i)),
      output);
  }

  // optional bytes id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.GetAccountInitInfoResponse)
}

::google::protobuf::uint8* GetAccountInitInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.GetAccountInitInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 balance = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->balance(), target);
  }

  // repeated .tenon.block.protobuf.TxItem tx_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tx_list(static_cast<int>(i)), deterministic, target);
  }

  // optional bytes id = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.GetAccountInitInfoResponse)
  return target;
}

size_t GetAccountInitInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.GetAccountInitInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tenon.block.protobuf.TxItem tx_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tx_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tx_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional uint64 balance = 1;
    if (has_balance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->balance());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountInitInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.GetAccountInitInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountInitInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAccountInitInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.GetAccountInitInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.GetAccountInitInfoResponse)
    MergeFrom(*source);
  }
}

void GetAccountInitInfoResponse::MergeFrom(const GetAccountInitInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.GetAccountInitInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tx_list_.MergeFrom(from.tx_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      balance_ = from.balance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetAccountInitInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.GetAccountInitInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountInitInfoResponse::CopyFrom(const GetAccountInitInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.GetAccountInitInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountInitInfoResponse::IsInitialized() const {
  return true;
}

void GetAccountInitInfoResponse::Swap(GetAccountInitInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAccountInitInfoResponse::InternalSwap(GetAccountInitInfoResponse* other) {
  using std::swap;
  CastToBase(&tx_list_)->InternalSwap(CastToBase(&other->tx_list_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(balance_, other->balance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetAccountInitInfoResponse::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateVpnActiveRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateVpnActiveRequest::kIdFieldNumber;
const int UpdateVpnActiveRequest::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateVpnActiveRequest::UpdateVpnActiveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_UpdateVpnActiveRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.UpdateVpnActiveRequest)
}
UpdateVpnActiveRequest::UpdateVpnActiveRequest(const UpdateVpnActiveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.UpdateVpnActiveRequest)
}

void UpdateVpnActiveRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateVpnActiveRequest::~UpdateVpnActiveRequest() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.UpdateVpnActiveRequest)
  SharedDtor();
}

void UpdateVpnActiveRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateVpnActiveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateVpnActiveRequest::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateVpnActiveRequest& UpdateVpnActiveRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_UpdateVpnActiveRequest.base);
  return *internal_default_instance();
}


void UpdateVpnActiveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.UpdateVpnActiveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateVpnActiveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.UpdateVpnActiveRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.UpdateVpnActiveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.UpdateVpnActiveRequest)
  return false;
#undef DO_
}

void UpdateVpnActiveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.UpdateVpnActiveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional bytes ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.UpdateVpnActiveRequest)
}

::google::protobuf::uint8* UpdateVpnActiveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.UpdateVpnActiveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional bytes ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.UpdateVpnActiveRequest)
  return target;
}

size_t UpdateVpnActiveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.UpdateVpnActiveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateVpnActiveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.UpdateVpnActiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateVpnActiveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateVpnActiveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.UpdateVpnActiveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.UpdateVpnActiveRequest)
    MergeFrom(*source);
  }
}

void UpdateVpnActiveRequest::MergeFrom(const UpdateVpnActiveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.UpdateVpnActiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
}

void UpdateVpnActiveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.UpdateVpnActiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateVpnActiveRequest::CopyFrom(const UpdateVpnActiveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.UpdateVpnActiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVpnActiveRequest::IsInitialized() const {
  return true;
}

void UpdateVpnActiveRequest::Swap(UpdateVpnActiveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateVpnActiveRequest::InternalSwap(UpdateVpnActiveRequest* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateVpnActiveRequest::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AdRewardRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdRewardRequest::kIdFieldNumber;
const int AdRewardRequest::kRewardKeyFieldNumber;
const int AdRewardRequest::kGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdRewardRequest::AdRewardRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_AdRewardRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.AdRewardRequest)
}
AdRewardRequest::AdRewardRequest(const AdRewardRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  reward_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reward_key()) {
    reward_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward_key_);
  }
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gid()) {
    gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
  }
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.AdRewardRequest)
}

void AdRewardRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AdRewardRequest::~AdRewardRequest() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.AdRewardRequest)
  SharedDtor();
}

void AdRewardRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AdRewardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AdRewardRequest::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AdRewardRequest& AdRewardRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_AdRewardRequest.base);
  return *internal_default_instance();
}


void AdRewardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.AdRewardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      reward_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      gid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AdRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.AdRewardRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes reward_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes gid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.AdRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.AdRewardRequest)
  return false;
#undef DO_
}

void AdRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.AdRewardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional bytes reward_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->reward_key(), output);
  }

  // optional bytes gid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.AdRewardRequest)
}

::google::protobuf::uint8* AdRewardRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.AdRewardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional bytes reward_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->reward_key(), target);
  }

  // optional bytes gid = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.AdRewardRequest)
  return target;
}

size_t AdRewardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.AdRewardRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes reward_key = 2;
    if (has_reward_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reward_key());
    }

    // optional bytes gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdRewardRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.AdRewardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AdRewardRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdRewardRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.AdRewardRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.AdRewardRequest)
    MergeFrom(*source);
  }
}

void AdRewardRequest::MergeFrom(const AdRewardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.AdRewardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_reward_key();
      reward_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reward_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_gid();
      gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
    }
  }
}

void AdRewardRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.AdRewardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdRewardRequest::CopyFrom(const AdRewardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.AdRewardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdRewardRequest::IsInitialized() const {
  return true;
}

void AdRewardRequest::Swap(AdRewardRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdRewardRequest::InternalSwap(AdRewardRequest* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reward_key_.Swap(&other->reward_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gid_.Swap(&other->gid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AdRewardRequest::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BlockMessage::InitAsDefaultInstance() {
  ::tenon::block::protobuf::_BlockMessage_default_instance_._instance.get_mutable()->block_req_ = const_cast< ::tenon::block::protobuf::GetTxBlockRequest*>(
      ::tenon::block::protobuf::GetTxBlockRequest::internal_default_instance());
  ::tenon::block::protobuf::_BlockMessage_default_instance_._instance.get_mutable()->block_res_ = const_cast< ::tenon::block::protobuf::GetTxBlockResponse*>(
      ::tenon::block::protobuf::GetTxBlockResponse::internal_default_instance());
  ::tenon::block::protobuf::_BlockMessage_default_instance_._instance.get_mutable()->height_req_ = const_cast< ::tenon::block::protobuf::AccountHeightRequest*>(
      ::tenon::block::protobuf::AccountHeightRequest::internal_default_instance());
  ::tenon::block::protobuf::_BlockMessage_default_instance_._instance.get_mutable()->height_res_ = const_cast< ::tenon::block::protobuf::AccountHeightResponse*>(
      ::tenon::block::protobuf::AccountHeightResponse::internal_default_instance());
  ::tenon::block::protobuf::_BlockMessage_default_instance_._instance.get_mutable()->acc_attr_req_ = const_cast< ::tenon::block::protobuf::AccountAttrRequest*>(
      ::tenon::block::protobuf::AccountAttrRequest::internal_default_instance());
  ::tenon::block::protobuf::_BlockMessage_default_instance_._instance.get_mutable()->acc_attr_res_ = const_cast< ::tenon::block::protobuf::AccountAttrResponse*>(
      ::tenon::block::protobuf::AccountAttrResponse::internal_default_instance());
  ::tenon::block::protobuf::_BlockMessage_default_instance_._instance.get_mutable()->up_vpn_req_ = const_cast< ::tenon::block::protobuf::UpdateVpnCountRequest*>(
      ::tenon::block::protobuf::UpdateVpnCountRequest::internal_default_instance());
  ::tenon::block::protobuf::_BlockMessage_default_instance_._instance.get_mutable()->up_vpn_res_ = const_cast< ::tenon::block::protobuf::UpdateVpnCountResponse*>(
      ::tenon::block::protobuf::UpdateVpnCountResponse::internal_default_instance());
  ::tenon::block::protobuf::_BlockMessage_default_instance_._instance.get_mutable()->account_init_req_ = const_cast< ::tenon::block::protobuf::GetAccountInitInfoRequest*>(
      ::tenon::block::protobuf::GetAccountInitInfoRequest::internal_default_instance());
  ::tenon::block::protobuf::_BlockMessage_default_instance_._instance.get_mutable()->account_init_res_ = const_cast< ::tenon::block::protobuf::GetAccountInitInfoResponse*>(
      ::tenon::block::protobuf::GetAccountInitInfoResponse::internal_default_instance());
  ::tenon::block::protobuf::_BlockMessage_default_instance_._instance.get_mutable()->vpn_active_req_ = const_cast< ::tenon::block::protobuf::UpdateVpnActiveRequest*>(
      ::tenon::block::protobuf::UpdateVpnActiveRequest::internal_default_instance());
  ::tenon::block::protobuf::_BlockMessage_default_instance_._instance.get_mutable()->ad_reward_req_ = const_cast< ::tenon::block::protobuf::AdRewardRequest*>(
      ::tenon::block::protobuf::AdRewardRequest::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockMessage::kBlockReqFieldNumber;
const int BlockMessage::kBlockResFieldNumber;
const int BlockMessage::kHeightReqFieldNumber;
const int BlockMessage::kHeightResFieldNumber;
const int BlockMessage::kAccAttrReqFieldNumber;
const int BlockMessage::kAccAttrResFieldNumber;
const int BlockMessage::kUpVpnReqFieldNumber;
const int BlockMessage::kUpVpnResFieldNumber;
const int BlockMessage::kAccountInitReqFieldNumber;
const int BlockMessage::kAccountInitResFieldNumber;
const int BlockMessage::kVpnActiveReqFieldNumber;
const int BlockMessage::kAdRewardReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockMessage::BlockMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_block_2eproto::scc_info_BlockMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.block.protobuf.BlockMessage)
}
BlockMessage::BlockMessage(const BlockMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block_req()) {
    block_req_ = new ::tenon::block::protobuf::GetTxBlockRequest(*from.block_req_);
  } else {
    block_req_ = NULL;
  }
  if (from.has_block_res()) {
    block_res_ = new ::tenon::block::protobuf::GetTxBlockResponse(*from.block_res_);
  } else {
    block_res_ = NULL;
  }
  if (from.has_height_req()) {
    height_req_ = new ::tenon::block::protobuf::AccountHeightRequest(*from.height_req_);
  } else {
    height_req_ = NULL;
  }
  if (from.has_height_res()) {
    height_res_ = new ::tenon::block::protobuf::AccountHeightResponse(*from.height_res_);
  } else {
    height_res_ = NULL;
  }
  if (from.has_acc_attr_req()) {
    acc_attr_req_ = new ::tenon::block::protobuf::AccountAttrRequest(*from.acc_attr_req_);
  } else {
    acc_attr_req_ = NULL;
  }
  if (from.has_acc_attr_res()) {
    acc_attr_res_ = new ::tenon::block::protobuf::AccountAttrResponse(*from.acc_attr_res_);
  } else {
    acc_attr_res_ = NULL;
  }
  if (from.has_up_vpn_req()) {
    up_vpn_req_ = new ::tenon::block::protobuf::UpdateVpnCountRequest(*from.up_vpn_req_);
  } else {
    up_vpn_req_ = NULL;
  }
  if (from.has_up_vpn_res()) {
    up_vpn_res_ = new ::tenon::block::protobuf::UpdateVpnCountResponse(*from.up_vpn_res_);
  } else {
    up_vpn_res_ = NULL;
  }
  if (from.has_account_init_req()) {
    account_init_req_ = new ::tenon::block::protobuf::GetAccountInitInfoRequest(*from.account_init_req_);
  } else {
    account_init_req_ = NULL;
  }
  if (from.has_account_init_res()) {
    account_init_res_ = new ::tenon::block::protobuf::GetAccountInitInfoResponse(*from.account_init_res_);
  } else {
    account_init_res_ = NULL;
  }
  if (from.has_vpn_active_req()) {
    vpn_active_req_ = new ::tenon::block::protobuf::UpdateVpnActiveRequest(*from.vpn_active_req_);
  } else {
    vpn_active_req_ = NULL;
  }
  if (from.has_ad_reward_req()) {
    ad_reward_req_ = new ::tenon::block::protobuf::AdRewardRequest(*from.ad_reward_req_);
  } else {
    ad_reward_req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tenon.block.protobuf.BlockMessage)
}

void BlockMessage::SharedCtor() {
  ::memset(&block_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ad_reward_req_) -
      reinterpret_cast<char*>(&block_req_)) + sizeof(ad_reward_req_));
}

BlockMessage::~BlockMessage() {
  // @@protoc_insertion_point(destructor:tenon.block.protobuf.BlockMessage)
  SharedDtor();
}

void BlockMessage::SharedDtor() {
  if (this != internal_default_instance()) delete block_req_;
  if (this != internal_default_instance()) delete block_res_;
  if (this != internal_default_instance()) delete height_req_;
  if (this != internal_default_instance()) delete height_res_;
  if (this != internal_default_instance()) delete acc_attr_req_;
  if (this != internal_default_instance()) delete acc_attr_res_;
  if (this != internal_default_instance()) delete up_vpn_req_;
  if (this != internal_default_instance()) delete up_vpn_res_;
  if (this != internal_default_instance()) delete account_init_req_;
  if (this != internal_default_instance()) delete account_init_res_;
  if (this != internal_default_instance()) delete vpn_active_req_;
  if (this != internal_default_instance()) delete ad_reward_req_;
}

void BlockMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BlockMessage::descriptor() {
  ::protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockMessage& BlockMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_block_2eproto::scc_info_BlockMessage.base);
  return *internal_default_instance();
}


void BlockMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.block.protobuf.BlockMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(block_req_ != NULL);
      block_req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(block_res_ != NULL);
      block_res_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(height_req_ != NULL);
      height_req_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(height_res_ != NULL);
      height_res_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(acc_attr_req_ != NULL);
      acc_attr_req_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(acc_attr_res_ != NULL);
      acc_attr_res_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(up_vpn_req_ != NULL);
      up_vpn_req_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(up_vpn_res_ != NULL);
      up_vpn_res_->Clear();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(account_init_req_ != NULL);
      account_init_req_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(account_init_res_ != NULL);
      account_init_res_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(vpn_active_req_ != NULL);
      vpn_active_req_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(ad_reward_req_ != NULL);
      ad_reward_req_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlockMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.block.protobuf.BlockMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tenon.block.protobuf.GetTxBlockRequest block_req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.block.protobuf.GetTxBlockResponse block_res = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.block.protobuf.AccountHeightRequest height_req = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_height_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.block.protobuf.AccountHeightResponse height_res = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_height_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.block.protobuf.AccountAttrRequest acc_attr_req = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acc_attr_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.block.protobuf.AccountAttrResponse acc_attr_res = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acc_attr_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_up_vpn_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_up_vpn_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account_init_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account_init_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vpn_active_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.block.protobuf.AdRewardRequest ad_reward_req = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ad_reward_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.block.protobuf.BlockMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.block.protobuf.BlockMessage)
  return false;
#undef DO_
}

void BlockMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.block.protobuf.BlockMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.block.protobuf.GetTxBlockRequest block_req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_block_req(), output);
  }

  // optional .tenon.block.protobuf.GetTxBlockResponse block_res = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_block_res(), output);
  }

  // optional .tenon.block.protobuf.AccountHeightRequest height_req = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_height_req(), output);
  }

  // optional .tenon.block.protobuf.AccountHeightResponse height_res = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_height_res(), output);
  }

  // optional .tenon.block.protobuf.AccountAttrRequest acc_attr_req = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_acc_attr_req(), output);
  }

  // optional .tenon.block.protobuf.AccountAttrResponse acc_attr_res = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_acc_attr_res(), output);
  }

  // optional .tenon.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_up_vpn_req(), output);
  }

  // optional .tenon.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_up_vpn_res(), output);
  }

  // optional .tenon.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_account_init_req(), output);
  }

  // optional .tenon.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_account_init_res(), output);
  }

  // optional .tenon.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_vpn_active_req(), output);
  }

  // optional .tenon.block.protobuf.AdRewardRequest ad_reward_req = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_ad_reward_req(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.block.protobuf.BlockMessage)
}

::google::protobuf::uint8* BlockMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.block.protobuf.BlockMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.block.protobuf.GetTxBlockRequest block_req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_block_req(), deterministic, target);
  }

  // optional .tenon.block.protobuf.GetTxBlockResponse block_res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_block_res(), deterministic, target);
  }

  // optional .tenon.block.protobuf.AccountHeightRequest height_req = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_height_req(), deterministic, target);
  }

  // optional .tenon.block.protobuf.AccountHeightResponse height_res = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_height_res(), deterministic, target);
  }

  // optional .tenon.block.protobuf.AccountAttrRequest acc_attr_req = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_acc_attr_req(), deterministic, target);
  }

  // optional .tenon.block.protobuf.AccountAttrResponse acc_attr_res = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_acc_attr_res(), deterministic, target);
  }

  // optional .tenon.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_up_vpn_req(), deterministic, target);
  }

  // optional .tenon.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_up_vpn_res(), deterministic, target);
  }

  // optional .tenon.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_account_init_req(), deterministic, target);
  }

  // optional .tenon.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_account_init_res(), deterministic, target);
  }

  // optional .tenon.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_vpn_active_req(), deterministic, target);
  }

  // optional .tenon.block.protobuf.AdRewardRequest ad_reward_req = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_ad_reward_req(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.block.protobuf.BlockMessage)
  return target;
}

size_t BlockMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.block.protobuf.BlockMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .tenon.block.protobuf.GetTxBlockRequest block_req = 1;
    if (has_block_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *block_req_);
    }

    // optional .tenon.block.protobuf.GetTxBlockResponse block_res = 2;
    if (has_block_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *block_res_);
    }

    // optional .tenon.block.protobuf.AccountHeightRequest height_req = 3;
    if (has_height_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *height_req_);
    }

    // optional .tenon.block.protobuf.AccountHeightResponse height_res = 4;
    if (has_height_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *height_res_);
    }

    // optional .tenon.block.protobuf.AccountAttrRequest acc_attr_req = 5;
    if (has_acc_attr_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *acc_attr_req_);
    }

    // optional .tenon.block.protobuf.AccountAttrResponse acc_attr_res = 6;
    if (has_acc_attr_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *acc_attr_res_);
    }

    // optional .tenon.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
    if (has_up_vpn_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *up_vpn_req_);
    }

    // optional .tenon.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
    if (has_up_vpn_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *up_vpn_res_);
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .tenon.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
    if (has_account_init_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *account_init_req_);
    }

    // optional .tenon.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
    if (has_account_init_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *account_init_res_);
    }

    // optional .tenon.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
    if (has_vpn_active_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vpn_active_req_);
    }

    // optional .tenon.block.protobuf.AdRewardRequest ad_reward_req = 12;
    if (has_ad_reward_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ad_reward_req_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.block.protobuf.BlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.block.protobuf.BlockMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.block.protobuf.BlockMessage)
    MergeFrom(*source);
  }
}

void BlockMessage::MergeFrom(const BlockMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.block.protobuf.BlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_block_req()->::tenon::block::protobuf::GetTxBlockRequest::MergeFrom(from.block_req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_block_res()->::tenon::block::protobuf::GetTxBlockResponse::MergeFrom(from.block_res());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_height_req()->::tenon::block::protobuf::AccountHeightRequest::MergeFrom(from.height_req());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_height_res()->::tenon::block::protobuf::AccountHeightResponse::MergeFrom(from.height_res());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_acc_attr_req()->::tenon::block::protobuf::AccountAttrRequest::MergeFrom(from.acc_attr_req());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_acc_attr_res()->::tenon::block::protobuf::AccountAttrResponse::MergeFrom(from.acc_attr_res());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_up_vpn_req()->::tenon::block::protobuf::UpdateVpnCountRequest::MergeFrom(from.up_vpn_req());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_up_vpn_res()->::tenon::block::protobuf::UpdateVpnCountResponse::MergeFrom(from.up_vpn_res());
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_account_init_req()->::tenon::block::protobuf::GetAccountInitInfoRequest::MergeFrom(from.account_init_req());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_account_init_res()->::tenon::block::protobuf::GetAccountInitInfoResponse::MergeFrom(from.account_init_res());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_vpn_active_req()->::tenon::block::protobuf::UpdateVpnActiveRequest::MergeFrom(from.vpn_active_req());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_ad_reward_req()->::tenon::block::protobuf::AdRewardRequest::MergeFrom(from.ad_reward_req());
    }
  }
}

void BlockMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.block.protobuf.BlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMessage::CopyFrom(const BlockMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.block.protobuf.BlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMessage::IsInitialized() const {
  return true;
}

void BlockMessage::Swap(BlockMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockMessage::InternalSwap(BlockMessage* other) {
  using std::swap;
  swap(block_req_, other->block_req_);
  swap(block_res_, other->block_res_);
  swap(height_req_, other->height_req_);
  swap(height_res_, other->height_res_);
  swap(acc_attr_req_, other->acc_attr_req_);
  swap(acc_attr_res_, other->acc_attr_res_);
  swap(up_vpn_req_, other->up_vpn_req_);
  swap(up_vpn_res_, other->up_vpn_res_);
  swap(account_init_req_, other->account_init_req_);
  swap(account_init_res_, other->account_init_res_);
  swap(vpn_active_req_, other->vpn_active_req_);
  swap(ad_reward_req_, other->ad_reward_req_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BlockMessage::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_block_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace block
}  // namespace tenon
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::GetTxBlockRequest* Arena::CreateMaybeMessage< ::tenon::block::protobuf::GetTxBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::GetTxBlockRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::GetTxBlockResponse* Arena::CreateMaybeMessage< ::tenon::block::protobuf::GetTxBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::GetTxBlockResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::AccountHeightRequest* Arena::CreateMaybeMessage< ::tenon::block::protobuf::AccountHeightRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::AccountHeightRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::AccountHeightResponse* Arena::CreateMaybeMessage< ::tenon::block::protobuf::AccountHeightResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::AccountHeightResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::AccountAttrRequest* Arena::CreateMaybeMessage< ::tenon::block::protobuf::AccountAttrRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::AccountAttrRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::AccountAttrResponse* Arena::CreateMaybeMessage< ::tenon::block::protobuf::AccountAttrResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::AccountAttrResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::UpdateVpnCountRequest* Arena::CreateMaybeMessage< ::tenon::block::protobuf::UpdateVpnCountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::UpdateVpnCountRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::VpnCountItem* Arena::CreateMaybeMessage< ::tenon::block::protobuf::VpnCountItem >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::VpnCountItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::UpdateVpnCountResponse* Arena::CreateMaybeMessage< ::tenon::block::protobuf::UpdateVpnCountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::UpdateVpnCountResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::GetAccountInitInfoRequest* Arena::CreateMaybeMessage< ::tenon::block::protobuf::GetAccountInitInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::GetAccountInitInfoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::TxItem* Arena::CreateMaybeMessage< ::tenon::block::protobuf::TxItem >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::TxItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::GetAccountInitInfoResponse* Arena::CreateMaybeMessage< ::tenon::block::protobuf::GetAccountInitInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::GetAccountInitInfoResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::UpdateVpnActiveRequest* Arena::CreateMaybeMessage< ::tenon::block::protobuf::UpdateVpnActiveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::UpdateVpnActiveRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::AdRewardRequest* Arena::CreateMaybeMessage< ::tenon::block::protobuf::AdRewardRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::AdRewardRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::block::protobuf::BlockMessage* Arena::CreateMaybeMessage< ::tenon::block::protobuf::BlockMessage >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::block::protobuf::BlockMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
