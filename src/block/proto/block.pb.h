// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#ifndef PROTOBUF_INCLUDED_block_2eproto
#define PROTOBUF_INCLUDED_block_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto 

namespace protobuf_block_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[17];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_block_2eproto
namespace tenon {
namespace block {
namespace protobuf {
class AccountAttrRequest;
class AccountAttrRequestDefaultTypeInternal;
extern AccountAttrRequestDefaultTypeInternal _AccountAttrRequest_default_instance_;
class AccountAttrResponse;
class AccountAttrResponseDefaultTypeInternal;
extern AccountAttrResponseDefaultTypeInternal _AccountAttrResponse_default_instance_;
class AccountHeightRequest;
class AccountHeightRequestDefaultTypeInternal;
extern AccountHeightRequestDefaultTypeInternal _AccountHeightRequest_default_instance_;
class AccountHeightResponse;
class AccountHeightResponseDefaultTypeInternal;
extern AccountHeightResponseDefaultTypeInternal _AccountHeightResponse_default_instance_;
class AdRewardRequest;
class AdRewardRequestDefaultTypeInternal;
extern AdRewardRequestDefaultTypeInternal _AdRewardRequest_default_instance_;
class BlockMessage;
class BlockMessageDefaultTypeInternal;
extern BlockMessageDefaultTypeInternal _BlockMessage_default_instance_;
class ElectStatisticInfo;
class ElectStatisticInfoDefaultTypeInternal;
extern ElectStatisticInfoDefaultTypeInternal _ElectStatisticInfo_default_instance_;
class GetAccountInitInfoRequest;
class GetAccountInitInfoRequestDefaultTypeInternal;
extern GetAccountInitInfoRequestDefaultTypeInternal _GetAccountInitInfoRequest_default_instance_;
class GetAccountInitInfoResponse;
class GetAccountInitInfoResponseDefaultTypeInternal;
extern GetAccountInitInfoResponseDefaultTypeInternal _GetAccountInitInfoResponse_default_instance_;
class GetTxBlockRequest;
class GetTxBlockRequestDefaultTypeInternal;
extern GetTxBlockRequestDefaultTypeInternal _GetTxBlockRequest_default_instance_;
class GetTxBlockResponse;
class GetTxBlockResponseDefaultTypeInternal;
extern GetTxBlockResponseDefaultTypeInternal _GetTxBlockResponse_default_instance_;
class StatisticInfo;
class StatisticInfoDefaultTypeInternal;
extern StatisticInfoDefaultTypeInternal _StatisticInfo_default_instance_;
class TxItem;
class TxItemDefaultTypeInternal;
extern TxItemDefaultTypeInternal _TxItem_default_instance_;
class UpdateVpnActiveRequest;
class UpdateVpnActiveRequestDefaultTypeInternal;
extern UpdateVpnActiveRequestDefaultTypeInternal _UpdateVpnActiveRequest_default_instance_;
class UpdateVpnCountRequest;
class UpdateVpnCountRequestDefaultTypeInternal;
extern UpdateVpnCountRequestDefaultTypeInternal _UpdateVpnCountRequest_default_instance_;
class UpdateVpnCountResponse;
class UpdateVpnCountResponseDefaultTypeInternal;
extern UpdateVpnCountResponseDefaultTypeInternal _UpdateVpnCountResponse_default_instance_;
class VpnCountItem;
class VpnCountItemDefaultTypeInternal;
extern VpnCountItemDefaultTypeInternal _VpnCountItem_default_instance_;
}  // namespace protobuf
}  // namespace block
}  // namespace tenon
namespace google {
namespace protobuf {
template<> ::tenon::block::protobuf::AccountAttrRequest* Arena::CreateMaybeMessage<::tenon::block::protobuf::AccountAttrRequest>(Arena*);
template<> ::tenon::block::protobuf::AccountAttrResponse* Arena::CreateMaybeMessage<::tenon::block::protobuf::AccountAttrResponse>(Arena*);
template<> ::tenon::block::protobuf::AccountHeightRequest* Arena::CreateMaybeMessage<::tenon::block::protobuf::AccountHeightRequest>(Arena*);
template<> ::tenon::block::protobuf::AccountHeightResponse* Arena::CreateMaybeMessage<::tenon::block::protobuf::AccountHeightResponse>(Arena*);
template<> ::tenon::block::protobuf::AdRewardRequest* Arena::CreateMaybeMessage<::tenon::block::protobuf::AdRewardRequest>(Arena*);
template<> ::tenon::block::protobuf::BlockMessage* Arena::CreateMaybeMessage<::tenon::block::protobuf::BlockMessage>(Arena*);
template<> ::tenon::block::protobuf::ElectStatisticInfo* Arena::CreateMaybeMessage<::tenon::block::protobuf::ElectStatisticInfo>(Arena*);
template<> ::tenon::block::protobuf::GetAccountInitInfoRequest* Arena::CreateMaybeMessage<::tenon::block::protobuf::GetAccountInitInfoRequest>(Arena*);
template<> ::tenon::block::protobuf::GetAccountInitInfoResponse* Arena::CreateMaybeMessage<::tenon::block::protobuf::GetAccountInitInfoResponse>(Arena*);
template<> ::tenon::block::protobuf::GetTxBlockRequest* Arena::CreateMaybeMessage<::tenon::block::protobuf::GetTxBlockRequest>(Arena*);
template<> ::tenon::block::protobuf::GetTxBlockResponse* Arena::CreateMaybeMessage<::tenon::block::protobuf::GetTxBlockResponse>(Arena*);
template<> ::tenon::block::protobuf::StatisticInfo* Arena::CreateMaybeMessage<::tenon::block::protobuf::StatisticInfo>(Arena*);
template<> ::tenon::block::protobuf::TxItem* Arena::CreateMaybeMessage<::tenon::block::protobuf::TxItem>(Arena*);
template<> ::tenon::block::protobuf::UpdateVpnActiveRequest* Arena::CreateMaybeMessage<::tenon::block::protobuf::UpdateVpnActiveRequest>(Arena*);
template<> ::tenon::block::protobuf::UpdateVpnCountRequest* Arena::CreateMaybeMessage<::tenon::block::protobuf::UpdateVpnCountRequest>(Arena*);
template<> ::tenon::block::protobuf::UpdateVpnCountResponse* Arena::CreateMaybeMessage<::tenon::block::protobuf::UpdateVpnCountResponse>(Arena*);
template<> ::tenon::block::protobuf::VpnCountItem* Arena::CreateMaybeMessage<::tenon::block::protobuf::VpnCountItem>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tenon {
namespace block {
namespace protobuf {

// ===================================================================

class GetTxBlockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.GetTxBlockRequest) */ {
 public:
  GetTxBlockRequest();
  virtual ~GetTxBlockRequest();

  GetTxBlockRequest(const GetTxBlockRequest& from);

  inline GetTxBlockRequest& operator=(const GetTxBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTxBlockRequest(GetTxBlockRequest&& from) noexcept
    : GetTxBlockRequest() {
    *this = ::std::move(from);
  }

  inline GetTxBlockRequest& operator=(GetTxBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTxBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTxBlockRequest* internal_default_instance() {
    return reinterpret_cast<const GetTxBlockRequest*>(
               &_GetTxBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetTxBlockRequest* other);
  friend void swap(GetTxBlockRequest& a, GetTxBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTxBlockRequest* New() const final {
    return CreateMaybeMessage<GetTxBlockRequest>(NULL);
  }

  GetTxBlockRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTxBlockRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTxBlockRequest& from);
  void MergeFrom(const GetTxBlockRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxBlockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes tx_gid = 1;
  bool has_tx_gid() const;
  void clear_tx_gid();
  static const int kTxGidFieldNumber = 1;
  const ::std::string& tx_gid() const;
  void set_tx_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_gid(::std::string&& value);
  #endif
  void set_tx_gid(const char* value);
  void set_tx_gid(const void* value, size_t size);
  ::std::string* mutable_tx_gid();
  ::std::string* release_tx_gid();
  void set_allocated_tx_gid(::std::string* tx_gid);

  // optional bytes block_hash = 2;
  bool has_block_hash() const;
  void clear_block_hash();
  static const int kBlockHashFieldNumber = 2;
  const ::std::string& block_hash() const;
  void set_block_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_block_hash(::std::string&& value);
  #endif
  void set_block_hash(const char* value);
  void set_block_hash(const void* value, size_t size);
  ::std::string* mutable_block_hash();
  ::std::string* release_block_hash();
  void set_allocated_block_hash(::std::string* block_hash);

  // optional bytes account_address = 5;
  bool has_account_address() const;
  void clear_account_address();
  static const int kAccountAddressFieldNumber = 5;
  const ::std::string& account_address() const;
  void set_account_address(const ::std::string& value);
  #if LANG_CXX11
  void set_account_address(::std::string&& value);
  #endif
  void set_account_address(const char* value);
  void set_account_address(const void* value, size_t size);
  ::std::string* mutable_account_address();
  ::std::string* release_account_address();
  void set_allocated_account_address(::std::string* account_address);

  // optional uint64 height = 4;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // optional bool from = 3;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 3;
  bool from() const;
  void set_from(bool value);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.GetTxBlockRequest)
 private:
  void set_has_tx_gid();
  void clear_has_tx_gid();
  void set_has_block_hash();
  void clear_has_block_hash();
  void set_has_from();
  void clear_has_from();
  void set_has_height();
  void clear_has_height();
  void set_has_account_address();
  void clear_has_account_address();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tx_gid_;
  ::google::protobuf::internal::ArenaStringPtr block_hash_;
  ::google::protobuf::internal::ArenaStringPtr account_address_;
  ::google::protobuf::uint64 height_;
  bool from_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTxBlockResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.GetTxBlockResponse) */ {
 public:
  GetTxBlockResponse();
  virtual ~GetTxBlockResponse();

  GetTxBlockResponse(const GetTxBlockResponse& from);

  inline GetTxBlockResponse& operator=(const GetTxBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTxBlockResponse(GetTxBlockResponse&& from) noexcept
    : GetTxBlockResponse() {
    *this = ::std::move(from);
  }

  inline GetTxBlockResponse& operator=(GetTxBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTxBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTxBlockResponse* internal_default_instance() {
    return reinterpret_cast<const GetTxBlockResponse*>(
               &_GetTxBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetTxBlockResponse* other);
  friend void swap(GetTxBlockResponse& a, GetTxBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTxBlockResponse* New() const final {
    return CreateMaybeMessage<GetTxBlockResponse>(NULL);
  }

  GetTxBlockResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTxBlockResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTxBlockResponse& from);
  void MergeFrom(const GetTxBlockResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxBlockResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes block = 1;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  const ::std::string& block() const;
  void set_block(const ::std::string& value);
  #if LANG_CXX11
  void set_block(::std::string&& value);
  #endif
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  ::std::string* mutable_block();
  ::std::string* release_block();
  void set_allocated_block(::std::string* block);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.GetTxBlockResponse)
 private:
  void set_has_block();
  void clear_has_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr block_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountHeightRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.AccountHeightRequest) */ {
 public:
  AccountHeightRequest();
  virtual ~AccountHeightRequest();

  AccountHeightRequest(const AccountHeightRequest& from);

  inline AccountHeightRequest& operator=(const AccountHeightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountHeightRequest(AccountHeightRequest&& from) noexcept
    : AccountHeightRequest() {
    *this = ::std::move(from);
  }

  inline AccountHeightRequest& operator=(AccountHeightRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountHeightRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountHeightRequest* internal_default_instance() {
    return reinterpret_cast<const AccountHeightRequest*>(
               &_AccountHeightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AccountHeightRequest* other);
  friend void swap(AccountHeightRequest& a, AccountHeightRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountHeightRequest* New() const final {
    return CreateMaybeMessage<AccountHeightRequest>(NULL);
  }

  AccountHeightRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountHeightRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountHeightRequest& from);
  void MergeFrom(const AccountHeightRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountHeightRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes account_addr = 1;
  bool has_account_addr() const;
  void clear_account_addr();
  static const int kAccountAddrFieldNumber = 1;
  const ::std::string& account_addr() const;
  void set_account_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_account_addr(::std::string&& value);
  #endif
  void set_account_addr(const char* value);
  void set_account_addr(const void* value, size_t size);
  ::std::string* mutable_account_addr();
  ::std::string* release_account_addr();
  void set_allocated_account_addr(::std::string* account_addr);

  // optional int64 index = 2;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // optional int32 count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.AccountHeightRequest)
 private:
  void set_has_account_addr();
  void clear_has_account_addr();
  void set_has_index();
  void clear_has_index();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_addr_;
  ::google::protobuf::int64 index_;
  ::google::protobuf::int32 count_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountHeightResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.AccountHeightResponse) */ {
 public:
  AccountHeightResponse();
  virtual ~AccountHeightResponse();

  AccountHeightResponse(const AccountHeightResponse& from);

  inline AccountHeightResponse& operator=(const AccountHeightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountHeightResponse(AccountHeightResponse&& from) noexcept
    : AccountHeightResponse() {
    *this = ::std::move(from);
  }

  inline AccountHeightResponse& operator=(AccountHeightResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountHeightResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountHeightResponse* internal_default_instance() {
    return reinterpret_cast<const AccountHeightResponse*>(
               &_AccountHeightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AccountHeightResponse* other);
  friend void swap(AccountHeightResponse& a, AccountHeightResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountHeightResponse* New() const final {
    return CreateMaybeMessage<AccountHeightResponse>(NULL);
  }

  AccountHeightResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountHeightResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountHeightResponse& from);
  void MergeFrom(const AccountHeightResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountHeightResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 heights = 1;
  int heights_size() const;
  void clear_heights();
  static const int kHeightsFieldNumber = 1;
  ::google::protobuf::uint64 heights(int index) const;
  void set_heights(int index, ::google::protobuf::uint64 value);
  void add_heights(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      heights() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_heights();

  // optional bytes account_addr = 2;
  bool has_account_addr() const;
  void clear_account_addr();
  static const int kAccountAddrFieldNumber = 2;
  const ::std::string& account_addr() const;
  void set_account_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_account_addr(::std::string&& value);
  #endif
  void set_account_addr(const char* value);
  void set_account_addr(const void* value, size_t size);
  ::std::string* mutable_account_addr();
  ::std::string* release_account_addr();
  void set_allocated_account_addr(::std::string* account_addr);

  // optional bytes type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.AccountHeightResponse)
 private:
  void set_has_account_addr();
  void clear_has_account_addr();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > heights_;
  ::google::protobuf::internal::ArenaStringPtr account_addr_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountAttrRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.AccountAttrRequest) */ {
 public:
  AccountAttrRequest();
  virtual ~AccountAttrRequest();

  AccountAttrRequest(const AccountAttrRequest& from);

  inline AccountAttrRequest& operator=(const AccountAttrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountAttrRequest(AccountAttrRequest&& from) noexcept
    : AccountAttrRequest() {
    *this = ::std::move(from);
  }

  inline AccountAttrRequest& operator=(AccountAttrRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountAttrRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountAttrRequest* internal_default_instance() {
    return reinterpret_cast<const AccountAttrRequest*>(
               &_AccountAttrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AccountAttrRequest* other);
  friend void swap(AccountAttrRequest& a, AccountAttrRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountAttrRequest* New() const final {
    return CreateMaybeMessage<AccountAttrRequest>(NULL);
  }

  AccountAttrRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountAttrRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountAttrRequest& from);
  void MergeFrom(const AccountAttrRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountAttrRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional bytes attr_key = 2;
  bool has_attr_key() const;
  void clear_attr_key();
  static const int kAttrKeyFieldNumber = 2;
  const ::std::string& attr_key() const;
  void set_attr_key(const ::std::string& value);
  #if LANG_CXX11
  void set_attr_key(::std::string&& value);
  #endif
  void set_attr_key(const char* value);
  void set_attr_key(const void* value, size_t size);
  ::std::string* mutable_attr_key();
  ::std::string* release_attr_key();
  void set_allocated_attr_key(::std::string* attr_key);

  // optional uint64 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.AccountAttrRequest)
 private:
  void set_has_account();
  void clear_has_account();
  void set_has_attr_key();
  void clear_has_attr_key();
  void set_has_height();
  void clear_has_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr attr_key_;
  ::google::protobuf::uint64 height_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountAttrResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.AccountAttrResponse) */ {
 public:
  AccountAttrResponse();
  virtual ~AccountAttrResponse();

  AccountAttrResponse(const AccountAttrResponse& from);

  inline AccountAttrResponse& operator=(const AccountAttrResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountAttrResponse(AccountAttrResponse&& from) noexcept
    : AccountAttrResponse() {
    *this = ::std::move(from);
  }

  inline AccountAttrResponse& operator=(AccountAttrResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountAttrResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountAttrResponse* internal_default_instance() {
    return reinterpret_cast<const AccountAttrResponse*>(
               &_AccountAttrResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AccountAttrResponse* other);
  friend void swap(AccountAttrResponse& a, AccountAttrResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountAttrResponse* New() const final {
    return CreateMaybeMessage<AccountAttrResponse>(NULL);
  }

  AccountAttrResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountAttrResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountAttrResponse& from);
  void MergeFrom(const AccountAttrResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountAttrResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional bytes attr_key = 2;
  bool has_attr_key() const;
  void clear_attr_key();
  static const int kAttrKeyFieldNumber = 2;
  const ::std::string& attr_key() const;
  void set_attr_key(const ::std::string& value);
  #if LANG_CXX11
  void set_attr_key(::std::string&& value);
  #endif
  void set_attr_key(const char* value);
  void set_attr_key(const void* value, size_t size);
  ::std::string* mutable_attr_key();
  ::std::string* release_attr_key();
  void set_allocated_attr_key(::std::string* attr_key);

  // optional bytes block = 4;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 4;
  const ::std::string& block() const;
  void set_block(const ::std::string& value);
  #if LANG_CXX11
  void set_block(::std::string&& value);
  #endif
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  ::std::string* mutable_block();
  ::std::string* release_block();
  void set_allocated_block(::std::string* block);

  // optional uint64 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.AccountAttrResponse)
 private:
  void set_has_account();
  void clear_has_account();
  void set_has_attr_key();
  void clear_has_attr_key();
  void set_has_height();
  void clear_has_height();
  void set_has_block();
  void clear_has_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr attr_key_;
  ::google::protobuf::internal::ArenaStringPtr block_;
  ::google::protobuf::uint64 height_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateVpnCountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.UpdateVpnCountRequest) */ {
 public:
  UpdateVpnCountRequest();
  virtual ~UpdateVpnCountRequest();

  UpdateVpnCountRequest(const UpdateVpnCountRequest& from);

  inline UpdateVpnCountRequest& operator=(const UpdateVpnCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateVpnCountRequest(UpdateVpnCountRequest&& from) noexcept
    : UpdateVpnCountRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVpnCountRequest& operator=(UpdateVpnCountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateVpnCountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateVpnCountRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVpnCountRequest*>(
               &_UpdateVpnCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UpdateVpnCountRequest* other);
  friend void swap(UpdateVpnCountRequest& a, UpdateVpnCountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateVpnCountRequest* New() const final {
    return CreateMaybeMessage<UpdateVpnCountRequest>(NULL);
  }

  UpdateVpnCountRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateVpnCountRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateVpnCountRequest& from);
  void MergeFrom(const UpdateVpnCountRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVpnCountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional bytes old_ip = 3;
  bool has_old_ip() const;
  void clear_old_ip();
  static const int kOldIpFieldNumber = 3;
  const ::std::string& old_ip() const;
  void set_old_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_old_ip(::std::string&& value);
  #endif
  void set_old_ip(const char* value);
  void set_old_ip(const void* value, size_t size);
  ::std::string* mutable_old_ip();
  ::std::string* release_old_ip();
  void set_allocated_old_ip(::std::string* old_ip);

  // optional bytes uid = 4;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 4;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const void* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // optional uint64 account_hash = 1;
  bool has_account_hash() const;
  void clear_account_hash();
  static const int kAccountHashFieldNumber = 1;
  ::google::protobuf::uint64 account_hash() const;
  void set_account_hash(::google::protobuf::uint64 value);

  // optional bool just_set = 5;
  bool has_just_set() const;
  void clear_just_set();
  static const int kJustSetFieldNumber = 5;
  bool just_set() const;
  void set_just_set(bool value);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.UpdateVpnCountRequest)
 private:
  void set_has_account_hash();
  void clear_has_account_hash();
  void set_has_ip();
  void clear_has_ip();
  void set_has_old_ip();
  void clear_has_old_ip();
  void set_has_uid();
  void clear_has_uid();
  void set_has_just_set();
  void clear_has_just_set();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr old_ip_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::uint64 account_hash_;
  bool just_set_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VpnCountItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.VpnCountItem) */ {
 public:
  VpnCountItem();
  virtual ~VpnCountItem();

  VpnCountItem(const VpnCountItem& from);

  inline VpnCountItem& operator=(const VpnCountItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VpnCountItem(VpnCountItem&& from) noexcept
    : VpnCountItem() {
    *this = ::std::move(from);
  }

  inline VpnCountItem& operator=(VpnCountItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VpnCountItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VpnCountItem* internal_default_instance() {
    return reinterpret_cast<const VpnCountItem*>(
               &_VpnCountItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(VpnCountItem* other);
  friend void swap(VpnCountItem& a, VpnCountItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VpnCountItem* New() const final {
    return CreateMaybeMessage<VpnCountItem>(NULL);
  }

  VpnCountItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VpnCountItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VpnCountItem& from);
  void MergeFrom(const VpnCountItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VpnCountItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional uint32 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.VpnCountItem)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 count_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateVpnCountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.UpdateVpnCountResponse) */ {
 public:
  UpdateVpnCountResponse();
  virtual ~UpdateVpnCountResponse();

  UpdateVpnCountResponse(const UpdateVpnCountResponse& from);

  inline UpdateVpnCountResponse& operator=(const UpdateVpnCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateVpnCountResponse(UpdateVpnCountResponse&& from) noexcept
    : UpdateVpnCountResponse() {
    *this = ::std::move(from);
  }

  inline UpdateVpnCountResponse& operator=(UpdateVpnCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateVpnCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateVpnCountResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateVpnCountResponse*>(
               &_UpdateVpnCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(UpdateVpnCountResponse* other);
  friend void swap(UpdateVpnCountResponse& a, UpdateVpnCountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateVpnCountResponse* New() const final {
    return CreateMaybeMessage<UpdateVpnCountResponse>(NULL);
  }

  UpdateVpnCountResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateVpnCountResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateVpnCountResponse& from);
  void MergeFrom(const UpdateVpnCountResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVpnCountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tenon.block.protobuf.VpnCountItem vpn_nodes = 1;
  int vpn_nodes_size() const;
  void clear_vpn_nodes();
  static const int kVpnNodesFieldNumber = 1;
  ::tenon::block::protobuf::VpnCountItem* mutable_vpn_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::VpnCountItem >*
      mutable_vpn_nodes();
  const ::tenon::block::protobuf::VpnCountItem& vpn_nodes(int index) const;
  ::tenon::block::protobuf::VpnCountItem* add_vpn_nodes();
  const ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::VpnCountItem >&
      vpn_nodes() const;

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.UpdateVpnCountResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::VpnCountItem > vpn_nodes_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAccountInitInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.GetAccountInitInfoRequest) */ {
 public:
  GetAccountInitInfoRequest();
  virtual ~GetAccountInitInfoRequest();

  GetAccountInitInfoRequest(const GetAccountInitInfoRequest& from);

  inline GetAccountInitInfoRequest& operator=(const GetAccountInitInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAccountInitInfoRequest(GetAccountInitInfoRequest&& from) noexcept
    : GetAccountInitInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetAccountInitInfoRequest& operator=(GetAccountInitInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountInitInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountInitInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetAccountInitInfoRequest*>(
               &_GetAccountInitInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetAccountInitInfoRequest* other);
  friend void swap(GetAccountInitInfoRequest& a, GetAccountInitInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAccountInitInfoRequest* New() const final {
    return CreateMaybeMessage<GetAccountInitInfoRequest>(NULL);
  }

  GetAccountInitInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountInitInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAccountInitInfoRequest& from);
  void MergeFrom(const GetAccountInitInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountInitInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional uint64 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // optional uint32 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.GetAccountInitInfoRequest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_count();
  void clear_has_count();
  void set_has_height();
  void clear_has_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint64 height_;
  ::google::protobuf::uint32 count_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.TxItem) */ {
 public:
  TxItem();
  virtual ~TxItem();

  TxItem(const TxItem& from);

  inline TxItem& operator=(const TxItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxItem(TxItem&& from) noexcept
    : TxItem() {
    *this = ::std::move(from);
  }

  inline TxItem& operator=(TxItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxItem* internal_default_instance() {
    return reinterpret_cast<const TxItem*>(
               &_TxItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TxItem* other);
  friend void swap(TxItem& a, TxItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxItem* New() const final {
    return CreateMaybeMessage<TxItem>(NULL);
  }

  TxItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxItem& from);
  void MergeFrom(const TxItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional bytes to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional bytes gid = 7;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 7;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_gid(::std::string&& value);
  #endif
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // optional uint64 amount = 3;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // optional uint64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional uint64 height = 5;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // optional uint64 balance = 6;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 6;
  ::google::protobuf::uint64 balance() const;
  void set_balance(::google::protobuf::uint64 value);

  // optional uint32 type = 8;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint32 status = 9;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 9;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 version = 10;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 10;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.TxItem)
 private:
  void set_has_from();
  void clear_has_from();
  void set_has_to();
  void clear_has_to();
  void set_has_amount();
  void clear_has_amount();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_height();
  void clear_has_height();
  void set_has_balance();
  void clear_has_balance();
  void set_has_gid();
  void clear_has_gid();
  void set_has_type();
  void clear_has_type();
  void set_has_status();
  void clear_has_status();
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 height_;
  ::google::protobuf::uint64 balance_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 version_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAccountInitInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.GetAccountInitInfoResponse) */ {
 public:
  GetAccountInitInfoResponse();
  virtual ~GetAccountInitInfoResponse();

  GetAccountInitInfoResponse(const GetAccountInitInfoResponse& from);

  inline GetAccountInitInfoResponse& operator=(const GetAccountInitInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAccountInitInfoResponse(GetAccountInitInfoResponse&& from) noexcept
    : GetAccountInitInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetAccountInitInfoResponse& operator=(GetAccountInitInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountInitInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountInitInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetAccountInitInfoResponse*>(
               &_GetAccountInitInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GetAccountInitInfoResponse* other);
  friend void swap(GetAccountInitInfoResponse& a, GetAccountInitInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAccountInitInfoResponse* New() const final {
    return CreateMaybeMessage<GetAccountInitInfoResponse>(NULL);
  }

  GetAccountInitInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountInitInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAccountInitInfoResponse& from);
  void MergeFrom(const GetAccountInitInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountInitInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tenon.block.protobuf.TxItem tx_list = 2;
  int tx_list_size() const;
  void clear_tx_list();
  static const int kTxListFieldNumber = 2;
  ::tenon::block::protobuf::TxItem* mutable_tx_list(int index);
  ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::TxItem >*
      mutable_tx_list();
  const ::tenon::block::protobuf::TxItem& tx_list(int index) const;
  ::tenon::block::protobuf::TxItem* add_tx_list();
  const ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::TxItem >&
      tx_list() const;

  // optional bytes id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional uint64 balance = 1;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 1;
  ::google::protobuf::uint64 balance() const;
  void set_balance(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.GetAccountInitInfoResponse)
 private:
  void set_has_balance();
  void clear_has_balance();
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::TxItem > tx_list_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint64 balance_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateVpnActiveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.UpdateVpnActiveRequest) */ {
 public:
  UpdateVpnActiveRequest();
  virtual ~UpdateVpnActiveRequest();

  UpdateVpnActiveRequest(const UpdateVpnActiveRequest& from);

  inline UpdateVpnActiveRequest& operator=(const UpdateVpnActiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateVpnActiveRequest(UpdateVpnActiveRequest&& from) noexcept
    : UpdateVpnActiveRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVpnActiveRequest& operator=(UpdateVpnActiveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateVpnActiveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateVpnActiveRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVpnActiveRequest*>(
               &_UpdateVpnActiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(UpdateVpnActiveRequest* other);
  friend void swap(UpdateVpnActiveRequest& a, UpdateVpnActiveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateVpnActiveRequest* New() const final {
    return CreateMaybeMessage<UpdateVpnActiveRequest>(NULL);
  }

  UpdateVpnActiveRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateVpnActiveRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateVpnActiveRequest& from);
  void MergeFrom(const UpdateVpnActiveRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVpnActiveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.UpdateVpnActiveRequest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_ip();
  void clear_has_ip();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdRewardRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.AdRewardRequest) */ {
 public:
  AdRewardRequest();
  virtual ~AdRewardRequest();

  AdRewardRequest(const AdRewardRequest& from);

  inline AdRewardRequest& operator=(const AdRewardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdRewardRequest(AdRewardRequest&& from) noexcept
    : AdRewardRequest() {
    *this = ::std::move(from);
  }

  inline AdRewardRequest& operator=(AdRewardRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdRewardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdRewardRequest* internal_default_instance() {
    return reinterpret_cast<const AdRewardRequest*>(
               &_AdRewardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(AdRewardRequest* other);
  friend void swap(AdRewardRequest& a, AdRewardRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdRewardRequest* New() const final {
    return CreateMaybeMessage<AdRewardRequest>(NULL);
  }

  AdRewardRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdRewardRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdRewardRequest& from);
  void MergeFrom(const AdRewardRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdRewardRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes reward_key = 2;
  bool has_reward_key() const;
  void clear_reward_key();
  static const int kRewardKeyFieldNumber = 2;
  const ::std::string& reward_key() const;
  void set_reward_key(const ::std::string& value);
  #if LANG_CXX11
  void set_reward_key(::std::string&& value);
  #endif
  void set_reward_key(const char* value);
  void set_reward_key(const void* value, size_t size);
  ::std::string* mutable_reward_key();
  ::std::string* release_reward_key();
  void set_allocated_reward_key(::std::string* reward_key);

  // optional bytes gid = 3;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 3;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_gid(::std::string&& value);
  #endif
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.AdRewardRequest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_reward_key();
  void clear_has_reward_key();
  void set_has_gid();
  void clear_has_gid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr reward_key_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElectStatisticInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.ElectStatisticInfo) */ {
 public:
  ElectStatisticInfo();
  virtual ~ElectStatisticInfo();

  ElectStatisticInfo(const ElectStatisticInfo& from);

  inline ElectStatisticInfo& operator=(const ElectStatisticInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElectStatisticInfo(ElectStatisticInfo&& from) noexcept
    : ElectStatisticInfo() {
    *this = ::std::move(from);
  }

  inline ElectStatisticInfo& operator=(ElectStatisticInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ElectStatisticInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElectStatisticInfo* internal_default_instance() {
    return reinterpret_cast<const ElectStatisticInfo*>(
               &_ElectStatisticInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ElectStatisticInfo* other);
  friend void swap(ElectStatisticInfo& a, ElectStatisticInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElectStatisticInfo* New() const final {
    return CreateMaybeMessage<ElectStatisticInfo>(NULL);
  }

  ElectStatisticInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElectStatisticInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElectStatisticInfo& from);
  void MergeFrom(const ElectStatisticInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectStatisticInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 succ_tx_count = 2;
  int succ_tx_count_size() const;
  void clear_succ_tx_count();
  static const int kSuccTxCountFieldNumber = 2;
  ::google::protobuf::uint32 succ_tx_count(int index) const;
  void set_succ_tx_count(int index, ::google::protobuf::uint32 value);
  void add_succ_tx_count(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      succ_tx_count() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_succ_tx_count();

  // optional uint64 elect_height = 1;
  bool has_elect_height() const;
  void clear_elect_height();
  static const int kElectHeightFieldNumber = 1;
  ::google::protobuf::uint64 elect_height() const;
  void set_elect_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.ElectStatisticInfo)
 private:
  void set_has_elect_height();
  void clear_has_elect_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > succ_tx_count_;
  ::google::protobuf::uint64 elect_height_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatisticInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.StatisticInfo) */ {
 public:
  StatisticInfo();
  virtual ~StatisticInfo();

  StatisticInfo(const StatisticInfo& from);

  inline StatisticInfo& operator=(const StatisticInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatisticInfo(StatisticInfo&& from) noexcept
    : StatisticInfo() {
    *this = ::std::move(from);
  }

  inline StatisticInfo& operator=(StatisticInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatisticInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatisticInfo* internal_default_instance() {
    return reinterpret_cast<const StatisticInfo*>(
               &_StatisticInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(StatisticInfo* other);
  friend void swap(StatisticInfo& a, StatisticInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatisticInfo* New() const final {
    return CreateMaybeMessage<StatisticInfo>(NULL);
  }

  StatisticInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatisticInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatisticInfo& from);
  void MergeFrom(const StatisticInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tenon.block.protobuf.ElectStatisticInfo elect_statistic = 3;
  int elect_statistic_size() const;
  void clear_elect_statistic();
  static const int kElectStatisticFieldNumber = 3;
  ::tenon::block::protobuf::ElectStatisticInfo* mutable_elect_statistic(int index);
  ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::ElectStatisticInfo >*
      mutable_elect_statistic();
  const ::tenon::block::protobuf::ElectStatisticInfo& elect_statistic(int index) const;
  ::tenon::block::protobuf::ElectStatisticInfo* add_elect_statistic();
  const ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::ElectStatisticInfo >&
      elect_statistic() const;

  // optional uint64 timeblock_height = 1;
  bool has_timeblock_height() const;
  void clear_timeblock_height();
  static const int kTimeblockHeightFieldNumber = 1;
  ::google::protobuf::uint64 timeblock_height() const;
  void set_timeblock_height(::google::protobuf::uint64 value);

  // optional uint32 all_tx_count = 2;
  bool has_all_tx_count() const;
  void clear_all_tx_count();
  static const int kAllTxCountFieldNumber = 2;
  ::google::protobuf::uint32 all_tx_count() const;
  void set_all_tx_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.StatisticInfo)
 private:
  void set_has_timeblock_height();
  void clear_has_timeblock_height();
  void set_has_all_tx_count();
  void clear_has_all_tx_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::ElectStatisticInfo > elect_statistic_;
  ::google::protobuf::uint64 timeblock_height_;
  ::google::protobuf::uint32 all_tx_count_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.block.protobuf.BlockMessage) */ {
 public:
  BlockMessage();
  virtual ~BlockMessage();

  BlockMessage(const BlockMessage& from);

  inline BlockMessage& operator=(const BlockMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockMessage(BlockMessage&& from) noexcept
    : BlockMessage() {
    *this = ::std::move(from);
  }

  inline BlockMessage& operator=(BlockMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockMessage* internal_default_instance() {
    return reinterpret_cast<const BlockMessage*>(
               &_BlockMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(BlockMessage* other);
  friend void swap(BlockMessage& a, BlockMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockMessage* New() const final {
    return CreateMaybeMessage<BlockMessage>(NULL);
  }

  BlockMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlockMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlockMessage& from);
  void MergeFrom(const BlockMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tenon.block.protobuf.GetTxBlockRequest block_req = 1;
  bool has_block_req() const;
  void clear_block_req();
  static const int kBlockReqFieldNumber = 1;
  private:
  const ::tenon::block::protobuf::GetTxBlockRequest& _internal_block_req() const;
  public:
  const ::tenon::block::protobuf::GetTxBlockRequest& block_req() const;
  ::tenon::block::protobuf::GetTxBlockRequest* release_block_req();
  ::tenon::block::protobuf::GetTxBlockRequest* mutable_block_req();
  void set_allocated_block_req(::tenon::block::protobuf::GetTxBlockRequest* block_req);

  // optional .tenon.block.protobuf.GetTxBlockResponse block_res = 2;
  bool has_block_res() const;
  void clear_block_res();
  static const int kBlockResFieldNumber = 2;
  private:
  const ::tenon::block::protobuf::GetTxBlockResponse& _internal_block_res() const;
  public:
  const ::tenon::block::protobuf::GetTxBlockResponse& block_res() const;
  ::tenon::block::protobuf::GetTxBlockResponse* release_block_res();
  ::tenon::block::protobuf::GetTxBlockResponse* mutable_block_res();
  void set_allocated_block_res(::tenon::block::protobuf::GetTxBlockResponse* block_res);

  // optional .tenon.block.protobuf.AccountHeightRequest height_req = 3;
  bool has_height_req() const;
  void clear_height_req();
  static const int kHeightReqFieldNumber = 3;
  private:
  const ::tenon::block::protobuf::AccountHeightRequest& _internal_height_req() const;
  public:
  const ::tenon::block::protobuf::AccountHeightRequest& height_req() const;
  ::tenon::block::protobuf::AccountHeightRequest* release_height_req();
  ::tenon::block::protobuf::AccountHeightRequest* mutable_height_req();
  void set_allocated_height_req(::tenon::block::protobuf::AccountHeightRequest* height_req);

  // optional .tenon.block.protobuf.AccountHeightResponse height_res = 4;
  bool has_height_res() const;
  void clear_height_res();
  static const int kHeightResFieldNumber = 4;
  private:
  const ::tenon::block::protobuf::AccountHeightResponse& _internal_height_res() const;
  public:
  const ::tenon::block::protobuf::AccountHeightResponse& height_res() const;
  ::tenon::block::protobuf::AccountHeightResponse* release_height_res();
  ::tenon::block::protobuf::AccountHeightResponse* mutable_height_res();
  void set_allocated_height_res(::tenon::block::protobuf::AccountHeightResponse* height_res);

  // optional .tenon.block.protobuf.AccountAttrRequest acc_attr_req = 5;
  bool has_acc_attr_req() const;
  void clear_acc_attr_req();
  static const int kAccAttrReqFieldNumber = 5;
  private:
  const ::tenon::block::protobuf::AccountAttrRequest& _internal_acc_attr_req() const;
  public:
  const ::tenon::block::protobuf::AccountAttrRequest& acc_attr_req() const;
  ::tenon::block::protobuf::AccountAttrRequest* release_acc_attr_req();
  ::tenon::block::protobuf::AccountAttrRequest* mutable_acc_attr_req();
  void set_allocated_acc_attr_req(::tenon::block::protobuf::AccountAttrRequest* acc_attr_req);

  // optional .tenon.block.protobuf.AccountAttrResponse acc_attr_res = 6;
  bool has_acc_attr_res() const;
  void clear_acc_attr_res();
  static const int kAccAttrResFieldNumber = 6;
  private:
  const ::tenon::block::protobuf::AccountAttrResponse& _internal_acc_attr_res() const;
  public:
  const ::tenon::block::protobuf::AccountAttrResponse& acc_attr_res() const;
  ::tenon::block::protobuf::AccountAttrResponse* release_acc_attr_res();
  ::tenon::block::protobuf::AccountAttrResponse* mutable_acc_attr_res();
  void set_allocated_acc_attr_res(::tenon::block::protobuf::AccountAttrResponse* acc_attr_res);

  // optional .tenon.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
  bool has_up_vpn_req() const;
  void clear_up_vpn_req();
  static const int kUpVpnReqFieldNumber = 7;
  private:
  const ::tenon::block::protobuf::UpdateVpnCountRequest& _internal_up_vpn_req() const;
  public:
  const ::tenon::block::protobuf::UpdateVpnCountRequest& up_vpn_req() const;
  ::tenon::block::protobuf::UpdateVpnCountRequest* release_up_vpn_req();
  ::tenon::block::protobuf::UpdateVpnCountRequest* mutable_up_vpn_req();
  void set_allocated_up_vpn_req(::tenon::block::protobuf::UpdateVpnCountRequest* up_vpn_req);

  // optional .tenon.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
  bool has_up_vpn_res() const;
  void clear_up_vpn_res();
  static const int kUpVpnResFieldNumber = 8;
  private:
  const ::tenon::block::protobuf::UpdateVpnCountResponse& _internal_up_vpn_res() const;
  public:
  const ::tenon::block::protobuf::UpdateVpnCountResponse& up_vpn_res() const;
  ::tenon::block::protobuf::UpdateVpnCountResponse* release_up_vpn_res();
  ::tenon::block::protobuf::UpdateVpnCountResponse* mutable_up_vpn_res();
  void set_allocated_up_vpn_res(::tenon::block::protobuf::UpdateVpnCountResponse* up_vpn_res);

  // optional .tenon.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
  bool has_account_init_req() const;
  void clear_account_init_req();
  static const int kAccountInitReqFieldNumber = 9;
  private:
  const ::tenon::block::protobuf::GetAccountInitInfoRequest& _internal_account_init_req() const;
  public:
  const ::tenon::block::protobuf::GetAccountInitInfoRequest& account_init_req() const;
  ::tenon::block::protobuf::GetAccountInitInfoRequest* release_account_init_req();
  ::tenon::block::protobuf::GetAccountInitInfoRequest* mutable_account_init_req();
  void set_allocated_account_init_req(::tenon::block::protobuf::GetAccountInitInfoRequest* account_init_req);

  // optional .tenon.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
  bool has_account_init_res() const;
  void clear_account_init_res();
  static const int kAccountInitResFieldNumber = 10;
  private:
  const ::tenon::block::protobuf::GetAccountInitInfoResponse& _internal_account_init_res() const;
  public:
  const ::tenon::block::protobuf::GetAccountInitInfoResponse& account_init_res() const;
  ::tenon::block::protobuf::GetAccountInitInfoResponse* release_account_init_res();
  ::tenon::block::protobuf::GetAccountInitInfoResponse* mutable_account_init_res();
  void set_allocated_account_init_res(::tenon::block::protobuf::GetAccountInitInfoResponse* account_init_res);

  // optional .tenon.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
  bool has_vpn_active_req() const;
  void clear_vpn_active_req();
  static const int kVpnActiveReqFieldNumber = 11;
  private:
  const ::tenon::block::protobuf::UpdateVpnActiveRequest& _internal_vpn_active_req() const;
  public:
  const ::tenon::block::protobuf::UpdateVpnActiveRequest& vpn_active_req() const;
  ::tenon::block::protobuf::UpdateVpnActiveRequest* release_vpn_active_req();
  ::tenon::block::protobuf::UpdateVpnActiveRequest* mutable_vpn_active_req();
  void set_allocated_vpn_active_req(::tenon::block::protobuf::UpdateVpnActiveRequest* vpn_active_req);

  // optional .tenon.block.protobuf.AdRewardRequest ad_reward_req = 12;
  bool has_ad_reward_req() const;
  void clear_ad_reward_req();
  static const int kAdRewardReqFieldNumber = 12;
  private:
  const ::tenon::block::protobuf::AdRewardRequest& _internal_ad_reward_req() const;
  public:
  const ::tenon::block::protobuf::AdRewardRequest& ad_reward_req() const;
  ::tenon::block::protobuf::AdRewardRequest* release_ad_reward_req();
  ::tenon::block::protobuf::AdRewardRequest* mutable_ad_reward_req();
  void set_allocated_ad_reward_req(::tenon::block::protobuf::AdRewardRequest* ad_reward_req);

  // @@protoc_insertion_point(class_scope:tenon.block.protobuf.BlockMessage)
 private:
  void set_has_block_req();
  void clear_has_block_req();
  void set_has_block_res();
  void clear_has_block_res();
  void set_has_height_req();
  void clear_has_height_req();
  void set_has_height_res();
  void clear_has_height_res();
  void set_has_acc_attr_req();
  void clear_has_acc_attr_req();
  void set_has_acc_attr_res();
  void clear_has_acc_attr_res();
  void set_has_up_vpn_req();
  void clear_has_up_vpn_req();
  void set_has_up_vpn_res();
  void clear_has_up_vpn_res();
  void set_has_account_init_req();
  void clear_has_account_init_req();
  void set_has_account_init_res();
  void clear_has_account_init_res();
  void set_has_vpn_active_req();
  void clear_has_vpn_active_req();
  void set_has_ad_reward_req();
  void clear_has_ad_reward_req();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::tenon::block::protobuf::GetTxBlockRequest* block_req_;
  ::tenon::block::protobuf::GetTxBlockResponse* block_res_;
  ::tenon::block::protobuf::AccountHeightRequest* height_req_;
  ::tenon::block::protobuf::AccountHeightResponse* height_res_;
  ::tenon::block::protobuf::AccountAttrRequest* acc_attr_req_;
  ::tenon::block::protobuf::AccountAttrResponse* acc_attr_res_;
  ::tenon::block::protobuf::UpdateVpnCountRequest* up_vpn_req_;
  ::tenon::block::protobuf::UpdateVpnCountResponse* up_vpn_res_;
  ::tenon::block::protobuf::GetAccountInitInfoRequest* account_init_req_;
  ::tenon::block::protobuf::GetAccountInitInfoResponse* account_init_res_;
  ::tenon::block::protobuf::UpdateVpnActiveRequest* vpn_active_req_;
  ::tenon::block::protobuf::AdRewardRequest* ad_reward_req_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetTxBlockRequest

// optional bytes tx_gid = 1;
inline bool GetTxBlockRequest::has_tx_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTxBlockRequest::set_has_tx_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTxBlockRequest::clear_has_tx_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTxBlockRequest::clear_tx_gid() {
  tx_gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tx_gid();
}
inline const ::std::string& GetTxBlockRequest::tx_gid() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.GetTxBlockRequest.tx_gid)
  return tx_gid_.GetNoArena();
}
inline void GetTxBlockRequest::set_tx_gid(const ::std::string& value) {
  set_has_tx_gid();
  tx_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.GetTxBlockRequest.tx_gid)
}
#if LANG_CXX11
inline void GetTxBlockRequest::set_tx_gid(::std::string&& value) {
  set_has_tx_gid();
  tx_gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.GetTxBlockRequest.tx_gid)
}
#endif
inline void GetTxBlockRequest::set_tx_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tx_gid();
  tx_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.GetTxBlockRequest.tx_gid)
}
inline void GetTxBlockRequest::set_tx_gid(const void* value, size_t size) {
  set_has_tx_gid();
  tx_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.GetTxBlockRequest.tx_gid)
}
inline ::std::string* GetTxBlockRequest::mutable_tx_gid() {
  set_has_tx_gid();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.GetTxBlockRequest.tx_gid)
  return tx_gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTxBlockRequest::release_tx_gid() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.GetTxBlockRequest.tx_gid)
  if (!has_tx_gid()) {
    return NULL;
  }
  clear_has_tx_gid();
  return tx_gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxBlockRequest::set_allocated_tx_gid(::std::string* tx_gid) {
  if (tx_gid != NULL) {
    set_has_tx_gid();
  } else {
    clear_has_tx_gid();
  }
  tx_gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_gid);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.GetTxBlockRequest.tx_gid)
}

// optional bytes block_hash = 2;
inline bool GetTxBlockRequest::has_block_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTxBlockRequest::set_has_block_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTxBlockRequest::clear_has_block_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTxBlockRequest::clear_block_hash() {
  block_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block_hash();
}
inline const ::std::string& GetTxBlockRequest::block_hash() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.GetTxBlockRequest.block_hash)
  return block_hash_.GetNoArena();
}
inline void GetTxBlockRequest::set_block_hash(const ::std::string& value) {
  set_has_block_hash();
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.GetTxBlockRequest.block_hash)
}
#if LANG_CXX11
inline void GetTxBlockRequest::set_block_hash(::std::string&& value) {
  set_has_block_hash();
  block_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.GetTxBlockRequest.block_hash)
}
#endif
inline void GetTxBlockRequest::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block_hash();
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.GetTxBlockRequest.block_hash)
}
inline void GetTxBlockRequest::set_block_hash(const void* value, size_t size) {
  set_has_block_hash();
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.GetTxBlockRequest.block_hash)
}
inline ::std::string* GetTxBlockRequest::mutable_block_hash() {
  set_has_block_hash();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.GetTxBlockRequest.block_hash)
  return block_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTxBlockRequest::release_block_hash() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.GetTxBlockRequest.block_hash)
  if (!has_block_hash()) {
    return NULL;
  }
  clear_has_block_hash();
  return block_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxBlockRequest::set_allocated_block_hash(::std::string* block_hash) {
  if (block_hash != NULL) {
    set_has_block_hash();
  } else {
    clear_has_block_hash();
  }
  block_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_hash);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.GetTxBlockRequest.block_hash)
}

// optional bool from = 3;
inline bool GetTxBlockRequest::has_from() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetTxBlockRequest::set_has_from() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetTxBlockRequest::clear_has_from() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetTxBlockRequest::clear_from() {
  from_ = false;
  clear_has_from();
}
inline bool GetTxBlockRequest::from() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.GetTxBlockRequest.from)
  return from_;
}
inline void GetTxBlockRequest::set_from(bool value) {
  set_has_from();
  from_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.GetTxBlockRequest.from)
}

// optional uint64 height = 4;
inline bool GetTxBlockRequest::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetTxBlockRequest::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetTxBlockRequest::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetTxBlockRequest::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 GetTxBlockRequest::height() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.GetTxBlockRequest.height)
  return height_;
}
inline void GetTxBlockRequest::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.GetTxBlockRequest.height)
}

// optional bytes account_address = 5;
inline bool GetTxBlockRequest::has_account_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTxBlockRequest::set_has_account_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTxBlockRequest::clear_has_account_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTxBlockRequest::clear_account_address() {
  account_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_address();
}
inline const ::std::string& GetTxBlockRequest::account_address() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.GetTxBlockRequest.account_address)
  return account_address_.GetNoArena();
}
inline void GetTxBlockRequest::set_account_address(const ::std::string& value) {
  set_has_account_address();
  account_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.GetTxBlockRequest.account_address)
}
#if LANG_CXX11
inline void GetTxBlockRequest::set_account_address(::std::string&& value) {
  set_has_account_address();
  account_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.GetTxBlockRequest.account_address)
}
#endif
inline void GetTxBlockRequest::set_account_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_address();
  account_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.GetTxBlockRequest.account_address)
}
inline void GetTxBlockRequest::set_account_address(const void* value, size_t size) {
  set_has_account_address();
  account_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.GetTxBlockRequest.account_address)
}
inline ::std::string* GetTxBlockRequest::mutable_account_address() {
  set_has_account_address();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.GetTxBlockRequest.account_address)
  return account_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTxBlockRequest::release_account_address() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.GetTxBlockRequest.account_address)
  if (!has_account_address()) {
    return NULL;
  }
  clear_has_account_address();
  return account_address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxBlockRequest::set_allocated_account_address(::std::string* account_address) {
  if (account_address != NULL) {
    set_has_account_address();
  } else {
    clear_has_account_address();
  }
  account_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_address);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.GetTxBlockRequest.account_address)
}

// -------------------------------------------------------------------

// GetTxBlockResponse

// optional bytes block = 1;
inline bool GetTxBlockResponse::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTxBlockResponse::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTxBlockResponse::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTxBlockResponse::clear_block() {
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block();
}
inline const ::std::string& GetTxBlockResponse::block() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.GetTxBlockResponse.block)
  return block_.GetNoArena();
}
inline void GetTxBlockResponse::set_block(const ::std::string& value) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.GetTxBlockResponse.block)
}
#if LANG_CXX11
inline void GetTxBlockResponse::set_block(::std::string&& value) {
  set_has_block();
  block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.GetTxBlockResponse.block)
}
#endif
inline void GetTxBlockResponse::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.GetTxBlockResponse.block)
}
inline void GetTxBlockResponse::set_block(const void* value, size_t size) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.GetTxBlockResponse.block)
}
inline ::std::string* GetTxBlockResponse::mutable_block() {
  set_has_block();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.GetTxBlockResponse.block)
  return block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTxBlockResponse::release_block() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.GetTxBlockResponse.block)
  if (!has_block()) {
    return NULL;
  }
  clear_has_block();
  return block_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxBlockResponse::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    set_has_block();
  } else {
    clear_has_block();
  }
  block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.GetTxBlockResponse.block)
}

// -------------------------------------------------------------------

// AccountHeightRequest

// optional bytes account_addr = 1;
inline bool AccountHeightRequest::has_account_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountHeightRequest::set_has_account_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountHeightRequest::clear_has_account_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountHeightRequest::clear_account_addr() {
  account_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_addr();
}
inline const ::std::string& AccountHeightRequest::account_addr() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AccountHeightRequest.account_addr)
  return account_addr_.GetNoArena();
}
inline void AccountHeightRequest::set_account_addr(const ::std::string& value) {
  set_has_account_addr();
  account_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AccountHeightRequest.account_addr)
}
#if LANG_CXX11
inline void AccountHeightRequest::set_account_addr(::std::string&& value) {
  set_has_account_addr();
  account_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.AccountHeightRequest.account_addr)
}
#endif
inline void AccountHeightRequest::set_account_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_addr();
  account_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.AccountHeightRequest.account_addr)
}
inline void AccountHeightRequest::set_account_addr(const void* value, size_t size) {
  set_has_account_addr();
  account_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.AccountHeightRequest.account_addr)
}
inline ::std::string* AccountHeightRequest::mutable_account_addr() {
  set_has_account_addr();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.AccountHeightRequest.account_addr)
  return account_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountHeightRequest::release_account_addr() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.AccountHeightRequest.account_addr)
  if (!has_account_addr()) {
    return NULL;
  }
  clear_has_account_addr();
  return account_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountHeightRequest::set_allocated_account_addr(::std::string* account_addr) {
  if (account_addr != NULL) {
    set_has_account_addr();
  } else {
    clear_has_account_addr();
  }
  account_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_addr);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.AccountHeightRequest.account_addr)
}

// optional int64 index = 2;
inline bool AccountHeightRequest::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountHeightRequest::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountHeightRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountHeightRequest::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::int64 AccountHeightRequest::index() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AccountHeightRequest.index)
  return index_;
}
inline void AccountHeightRequest::set_index(::google::protobuf::int64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AccountHeightRequest.index)
}

// optional int32 count = 3;
inline bool AccountHeightRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountHeightRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountHeightRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountHeightRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 AccountHeightRequest::count() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AccountHeightRequest.count)
  return count_;
}
inline void AccountHeightRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AccountHeightRequest.count)
}

// -------------------------------------------------------------------

// AccountHeightResponse

// repeated uint64 heights = 1;
inline int AccountHeightResponse::heights_size() const {
  return heights_.size();
}
inline void AccountHeightResponse::clear_heights() {
  heights_.Clear();
}
inline ::google::protobuf::uint64 AccountHeightResponse::heights(int index) const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AccountHeightResponse.heights)
  return heights_.Get(index);
}
inline void AccountHeightResponse::set_heights(int index, ::google::protobuf::uint64 value) {
  heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AccountHeightResponse.heights)
}
inline void AccountHeightResponse::add_heights(::google::protobuf::uint64 value) {
  heights_.Add(value);
  // @@protoc_insertion_point(field_add:tenon.block.protobuf.AccountHeightResponse.heights)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AccountHeightResponse::heights() const {
  // @@protoc_insertion_point(field_list:tenon.block.protobuf.AccountHeightResponse.heights)
  return heights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AccountHeightResponse::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:tenon.block.protobuf.AccountHeightResponse.heights)
  return &heights_;
}

// optional bytes account_addr = 2;
inline bool AccountHeightResponse::has_account_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountHeightResponse::set_has_account_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountHeightResponse::clear_has_account_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountHeightResponse::clear_account_addr() {
  account_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_addr();
}
inline const ::std::string& AccountHeightResponse::account_addr() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AccountHeightResponse.account_addr)
  return account_addr_.GetNoArena();
}
inline void AccountHeightResponse::set_account_addr(const ::std::string& value) {
  set_has_account_addr();
  account_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AccountHeightResponse.account_addr)
}
#if LANG_CXX11
inline void AccountHeightResponse::set_account_addr(::std::string&& value) {
  set_has_account_addr();
  account_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.AccountHeightResponse.account_addr)
}
#endif
inline void AccountHeightResponse::set_account_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_addr();
  account_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.AccountHeightResponse.account_addr)
}
inline void AccountHeightResponse::set_account_addr(const void* value, size_t size) {
  set_has_account_addr();
  account_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.AccountHeightResponse.account_addr)
}
inline ::std::string* AccountHeightResponse::mutable_account_addr() {
  set_has_account_addr();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.AccountHeightResponse.account_addr)
  return account_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountHeightResponse::release_account_addr() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.AccountHeightResponse.account_addr)
  if (!has_account_addr()) {
    return NULL;
  }
  clear_has_account_addr();
  return account_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountHeightResponse::set_allocated_account_addr(::std::string* account_addr) {
  if (account_addr != NULL) {
    set_has_account_addr();
  } else {
    clear_has_account_addr();
  }
  account_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_addr);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.AccountHeightResponse.account_addr)
}

// optional bytes type = 3;
inline bool AccountHeightResponse::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountHeightResponse::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountHeightResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountHeightResponse::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& AccountHeightResponse::type() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AccountHeightResponse.type)
  return type_.GetNoArena();
}
inline void AccountHeightResponse::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AccountHeightResponse.type)
}
#if LANG_CXX11
inline void AccountHeightResponse::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.AccountHeightResponse.type)
}
#endif
inline void AccountHeightResponse::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.AccountHeightResponse.type)
}
inline void AccountHeightResponse::set_type(const void* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.AccountHeightResponse.type)
}
inline ::std::string* AccountHeightResponse::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.AccountHeightResponse.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountHeightResponse::release_type() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.AccountHeightResponse.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountHeightResponse::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.AccountHeightResponse.type)
}

// -------------------------------------------------------------------

// AccountAttrRequest

// optional bytes account = 1;
inline bool AccountAttrRequest::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountAttrRequest::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountAttrRequest::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountAttrRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& AccountAttrRequest::account() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AccountAttrRequest.account)
  return account_.GetNoArena();
}
inline void AccountAttrRequest::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AccountAttrRequest.account)
}
#if LANG_CXX11
inline void AccountAttrRequest::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.AccountAttrRequest.account)
}
#endif
inline void AccountAttrRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.AccountAttrRequest.account)
}
inline void AccountAttrRequest::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.AccountAttrRequest.account)
}
inline ::std::string* AccountAttrRequest::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.AccountAttrRequest.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountAttrRequest::release_account() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.AccountAttrRequest.account)
  if (!has_account()) {
    return NULL;
  }
  clear_has_account();
  return account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountAttrRequest::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.AccountAttrRequest.account)
}

// optional bytes attr_key = 2;
inline bool AccountAttrRequest::has_attr_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountAttrRequest::set_has_attr_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountAttrRequest::clear_has_attr_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountAttrRequest::clear_attr_key() {
  attr_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attr_key();
}
inline const ::std::string& AccountAttrRequest::attr_key() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AccountAttrRequest.attr_key)
  return attr_key_.GetNoArena();
}
inline void AccountAttrRequest::set_attr_key(const ::std::string& value) {
  set_has_attr_key();
  attr_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AccountAttrRequest.attr_key)
}
#if LANG_CXX11
inline void AccountAttrRequest::set_attr_key(::std::string&& value) {
  set_has_attr_key();
  attr_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.AccountAttrRequest.attr_key)
}
#endif
inline void AccountAttrRequest::set_attr_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attr_key();
  attr_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.AccountAttrRequest.attr_key)
}
inline void AccountAttrRequest::set_attr_key(const void* value, size_t size) {
  set_has_attr_key();
  attr_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.AccountAttrRequest.attr_key)
}
inline ::std::string* AccountAttrRequest::mutable_attr_key() {
  set_has_attr_key();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.AccountAttrRequest.attr_key)
  return attr_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountAttrRequest::release_attr_key() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.AccountAttrRequest.attr_key)
  if (!has_attr_key()) {
    return NULL;
  }
  clear_has_attr_key();
  return attr_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountAttrRequest::set_allocated_attr_key(::std::string* attr_key) {
  if (attr_key != NULL) {
    set_has_attr_key();
  } else {
    clear_has_attr_key();
  }
  attr_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attr_key);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.AccountAttrRequest.attr_key)
}

// optional uint64 height = 3;
inline bool AccountAttrRequest::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountAttrRequest::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountAttrRequest::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountAttrRequest::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 AccountAttrRequest::height() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AccountAttrRequest.height)
  return height_;
}
inline void AccountAttrRequest::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AccountAttrRequest.height)
}

// -------------------------------------------------------------------

// AccountAttrResponse

// optional bytes account = 1;
inline bool AccountAttrResponse::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountAttrResponse::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountAttrResponse::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountAttrResponse::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& AccountAttrResponse::account() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AccountAttrResponse.account)
  return account_.GetNoArena();
}
inline void AccountAttrResponse::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AccountAttrResponse.account)
}
#if LANG_CXX11
inline void AccountAttrResponse::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.AccountAttrResponse.account)
}
#endif
inline void AccountAttrResponse::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.AccountAttrResponse.account)
}
inline void AccountAttrResponse::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.AccountAttrResponse.account)
}
inline ::std::string* AccountAttrResponse::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.AccountAttrResponse.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountAttrResponse::release_account() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.AccountAttrResponse.account)
  if (!has_account()) {
    return NULL;
  }
  clear_has_account();
  return account_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountAttrResponse::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.AccountAttrResponse.account)
}

// optional bytes attr_key = 2;
inline bool AccountAttrResponse::has_attr_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountAttrResponse::set_has_attr_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountAttrResponse::clear_has_attr_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountAttrResponse::clear_attr_key() {
  attr_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attr_key();
}
inline const ::std::string& AccountAttrResponse::attr_key() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AccountAttrResponse.attr_key)
  return attr_key_.GetNoArena();
}
inline void AccountAttrResponse::set_attr_key(const ::std::string& value) {
  set_has_attr_key();
  attr_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AccountAttrResponse.attr_key)
}
#if LANG_CXX11
inline void AccountAttrResponse::set_attr_key(::std::string&& value) {
  set_has_attr_key();
  attr_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.AccountAttrResponse.attr_key)
}
#endif
inline void AccountAttrResponse::set_attr_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attr_key();
  attr_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.AccountAttrResponse.attr_key)
}
inline void AccountAttrResponse::set_attr_key(const void* value, size_t size) {
  set_has_attr_key();
  attr_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.AccountAttrResponse.attr_key)
}
inline ::std::string* AccountAttrResponse::mutable_attr_key() {
  set_has_attr_key();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.AccountAttrResponse.attr_key)
  return attr_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountAttrResponse::release_attr_key() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.AccountAttrResponse.attr_key)
  if (!has_attr_key()) {
    return NULL;
  }
  clear_has_attr_key();
  return attr_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountAttrResponse::set_allocated_attr_key(::std::string* attr_key) {
  if (attr_key != NULL) {
    set_has_attr_key();
  } else {
    clear_has_attr_key();
  }
  attr_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attr_key);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.AccountAttrResponse.attr_key)
}

// optional uint64 height = 3;
inline bool AccountAttrResponse::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountAttrResponse::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountAttrResponse::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountAttrResponse::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 AccountAttrResponse::height() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AccountAttrResponse.height)
  return height_;
}
inline void AccountAttrResponse::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AccountAttrResponse.height)
}

// optional bytes block = 4;
inline bool AccountAttrResponse::has_block() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountAttrResponse::set_has_block() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountAttrResponse::clear_has_block() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountAttrResponse::clear_block() {
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block();
}
inline const ::std::string& AccountAttrResponse::block() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AccountAttrResponse.block)
  return block_.GetNoArena();
}
inline void AccountAttrResponse::set_block(const ::std::string& value) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AccountAttrResponse.block)
}
#if LANG_CXX11
inline void AccountAttrResponse::set_block(::std::string&& value) {
  set_has_block();
  block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.AccountAttrResponse.block)
}
#endif
inline void AccountAttrResponse::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.AccountAttrResponse.block)
}
inline void AccountAttrResponse::set_block(const void* value, size_t size) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.AccountAttrResponse.block)
}
inline ::std::string* AccountAttrResponse::mutable_block() {
  set_has_block();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.AccountAttrResponse.block)
  return block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountAttrResponse::release_block() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.AccountAttrResponse.block)
  if (!has_block()) {
    return NULL;
  }
  clear_has_block();
  return block_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountAttrResponse::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    set_has_block();
  } else {
    clear_has_block();
  }
  block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.AccountAttrResponse.block)
}

// -------------------------------------------------------------------

// UpdateVpnCountRequest

// optional uint64 account_hash = 1;
inline bool UpdateVpnCountRequest::has_account_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateVpnCountRequest::set_has_account_hash() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateVpnCountRequest::clear_has_account_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateVpnCountRequest::clear_account_hash() {
  account_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_account_hash();
}
inline ::google::protobuf::uint64 UpdateVpnCountRequest::account_hash() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.UpdateVpnCountRequest.account_hash)
  return account_hash_;
}
inline void UpdateVpnCountRequest::set_account_hash(::google::protobuf::uint64 value) {
  set_has_account_hash();
  account_hash_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.UpdateVpnCountRequest.account_hash)
}

// optional bytes ip = 2;
inline bool UpdateVpnCountRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateVpnCountRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateVpnCountRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateVpnCountRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& UpdateVpnCountRequest::ip() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.UpdateVpnCountRequest.ip)
  return ip_.GetNoArena();
}
inline void UpdateVpnCountRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.UpdateVpnCountRequest.ip)
}
#if LANG_CXX11
inline void UpdateVpnCountRequest::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.UpdateVpnCountRequest.ip)
}
#endif
inline void UpdateVpnCountRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.UpdateVpnCountRequest.ip)
}
inline void UpdateVpnCountRequest::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.UpdateVpnCountRequest.ip)
}
inline ::std::string* UpdateVpnCountRequest::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.UpdateVpnCountRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateVpnCountRequest::release_ip() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.UpdateVpnCountRequest.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateVpnCountRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.UpdateVpnCountRequest.ip)
}

// optional bytes old_ip = 3;
inline bool UpdateVpnCountRequest::has_old_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateVpnCountRequest::set_has_old_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateVpnCountRequest::clear_has_old_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateVpnCountRequest::clear_old_ip() {
  old_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_old_ip();
}
inline const ::std::string& UpdateVpnCountRequest::old_ip() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.UpdateVpnCountRequest.old_ip)
  return old_ip_.GetNoArena();
}
inline void UpdateVpnCountRequest::set_old_ip(const ::std::string& value) {
  set_has_old_ip();
  old_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.UpdateVpnCountRequest.old_ip)
}
#if LANG_CXX11
inline void UpdateVpnCountRequest::set_old_ip(::std::string&& value) {
  set_has_old_ip();
  old_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.UpdateVpnCountRequest.old_ip)
}
#endif
inline void UpdateVpnCountRequest::set_old_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_old_ip();
  old_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.UpdateVpnCountRequest.old_ip)
}
inline void UpdateVpnCountRequest::set_old_ip(const void* value, size_t size) {
  set_has_old_ip();
  old_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.UpdateVpnCountRequest.old_ip)
}
inline ::std::string* UpdateVpnCountRequest::mutable_old_ip() {
  set_has_old_ip();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.UpdateVpnCountRequest.old_ip)
  return old_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateVpnCountRequest::release_old_ip() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.UpdateVpnCountRequest.old_ip)
  if (!has_old_ip()) {
    return NULL;
  }
  clear_has_old_ip();
  return old_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateVpnCountRequest::set_allocated_old_ip(::std::string* old_ip) {
  if (old_ip != NULL) {
    set_has_old_ip();
  } else {
    clear_has_old_ip();
  }
  old_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_ip);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.UpdateVpnCountRequest.old_ip)
}

// optional bytes uid = 4;
inline bool UpdateVpnCountRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateVpnCountRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateVpnCountRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateVpnCountRequest::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& UpdateVpnCountRequest::uid() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.UpdateVpnCountRequest.uid)
  return uid_.GetNoArena();
}
inline void UpdateVpnCountRequest::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.UpdateVpnCountRequest.uid)
}
#if LANG_CXX11
inline void UpdateVpnCountRequest::set_uid(::std::string&& value) {
  set_has_uid();
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.UpdateVpnCountRequest.uid)
}
#endif
inline void UpdateVpnCountRequest::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.UpdateVpnCountRequest.uid)
}
inline void UpdateVpnCountRequest::set_uid(const void* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.UpdateVpnCountRequest.uid)
}
inline ::std::string* UpdateVpnCountRequest::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.UpdateVpnCountRequest.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateVpnCountRequest::release_uid() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.UpdateVpnCountRequest.uid)
  if (!has_uid()) {
    return NULL;
  }
  clear_has_uid();
  return uid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateVpnCountRequest::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.UpdateVpnCountRequest.uid)
}

// optional bool just_set = 5;
inline bool UpdateVpnCountRequest::has_just_set() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateVpnCountRequest::set_has_just_set() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateVpnCountRequest::clear_has_just_set() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateVpnCountRequest::clear_just_set() {
  just_set_ = false;
  clear_has_just_set();
}
inline bool UpdateVpnCountRequest::just_set() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.UpdateVpnCountRequest.just_set)
  return just_set_;
}
inline void UpdateVpnCountRequest::set_just_set(bool value) {
  set_has_just_set();
  just_set_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.UpdateVpnCountRequest.just_set)
}

// -------------------------------------------------------------------

// VpnCountItem

// optional bytes ip = 1;
inline bool VpnCountItem::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VpnCountItem::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VpnCountItem::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VpnCountItem::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& VpnCountItem::ip() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.VpnCountItem.ip)
  return ip_.GetNoArena();
}
inline void VpnCountItem::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.VpnCountItem.ip)
}
#if LANG_CXX11
inline void VpnCountItem::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.VpnCountItem.ip)
}
#endif
inline void VpnCountItem::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.VpnCountItem.ip)
}
inline void VpnCountItem::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.VpnCountItem.ip)
}
inline ::std::string* VpnCountItem::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.VpnCountItem.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VpnCountItem::release_ip() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.VpnCountItem.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VpnCountItem::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.VpnCountItem.ip)
}

// optional uint32 count = 2;
inline bool VpnCountItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VpnCountItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VpnCountItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VpnCountItem::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 VpnCountItem::count() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.VpnCountItem.count)
  return count_;
}
inline void VpnCountItem::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.VpnCountItem.count)
}

// -------------------------------------------------------------------

// UpdateVpnCountResponse

// repeated .tenon.block.protobuf.VpnCountItem vpn_nodes = 1;
inline int UpdateVpnCountResponse::vpn_nodes_size() const {
  return vpn_nodes_.size();
}
inline void UpdateVpnCountResponse::clear_vpn_nodes() {
  vpn_nodes_.Clear();
}
inline ::tenon::block::protobuf::VpnCountItem* UpdateVpnCountResponse::mutable_vpn_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.UpdateVpnCountResponse.vpn_nodes)
  return vpn_nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::VpnCountItem >*
UpdateVpnCountResponse::mutable_vpn_nodes() {
  // @@protoc_insertion_point(field_mutable_list:tenon.block.protobuf.UpdateVpnCountResponse.vpn_nodes)
  return &vpn_nodes_;
}
inline const ::tenon::block::protobuf::VpnCountItem& UpdateVpnCountResponse::vpn_nodes(int index) const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.UpdateVpnCountResponse.vpn_nodes)
  return vpn_nodes_.Get(index);
}
inline ::tenon::block::protobuf::VpnCountItem* UpdateVpnCountResponse::add_vpn_nodes() {
  // @@protoc_insertion_point(field_add:tenon.block.protobuf.UpdateVpnCountResponse.vpn_nodes)
  return vpn_nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::VpnCountItem >&
UpdateVpnCountResponse::vpn_nodes() const {
  // @@protoc_insertion_point(field_list:tenon.block.protobuf.UpdateVpnCountResponse.vpn_nodes)
  return vpn_nodes_;
}

// -------------------------------------------------------------------

// GetAccountInitInfoRequest

// optional bytes id = 1;
inline bool GetAccountInitInfoRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAccountInitInfoRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAccountInitInfoRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAccountInitInfoRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& GetAccountInitInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.GetAccountInitInfoRequest.id)
  return id_.GetNoArena();
}
inline void GetAccountInitInfoRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.GetAccountInitInfoRequest.id)
}
#if LANG_CXX11
inline void GetAccountInitInfoRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.GetAccountInitInfoRequest.id)
}
#endif
inline void GetAccountInitInfoRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.GetAccountInitInfoRequest.id)
}
inline void GetAccountInitInfoRequest::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.GetAccountInitInfoRequest.id)
}
inline ::std::string* GetAccountInitInfoRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.GetAccountInitInfoRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAccountInitInfoRequest::release_id() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.GetAccountInitInfoRequest.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccountInitInfoRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.GetAccountInitInfoRequest.id)
}

// optional uint32 count = 2;
inline bool GetAccountInitInfoRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAccountInitInfoRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAccountInitInfoRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAccountInitInfoRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GetAccountInitInfoRequest::count() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.GetAccountInitInfoRequest.count)
  return count_;
}
inline void GetAccountInitInfoRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.GetAccountInitInfoRequest.count)
}

// optional uint64 height = 3;
inline bool GetAccountInitInfoRequest::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAccountInitInfoRequest::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAccountInitInfoRequest::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAccountInitInfoRequest::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 GetAccountInitInfoRequest::height() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.GetAccountInitInfoRequest.height)
  return height_;
}
inline void GetAccountInitInfoRequest::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.GetAccountInitInfoRequest.height)
}

// -------------------------------------------------------------------

// TxItem

// optional bytes from = 1;
inline bool TxItem::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxItem::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxItem::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxItem::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
inline const ::std::string& TxItem::from() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.TxItem.from)
  return from_.GetNoArena();
}
inline void TxItem::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.TxItem.from)
}
#if LANG_CXX11
inline void TxItem::set_from(::std::string&& value) {
  set_has_from();
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.TxItem.from)
}
#endif
inline void TxItem::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.TxItem.from)
}
inline void TxItem::set_from(const void* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.TxItem.from)
}
inline ::std::string* TxItem::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.TxItem.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxItem::release_from() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.TxItem.from)
  if (!has_from()) {
    return NULL;
  }
  clear_has_from();
  return from_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxItem::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.TxItem.from)
}

// optional bytes to = 2;
inline bool TxItem::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxItem::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxItem::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxItem::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to();
}
inline const ::std::string& TxItem::to() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.TxItem.to)
  return to_.GetNoArena();
}
inline void TxItem::set_to(const ::std::string& value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.TxItem.to)
}
#if LANG_CXX11
inline void TxItem::set_to(::std::string&& value) {
  set_has_to();
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.TxItem.to)
}
#endif
inline void TxItem::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.TxItem.to)
}
inline void TxItem::set_to(const void* value, size_t size) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.TxItem.to)
}
inline ::std::string* TxItem::mutable_to() {
  set_has_to();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.TxItem.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxItem::release_to() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.TxItem.to)
  if (!has_to()) {
    return NULL;
  }
  clear_has_to();
  return to_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxItem::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    set_has_to();
  } else {
    clear_has_to();
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.TxItem.to)
}

// optional uint64 amount = 3;
inline bool TxItem::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxItem::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxItem::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxItem::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 TxItem::amount() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.TxItem.amount)
  return amount_;
}
inline void TxItem::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.TxItem.amount)
}

// optional uint64 timestamp = 4;
inline bool TxItem::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxItem::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxItem::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxItem::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 TxItem::timestamp() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.TxItem.timestamp)
  return timestamp_;
}
inline void TxItem::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.TxItem.timestamp)
}

// optional uint64 height = 5;
inline bool TxItem::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TxItem::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TxItem::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TxItem::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 TxItem::height() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.TxItem.height)
  return height_;
}
inline void TxItem::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.TxItem.height)
}

// optional uint64 balance = 6;
inline bool TxItem::has_balance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TxItem::set_has_balance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TxItem::clear_has_balance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TxItem::clear_balance() {
  balance_ = GOOGLE_ULONGLONG(0);
  clear_has_balance();
}
inline ::google::protobuf::uint64 TxItem::balance() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.TxItem.balance)
  return balance_;
}
inline void TxItem::set_balance(::google::protobuf::uint64 value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.TxItem.balance)
}

// optional bytes gid = 7;
inline bool TxItem::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxItem::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxItem::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxItem::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& TxItem::gid() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.TxItem.gid)
  return gid_.GetNoArena();
}
inline void TxItem::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.TxItem.gid)
}
#if LANG_CXX11
inline void TxItem::set_gid(::std::string&& value) {
  set_has_gid();
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.TxItem.gid)
}
#endif
inline void TxItem::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.TxItem.gid)
}
inline void TxItem::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.TxItem.gid)
}
inline ::std::string* TxItem::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.TxItem.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxItem::release_gid() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.TxItem.gid)
  if (!has_gid()) {
    return NULL;
  }
  clear_has_gid();
  return gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxItem::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.TxItem.gid)
}

// optional uint32 type = 8;
inline bool TxItem::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TxItem::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TxItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TxItem::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TxItem::type() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.TxItem.type)
  return type_;
}
inline void TxItem::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.TxItem.type)
}

// optional uint32 status = 9;
inline bool TxItem::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TxItem::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TxItem::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TxItem::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 TxItem::status() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.TxItem.status)
  return status_;
}
inline void TxItem::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.TxItem.status)
}

// optional uint32 version = 10;
inline bool TxItem::has_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TxItem::set_has_version() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TxItem::clear_has_version() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TxItem::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TxItem::version() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.TxItem.version)
  return version_;
}
inline void TxItem::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.TxItem.version)
}

// -------------------------------------------------------------------

// GetAccountInitInfoResponse

// optional uint64 balance = 1;
inline bool GetAccountInitInfoResponse::has_balance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAccountInitInfoResponse::set_has_balance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAccountInitInfoResponse::clear_has_balance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAccountInitInfoResponse::clear_balance() {
  balance_ = GOOGLE_ULONGLONG(0);
  clear_has_balance();
}
inline ::google::protobuf::uint64 GetAccountInitInfoResponse::balance() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.GetAccountInitInfoResponse.balance)
  return balance_;
}
inline void GetAccountInitInfoResponse::set_balance(::google::protobuf::uint64 value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.GetAccountInitInfoResponse.balance)
}

// repeated .tenon.block.protobuf.TxItem tx_list = 2;
inline int GetAccountInitInfoResponse::tx_list_size() const {
  return tx_list_.size();
}
inline void GetAccountInitInfoResponse::clear_tx_list() {
  tx_list_.Clear();
}
inline ::tenon::block::protobuf::TxItem* GetAccountInitInfoResponse::mutable_tx_list(int index) {
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.GetAccountInitInfoResponse.tx_list)
  return tx_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::TxItem >*
GetAccountInitInfoResponse::mutable_tx_list() {
  // @@protoc_insertion_point(field_mutable_list:tenon.block.protobuf.GetAccountInitInfoResponse.tx_list)
  return &tx_list_;
}
inline const ::tenon::block::protobuf::TxItem& GetAccountInitInfoResponse::tx_list(int index) const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.GetAccountInitInfoResponse.tx_list)
  return tx_list_.Get(index);
}
inline ::tenon::block::protobuf::TxItem* GetAccountInitInfoResponse::add_tx_list() {
  // @@protoc_insertion_point(field_add:tenon.block.protobuf.GetAccountInitInfoResponse.tx_list)
  return tx_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::TxItem >&
GetAccountInitInfoResponse::tx_list() const {
  // @@protoc_insertion_point(field_list:tenon.block.protobuf.GetAccountInitInfoResponse.tx_list)
  return tx_list_;
}

// optional bytes id = 3;
inline bool GetAccountInitInfoResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAccountInitInfoResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAccountInitInfoResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAccountInitInfoResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& GetAccountInitInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.GetAccountInitInfoResponse.id)
  return id_.GetNoArena();
}
inline void GetAccountInitInfoResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.GetAccountInitInfoResponse.id)
}
#if LANG_CXX11
inline void GetAccountInitInfoResponse::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.GetAccountInitInfoResponse.id)
}
#endif
inline void GetAccountInitInfoResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.GetAccountInitInfoResponse.id)
}
inline void GetAccountInitInfoResponse::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.GetAccountInitInfoResponse.id)
}
inline ::std::string* GetAccountInitInfoResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.GetAccountInitInfoResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAccountInitInfoResponse::release_id() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.GetAccountInitInfoResponse.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccountInitInfoResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.GetAccountInitInfoResponse.id)
}

// -------------------------------------------------------------------

// UpdateVpnActiveRequest

// optional bytes id = 1;
inline bool UpdateVpnActiveRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateVpnActiveRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateVpnActiveRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateVpnActiveRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& UpdateVpnActiveRequest::id() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.UpdateVpnActiveRequest.id)
  return id_.GetNoArena();
}
inline void UpdateVpnActiveRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.UpdateVpnActiveRequest.id)
}
#if LANG_CXX11
inline void UpdateVpnActiveRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.UpdateVpnActiveRequest.id)
}
#endif
inline void UpdateVpnActiveRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.UpdateVpnActiveRequest.id)
}
inline void UpdateVpnActiveRequest::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.UpdateVpnActiveRequest.id)
}
inline ::std::string* UpdateVpnActiveRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.UpdateVpnActiveRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateVpnActiveRequest::release_id() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.UpdateVpnActiveRequest.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateVpnActiveRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.UpdateVpnActiveRequest.id)
}

// optional bytes ip = 2;
inline bool UpdateVpnActiveRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateVpnActiveRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateVpnActiveRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateVpnActiveRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& UpdateVpnActiveRequest::ip() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.UpdateVpnActiveRequest.ip)
  return ip_.GetNoArena();
}
inline void UpdateVpnActiveRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.UpdateVpnActiveRequest.ip)
}
#if LANG_CXX11
inline void UpdateVpnActiveRequest::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.UpdateVpnActiveRequest.ip)
}
#endif
inline void UpdateVpnActiveRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.UpdateVpnActiveRequest.ip)
}
inline void UpdateVpnActiveRequest::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.UpdateVpnActiveRequest.ip)
}
inline ::std::string* UpdateVpnActiveRequest::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.UpdateVpnActiveRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateVpnActiveRequest::release_ip() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.UpdateVpnActiveRequest.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateVpnActiveRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.UpdateVpnActiveRequest.ip)
}

// -------------------------------------------------------------------

// AdRewardRequest

// optional bytes id = 1;
inline bool AdRewardRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdRewardRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdRewardRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdRewardRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& AdRewardRequest::id() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AdRewardRequest.id)
  return id_.GetNoArena();
}
inline void AdRewardRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AdRewardRequest.id)
}
#if LANG_CXX11
inline void AdRewardRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.AdRewardRequest.id)
}
#endif
inline void AdRewardRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.AdRewardRequest.id)
}
inline void AdRewardRequest::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.AdRewardRequest.id)
}
inline ::std::string* AdRewardRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.AdRewardRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdRewardRequest::release_id() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.AdRewardRequest.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdRewardRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.AdRewardRequest.id)
}

// optional bytes reward_key = 2;
inline bool AdRewardRequest::has_reward_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdRewardRequest::set_has_reward_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdRewardRequest::clear_has_reward_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdRewardRequest::clear_reward_key() {
  reward_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reward_key();
}
inline const ::std::string& AdRewardRequest::reward_key() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AdRewardRequest.reward_key)
  return reward_key_.GetNoArena();
}
inline void AdRewardRequest::set_reward_key(const ::std::string& value) {
  set_has_reward_key();
  reward_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AdRewardRequest.reward_key)
}
#if LANG_CXX11
inline void AdRewardRequest::set_reward_key(::std::string&& value) {
  set_has_reward_key();
  reward_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.AdRewardRequest.reward_key)
}
#endif
inline void AdRewardRequest::set_reward_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reward_key();
  reward_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.AdRewardRequest.reward_key)
}
inline void AdRewardRequest::set_reward_key(const void* value, size_t size) {
  set_has_reward_key();
  reward_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.AdRewardRequest.reward_key)
}
inline ::std::string* AdRewardRequest::mutable_reward_key() {
  set_has_reward_key();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.AdRewardRequest.reward_key)
  return reward_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdRewardRequest::release_reward_key() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.AdRewardRequest.reward_key)
  if (!has_reward_key()) {
    return NULL;
  }
  clear_has_reward_key();
  return reward_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdRewardRequest::set_allocated_reward_key(::std::string* reward_key) {
  if (reward_key != NULL) {
    set_has_reward_key();
  } else {
    clear_has_reward_key();
  }
  reward_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reward_key);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.AdRewardRequest.reward_key)
}

// optional bytes gid = 3;
inline bool AdRewardRequest::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdRewardRequest::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdRewardRequest::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdRewardRequest::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& AdRewardRequest::gid() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.AdRewardRequest.gid)
  return gid_.GetNoArena();
}
inline void AdRewardRequest::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.AdRewardRequest.gid)
}
#if LANG_CXX11
inline void AdRewardRequest::set_gid(::std::string&& value) {
  set_has_gid();
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.block.protobuf.AdRewardRequest.gid)
}
#endif
inline void AdRewardRequest::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.block.protobuf.AdRewardRequest.gid)
}
inline void AdRewardRequest::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.block.protobuf.AdRewardRequest.gid)
}
inline ::std::string* AdRewardRequest::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.AdRewardRequest.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdRewardRequest::release_gid() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.AdRewardRequest.gid)
  if (!has_gid()) {
    return NULL;
  }
  clear_has_gid();
  return gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdRewardRequest::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.AdRewardRequest.gid)
}

// -------------------------------------------------------------------

// ElectStatisticInfo

// optional uint64 elect_height = 1;
inline bool ElectStatisticInfo::has_elect_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ElectStatisticInfo::set_has_elect_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ElectStatisticInfo::clear_has_elect_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ElectStatisticInfo::clear_elect_height() {
  elect_height_ = GOOGLE_ULONGLONG(0);
  clear_has_elect_height();
}
inline ::google::protobuf::uint64 ElectStatisticInfo::elect_height() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.ElectStatisticInfo.elect_height)
  return elect_height_;
}
inline void ElectStatisticInfo::set_elect_height(::google::protobuf::uint64 value) {
  set_has_elect_height();
  elect_height_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.ElectStatisticInfo.elect_height)
}

// repeated uint32 succ_tx_count = 2;
inline int ElectStatisticInfo::succ_tx_count_size() const {
  return succ_tx_count_.size();
}
inline void ElectStatisticInfo::clear_succ_tx_count() {
  succ_tx_count_.Clear();
}
inline ::google::protobuf::uint32 ElectStatisticInfo::succ_tx_count(int index) const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.ElectStatisticInfo.succ_tx_count)
  return succ_tx_count_.Get(index);
}
inline void ElectStatisticInfo::set_succ_tx_count(int index, ::google::protobuf::uint32 value) {
  succ_tx_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.ElectStatisticInfo.succ_tx_count)
}
inline void ElectStatisticInfo::add_succ_tx_count(::google::protobuf::uint32 value) {
  succ_tx_count_.Add(value);
  // @@protoc_insertion_point(field_add:tenon.block.protobuf.ElectStatisticInfo.succ_tx_count)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ElectStatisticInfo::succ_tx_count() const {
  // @@protoc_insertion_point(field_list:tenon.block.protobuf.ElectStatisticInfo.succ_tx_count)
  return succ_tx_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ElectStatisticInfo::mutable_succ_tx_count() {
  // @@protoc_insertion_point(field_mutable_list:tenon.block.protobuf.ElectStatisticInfo.succ_tx_count)
  return &succ_tx_count_;
}

// -------------------------------------------------------------------

// StatisticInfo

// optional uint64 timeblock_height = 1;
inline bool StatisticInfo::has_timeblock_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatisticInfo::set_has_timeblock_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatisticInfo::clear_has_timeblock_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatisticInfo::clear_timeblock_height() {
  timeblock_height_ = GOOGLE_ULONGLONG(0);
  clear_has_timeblock_height();
}
inline ::google::protobuf::uint64 StatisticInfo::timeblock_height() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.StatisticInfo.timeblock_height)
  return timeblock_height_;
}
inline void StatisticInfo::set_timeblock_height(::google::protobuf::uint64 value) {
  set_has_timeblock_height();
  timeblock_height_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.StatisticInfo.timeblock_height)
}

// optional uint32 all_tx_count = 2;
inline bool StatisticInfo::has_all_tx_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatisticInfo::set_has_all_tx_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatisticInfo::clear_has_all_tx_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatisticInfo::clear_all_tx_count() {
  all_tx_count_ = 0u;
  clear_has_all_tx_count();
}
inline ::google::protobuf::uint32 StatisticInfo::all_tx_count() const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.StatisticInfo.all_tx_count)
  return all_tx_count_;
}
inline void StatisticInfo::set_all_tx_count(::google::protobuf::uint32 value) {
  set_has_all_tx_count();
  all_tx_count_ = value;
  // @@protoc_insertion_point(field_set:tenon.block.protobuf.StatisticInfo.all_tx_count)
}

// repeated .tenon.block.protobuf.ElectStatisticInfo elect_statistic = 3;
inline int StatisticInfo::elect_statistic_size() const {
  return elect_statistic_.size();
}
inline void StatisticInfo::clear_elect_statistic() {
  elect_statistic_.Clear();
}
inline ::tenon::block::protobuf::ElectStatisticInfo* StatisticInfo::mutable_elect_statistic(int index) {
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.StatisticInfo.elect_statistic)
  return elect_statistic_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::ElectStatisticInfo >*
StatisticInfo::mutable_elect_statistic() {
  // @@protoc_insertion_point(field_mutable_list:tenon.block.protobuf.StatisticInfo.elect_statistic)
  return &elect_statistic_;
}
inline const ::tenon::block::protobuf::ElectStatisticInfo& StatisticInfo::elect_statistic(int index) const {
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.StatisticInfo.elect_statistic)
  return elect_statistic_.Get(index);
}
inline ::tenon::block::protobuf::ElectStatisticInfo* StatisticInfo::add_elect_statistic() {
  // @@protoc_insertion_point(field_add:tenon.block.protobuf.StatisticInfo.elect_statistic)
  return elect_statistic_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tenon::block::protobuf::ElectStatisticInfo >&
StatisticInfo::elect_statistic() const {
  // @@protoc_insertion_point(field_list:tenon.block.protobuf.StatisticInfo.elect_statistic)
  return elect_statistic_;
}

// -------------------------------------------------------------------

// BlockMessage

// optional .tenon.block.protobuf.GetTxBlockRequest block_req = 1;
inline bool BlockMessage::has_block_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockMessage::set_has_block_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockMessage::clear_has_block_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockMessage::clear_block_req() {
  if (block_req_ != NULL) block_req_->Clear();
  clear_has_block_req();
}
inline const ::tenon::block::protobuf::GetTxBlockRequest& BlockMessage::_internal_block_req() const {
  return *block_req_;
}
inline const ::tenon::block::protobuf::GetTxBlockRequest& BlockMessage::block_req() const {
  const ::tenon::block::protobuf::GetTxBlockRequest* p = block_req_;
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.BlockMessage.block_req)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::block::protobuf::GetTxBlockRequest*>(
      &::tenon::block::protobuf::_GetTxBlockRequest_default_instance_);
}
inline ::tenon::block::protobuf::GetTxBlockRequest* BlockMessage::release_block_req() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.BlockMessage.block_req)
  clear_has_block_req();
  ::tenon::block::protobuf::GetTxBlockRequest* temp = block_req_;
  block_req_ = NULL;
  return temp;
}
inline ::tenon::block::protobuf::GetTxBlockRequest* BlockMessage::mutable_block_req() {
  set_has_block_req();
  if (block_req_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::block::protobuf::GetTxBlockRequest>(GetArenaNoVirtual());
    block_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.BlockMessage.block_req)
  return block_req_;
}
inline void BlockMessage::set_allocated_block_req(::tenon::block::protobuf::GetTxBlockRequest* block_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete block_req_;
  }
  if (block_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block_req, submessage_arena);
    }
    set_has_block_req();
  } else {
    clear_has_block_req();
  }
  block_req_ = block_req;
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.BlockMessage.block_req)
}

// optional .tenon.block.protobuf.GetTxBlockResponse block_res = 2;
inline bool BlockMessage::has_block_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockMessage::set_has_block_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockMessage::clear_has_block_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockMessage::clear_block_res() {
  if (block_res_ != NULL) block_res_->Clear();
  clear_has_block_res();
}
inline const ::tenon::block::protobuf::GetTxBlockResponse& BlockMessage::_internal_block_res() const {
  return *block_res_;
}
inline const ::tenon::block::protobuf::GetTxBlockResponse& BlockMessage::block_res() const {
  const ::tenon::block::protobuf::GetTxBlockResponse* p = block_res_;
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.BlockMessage.block_res)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::block::protobuf::GetTxBlockResponse*>(
      &::tenon::block::protobuf::_GetTxBlockResponse_default_instance_);
}
inline ::tenon::block::protobuf::GetTxBlockResponse* BlockMessage::release_block_res() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.BlockMessage.block_res)
  clear_has_block_res();
  ::tenon::block::protobuf::GetTxBlockResponse* temp = block_res_;
  block_res_ = NULL;
  return temp;
}
inline ::tenon::block::protobuf::GetTxBlockResponse* BlockMessage::mutable_block_res() {
  set_has_block_res();
  if (block_res_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::block::protobuf::GetTxBlockResponse>(GetArenaNoVirtual());
    block_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.BlockMessage.block_res)
  return block_res_;
}
inline void BlockMessage::set_allocated_block_res(::tenon::block::protobuf::GetTxBlockResponse* block_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete block_res_;
  }
  if (block_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block_res, submessage_arena);
    }
    set_has_block_res();
  } else {
    clear_has_block_res();
  }
  block_res_ = block_res;
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.BlockMessage.block_res)
}

// optional .tenon.block.protobuf.AccountHeightRequest height_req = 3;
inline bool BlockMessage::has_height_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockMessage::set_has_height_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockMessage::clear_has_height_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockMessage::clear_height_req() {
  if (height_req_ != NULL) height_req_->Clear();
  clear_has_height_req();
}
inline const ::tenon::block::protobuf::AccountHeightRequest& BlockMessage::_internal_height_req() const {
  return *height_req_;
}
inline const ::tenon::block::protobuf::AccountHeightRequest& BlockMessage::height_req() const {
  const ::tenon::block::protobuf::AccountHeightRequest* p = height_req_;
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.BlockMessage.height_req)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::block::protobuf::AccountHeightRequest*>(
      &::tenon::block::protobuf::_AccountHeightRequest_default_instance_);
}
inline ::tenon::block::protobuf::AccountHeightRequest* BlockMessage::release_height_req() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.BlockMessage.height_req)
  clear_has_height_req();
  ::tenon::block::protobuf::AccountHeightRequest* temp = height_req_;
  height_req_ = NULL;
  return temp;
}
inline ::tenon::block::protobuf::AccountHeightRequest* BlockMessage::mutable_height_req() {
  set_has_height_req();
  if (height_req_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::block::protobuf::AccountHeightRequest>(GetArenaNoVirtual());
    height_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.BlockMessage.height_req)
  return height_req_;
}
inline void BlockMessage::set_allocated_height_req(::tenon::block::protobuf::AccountHeightRequest* height_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete height_req_;
  }
  if (height_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      height_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, height_req, submessage_arena);
    }
    set_has_height_req();
  } else {
    clear_has_height_req();
  }
  height_req_ = height_req;
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.BlockMessage.height_req)
}

// optional .tenon.block.protobuf.AccountHeightResponse height_res = 4;
inline bool BlockMessage::has_height_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockMessage::set_has_height_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockMessage::clear_has_height_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockMessage::clear_height_res() {
  if (height_res_ != NULL) height_res_->Clear();
  clear_has_height_res();
}
inline const ::tenon::block::protobuf::AccountHeightResponse& BlockMessage::_internal_height_res() const {
  return *height_res_;
}
inline const ::tenon::block::protobuf::AccountHeightResponse& BlockMessage::height_res() const {
  const ::tenon::block::protobuf::AccountHeightResponse* p = height_res_;
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.BlockMessage.height_res)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::block::protobuf::AccountHeightResponse*>(
      &::tenon::block::protobuf::_AccountHeightResponse_default_instance_);
}
inline ::tenon::block::protobuf::AccountHeightResponse* BlockMessage::release_height_res() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.BlockMessage.height_res)
  clear_has_height_res();
  ::tenon::block::protobuf::AccountHeightResponse* temp = height_res_;
  height_res_ = NULL;
  return temp;
}
inline ::tenon::block::protobuf::AccountHeightResponse* BlockMessage::mutable_height_res() {
  set_has_height_res();
  if (height_res_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::block::protobuf::AccountHeightResponse>(GetArenaNoVirtual());
    height_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.BlockMessage.height_res)
  return height_res_;
}
inline void BlockMessage::set_allocated_height_res(::tenon::block::protobuf::AccountHeightResponse* height_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete height_res_;
  }
  if (height_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      height_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, height_res, submessage_arena);
    }
    set_has_height_res();
  } else {
    clear_has_height_res();
  }
  height_res_ = height_res;
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.BlockMessage.height_res)
}

// optional .tenon.block.protobuf.AccountAttrRequest acc_attr_req = 5;
inline bool BlockMessage::has_acc_attr_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockMessage::set_has_acc_attr_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockMessage::clear_has_acc_attr_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockMessage::clear_acc_attr_req() {
  if (acc_attr_req_ != NULL) acc_attr_req_->Clear();
  clear_has_acc_attr_req();
}
inline const ::tenon::block::protobuf::AccountAttrRequest& BlockMessage::_internal_acc_attr_req() const {
  return *acc_attr_req_;
}
inline const ::tenon::block::protobuf::AccountAttrRequest& BlockMessage::acc_attr_req() const {
  const ::tenon::block::protobuf::AccountAttrRequest* p = acc_attr_req_;
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.BlockMessage.acc_attr_req)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::block::protobuf::AccountAttrRequest*>(
      &::tenon::block::protobuf::_AccountAttrRequest_default_instance_);
}
inline ::tenon::block::protobuf::AccountAttrRequest* BlockMessage::release_acc_attr_req() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.BlockMessage.acc_attr_req)
  clear_has_acc_attr_req();
  ::tenon::block::protobuf::AccountAttrRequest* temp = acc_attr_req_;
  acc_attr_req_ = NULL;
  return temp;
}
inline ::tenon::block::protobuf::AccountAttrRequest* BlockMessage::mutable_acc_attr_req() {
  set_has_acc_attr_req();
  if (acc_attr_req_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::block::protobuf::AccountAttrRequest>(GetArenaNoVirtual());
    acc_attr_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.BlockMessage.acc_attr_req)
  return acc_attr_req_;
}
inline void BlockMessage::set_allocated_acc_attr_req(::tenon::block::protobuf::AccountAttrRequest* acc_attr_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete acc_attr_req_;
  }
  if (acc_attr_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acc_attr_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acc_attr_req, submessage_arena);
    }
    set_has_acc_attr_req();
  } else {
    clear_has_acc_attr_req();
  }
  acc_attr_req_ = acc_attr_req;
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.BlockMessage.acc_attr_req)
}

// optional .tenon.block.protobuf.AccountAttrResponse acc_attr_res = 6;
inline bool BlockMessage::has_acc_attr_res() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockMessage::set_has_acc_attr_res() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockMessage::clear_has_acc_attr_res() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockMessage::clear_acc_attr_res() {
  if (acc_attr_res_ != NULL) acc_attr_res_->Clear();
  clear_has_acc_attr_res();
}
inline const ::tenon::block::protobuf::AccountAttrResponse& BlockMessage::_internal_acc_attr_res() const {
  return *acc_attr_res_;
}
inline const ::tenon::block::protobuf::AccountAttrResponse& BlockMessage::acc_attr_res() const {
  const ::tenon::block::protobuf::AccountAttrResponse* p = acc_attr_res_;
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.BlockMessage.acc_attr_res)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::block::protobuf::AccountAttrResponse*>(
      &::tenon::block::protobuf::_AccountAttrResponse_default_instance_);
}
inline ::tenon::block::protobuf::AccountAttrResponse* BlockMessage::release_acc_attr_res() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.BlockMessage.acc_attr_res)
  clear_has_acc_attr_res();
  ::tenon::block::protobuf::AccountAttrResponse* temp = acc_attr_res_;
  acc_attr_res_ = NULL;
  return temp;
}
inline ::tenon::block::protobuf::AccountAttrResponse* BlockMessage::mutable_acc_attr_res() {
  set_has_acc_attr_res();
  if (acc_attr_res_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::block::protobuf::AccountAttrResponse>(GetArenaNoVirtual());
    acc_attr_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.BlockMessage.acc_attr_res)
  return acc_attr_res_;
}
inline void BlockMessage::set_allocated_acc_attr_res(::tenon::block::protobuf::AccountAttrResponse* acc_attr_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete acc_attr_res_;
  }
  if (acc_attr_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acc_attr_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acc_attr_res, submessage_arena);
    }
    set_has_acc_attr_res();
  } else {
    clear_has_acc_attr_res();
  }
  acc_attr_res_ = acc_attr_res;
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.BlockMessage.acc_attr_res)
}

// optional .tenon.block.protobuf.UpdateVpnCountRequest up_vpn_req = 7;
inline bool BlockMessage::has_up_vpn_req() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockMessage::set_has_up_vpn_req() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlockMessage::clear_has_up_vpn_req() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlockMessage::clear_up_vpn_req() {
  if (up_vpn_req_ != NULL) up_vpn_req_->Clear();
  clear_has_up_vpn_req();
}
inline const ::tenon::block::protobuf::UpdateVpnCountRequest& BlockMessage::_internal_up_vpn_req() const {
  return *up_vpn_req_;
}
inline const ::tenon::block::protobuf::UpdateVpnCountRequest& BlockMessage::up_vpn_req() const {
  const ::tenon::block::protobuf::UpdateVpnCountRequest* p = up_vpn_req_;
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.BlockMessage.up_vpn_req)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::block::protobuf::UpdateVpnCountRequest*>(
      &::tenon::block::protobuf::_UpdateVpnCountRequest_default_instance_);
}
inline ::tenon::block::protobuf::UpdateVpnCountRequest* BlockMessage::release_up_vpn_req() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.BlockMessage.up_vpn_req)
  clear_has_up_vpn_req();
  ::tenon::block::protobuf::UpdateVpnCountRequest* temp = up_vpn_req_;
  up_vpn_req_ = NULL;
  return temp;
}
inline ::tenon::block::protobuf::UpdateVpnCountRequest* BlockMessage::mutable_up_vpn_req() {
  set_has_up_vpn_req();
  if (up_vpn_req_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::block::protobuf::UpdateVpnCountRequest>(GetArenaNoVirtual());
    up_vpn_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.BlockMessage.up_vpn_req)
  return up_vpn_req_;
}
inline void BlockMessage::set_allocated_up_vpn_req(::tenon::block::protobuf::UpdateVpnCountRequest* up_vpn_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete up_vpn_req_;
  }
  if (up_vpn_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      up_vpn_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, up_vpn_req, submessage_arena);
    }
    set_has_up_vpn_req();
  } else {
    clear_has_up_vpn_req();
  }
  up_vpn_req_ = up_vpn_req;
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.BlockMessage.up_vpn_req)
}

// optional .tenon.block.protobuf.UpdateVpnCountResponse up_vpn_res = 8;
inline bool BlockMessage::has_up_vpn_res() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlockMessage::set_has_up_vpn_res() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlockMessage::clear_has_up_vpn_res() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlockMessage::clear_up_vpn_res() {
  if (up_vpn_res_ != NULL) up_vpn_res_->Clear();
  clear_has_up_vpn_res();
}
inline const ::tenon::block::protobuf::UpdateVpnCountResponse& BlockMessage::_internal_up_vpn_res() const {
  return *up_vpn_res_;
}
inline const ::tenon::block::protobuf::UpdateVpnCountResponse& BlockMessage::up_vpn_res() const {
  const ::tenon::block::protobuf::UpdateVpnCountResponse* p = up_vpn_res_;
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.BlockMessage.up_vpn_res)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::block::protobuf::UpdateVpnCountResponse*>(
      &::tenon::block::protobuf::_UpdateVpnCountResponse_default_instance_);
}
inline ::tenon::block::protobuf::UpdateVpnCountResponse* BlockMessage::release_up_vpn_res() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.BlockMessage.up_vpn_res)
  clear_has_up_vpn_res();
  ::tenon::block::protobuf::UpdateVpnCountResponse* temp = up_vpn_res_;
  up_vpn_res_ = NULL;
  return temp;
}
inline ::tenon::block::protobuf::UpdateVpnCountResponse* BlockMessage::mutable_up_vpn_res() {
  set_has_up_vpn_res();
  if (up_vpn_res_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::block::protobuf::UpdateVpnCountResponse>(GetArenaNoVirtual());
    up_vpn_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.BlockMessage.up_vpn_res)
  return up_vpn_res_;
}
inline void BlockMessage::set_allocated_up_vpn_res(::tenon::block::protobuf::UpdateVpnCountResponse* up_vpn_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete up_vpn_res_;
  }
  if (up_vpn_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      up_vpn_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, up_vpn_res, submessage_arena);
    }
    set_has_up_vpn_res();
  } else {
    clear_has_up_vpn_res();
  }
  up_vpn_res_ = up_vpn_res;
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.BlockMessage.up_vpn_res)
}

// optional .tenon.block.protobuf.GetAccountInitInfoRequest account_init_req = 9;
inline bool BlockMessage::has_account_init_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlockMessage::set_has_account_init_req() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlockMessage::clear_has_account_init_req() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlockMessage::clear_account_init_req() {
  if (account_init_req_ != NULL) account_init_req_->Clear();
  clear_has_account_init_req();
}
inline const ::tenon::block::protobuf::GetAccountInitInfoRequest& BlockMessage::_internal_account_init_req() const {
  return *account_init_req_;
}
inline const ::tenon::block::protobuf::GetAccountInitInfoRequest& BlockMessage::account_init_req() const {
  const ::tenon::block::protobuf::GetAccountInitInfoRequest* p = account_init_req_;
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.BlockMessage.account_init_req)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::block::protobuf::GetAccountInitInfoRequest*>(
      &::tenon::block::protobuf::_GetAccountInitInfoRequest_default_instance_);
}
inline ::tenon::block::protobuf::GetAccountInitInfoRequest* BlockMessage::release_account_init_req() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.BlockMessage.account_init_req)
  clear_has_account_init_req();
  ::tenon::block::protobuf::GetAccountInitInfoRequest* temp = account_init_req_;
  account_init_req_ = NULL;
  return temp;
}
inline ::tenon::block::protobuf::GetAccountInitInfoRequest* BlockMessage::mutable_account_init_req() {
  set_has_account_init_req();
  if (account_init_req_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::block::protobuf::GetAccountInitInfoRequest>(GetArenaNoVirtual());
    account_init_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.BlockMessage.account_init_req)
  return account_init_req_;
}
inline void BlockMessage::set_allocated_account_init_req(::tenon::block::protobuf::GetAccountInitInfoRequest* account_init_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete account_init_req_;
  }
  if (account_init_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      account_init_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, account_init_req, submessage_arena);
    }
    set_has_account_init_req();
  } else {
    clear_has_account_init_req();
  }
  account_init_req_ = account_init_req;
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.BlockMessage.account_init_req)
}

// optional .tenon.block.protobuf.GetAccountInitInfoResponse account_init_res = 10;
inline bool BlockMessage::has_account_init_res() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BlockMessage::set_has_account_init_res() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BlockMessage::clear_has_account_init_res() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BlockMessage::clear_account_init_res() {
  if (account_init_res_ != NULL) account_init_res_->Clear();
  clear_has_account_init_res();
}
inline const ::tenon::block::protobuf::GetAccountInitInfoResponse& BlockMessage::_internal_account_init_res() const {
  return *account_init_res_;
}
inline const ::tenon::block::protobuf::GetAccountInitInfoResponse& BlockMessage::account_init_res() const {
  const ::tenon::block::protobuf::GetAccountInitInfoResponse* p = account_init_res_;
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.BlockMessage.account_init_res)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::block::protobuf::GetAccountInitInfoResponse*>(
      &::tenon::block::protobuf::_GetAccountInitInfoResponse_default_instance_);
}
inline ::tenon::block::protobuf::GetAccountInitInfoResponse* BlockMessage::release_account_init_res() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.BlockMessage.account_init_res)
  clear_has_account_init_res();
  ::tenon::block::protobuf::GetAccountInitInfoResponse* temp = account_init_res_;
  account_init_res_ = NULL;
  return temp;
}
inline ::tenon::block::protobuf::GetAccountInitInfoResponse* BlockMessage::mutable_account_init_res() {
  set_has_account_init_res();
  if (account_init_res_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::block::protobuf::GetAccountInitInfoResponse>(GetArenaNoVirtual());
    account_init_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.BlockMessage.account_init_res)
  return account_init_res_;
}
inline void BlockMessage::set_allocated_account_init_res(::tenon::block::protobuf::GetAccountInitInfoResponse* account_init_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete account_init_res_;
  }
  if (account_init_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      account_init_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, account_init_res, submessage_arena);
    }
    set_has_account_init_res();
  } else {
    clear_has_account_init_res();
  }
  account_init_res_ = account_init_res;
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.BlockMessage.account_init_res)
}

// optional .tenon.block.protobuf.UpdateVpnActiveRequest vpn_active_req = 11;
inline bool BlockMessage::has_vpn_active_req() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BlockMessage::set_has_vpn_active_req() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BlockMessage::clear_has_vpn_active_req() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BlockMessage::clear_vpn_active_req() {
  if (vpn_active_req_ != NULL) vpn_active_req_->Clear();
  clear_has_vpn_active_req();
}
inline const ::tenon::block::protobuf::UpdateVpnActiveRequest& BlockMessage::_internal_vpn_active_req() const {
  return *vpn_active_req_;
}
inline const ::tenon::block::protobuf::UpdateVpnActiveRequest& BlockMessage::vpn_active_req() const {
  const ::tenon::block::protobuf::UpdateVpnActiveRequest* p = vpn_active_req_;
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.BlockMessage.vpn_active_req)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::block::protobuf::UpdateVpnActiveRequest*>(
      &::tenon::block::protobuf::_UpdateVpnActiveRequest_default_instance_);
}
inline ::tenon::block::protobuf::UpdateVpnActiveRequest* BlockMessage::release_vpn_active_req() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.BlockMessage.vpn_active_req)
  clear_has_vpn_active_req();
  ::tenon::block::protobuf::UpdateVpnActiveRequest* temp = vpn_active_req_;
  vpn_active_req_ = NULL;
  return temp;
}
inline ::tenon::block::protobuf::UpdateVpnActiveRequest* BlockMessage::mutable_vpn_active_req() {
  set_has_vpn_active_req();
  if (vpn_active_req_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::block::protobuf::UpdateVpnActiveRequest>(GetArenaNoVirtual());
    vpn_active_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.BlockMessage.vpn_active_req)
  return vpn_active_req_;
}
inline void BlockMessage::set_allocated_vpn_active_req(::tenon::block::protobuf::UpdateVpnActiveRequest* vpn_active_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vpn_active_req_;
  }
  if (vpn_active_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vpn_active_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vpn_active_req, submessage_arena);
    }
    set_has_vpn_active_req();
  } else {
    clear_has_vpn_active_req();
  }
  vpn_active_req_ = vpn_active_req;
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.BlockMessage.vpn_active_req)
}

// optional .tenon.block.protobuf.AdRewardRequest ad_reward_req = 12;
inline bool BlockMessage::has_ad_reward_req() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BlockMessage::set_has_ad_reward_req() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BlockMessage::clear_has_ad_reward_req() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BlockMessage::clear_ad_reward_req() {
  if (ad_reward_req_ != NULL) ad_reward_req_->Clear();
  clear_has_ad_reward_req();
}
inline const ::tenon::block::protobuf::AdRewardRequest& BlockMessage::_internal_ad_reward_req() const {
  return *ad_reward_req_;
}
inline const ::tenon::block::protobuf::AdRewardRequest& BlockMessage::ad_reward_req() const {
  const ::tenon::block::protobuf::AdRewardRequest* p = ad_reward_req_;
  // @@protoc_insertion_point(field_get:tenon.block.protobuf.BlockMessage.ad_reward_req)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::block::protobuf::AdRewardRequest*>(
      &::tenon::block::protobuf::_AdRewardRequest_default_instance_);
}
inline ::tenon::block::protobuf::AdRewardRequest* BlockMessage::release_ad_reward_req() {
  // @@protoc_insertion_point(field_release:tenon.block.protobuf.BlockMessage.ad_reward_req)
  clear_has_ad_reward_req();
  ::tenon::block::protobuf::AdRewardRequest* temp = ad_reward_req_;
  ad_reward_req_ = NULL;
  return temp;
}
inline ::tenon::block::protobuf::AdRewardRequest* BlockMessage::mutable_ad_reward_req() {
  set_has_ad_reward_req();
  if (ad_reward_req_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::block::protobuf::AdRewardRequest>(GetArenaNoVirtual());
    ad_reward_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.block.protobuf.BlockMessage.ad_reward_req)
  return ad_reward_req_;
}
inline void BlockMessage::set_allocated_ad_reward_req(::tenon::block::protobuf::AdRewardRequest* ad_reward_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ad_reward_req_;
  }
  if (ad_reward_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ad_reward_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ad_reward_req, submessage_arena);
    }
    set_has_ad_reward_req();
  } else {
    clear_has_ad_reward_req();
  }
  ad_reward_req_ = ad_reward_req;
  // @@protoc_insertion_point(field_set_allocated:tenon.block.protobuf.BlockMessage.ad_reward_req)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace block
}  // namespace tenon

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_block_2eproto
