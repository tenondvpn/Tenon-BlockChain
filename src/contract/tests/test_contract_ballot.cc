#include <stdlib.h>
#include <math.h>

#include <iostream>
#include <vector>

#include <gtest/gtest.h>

#define private public
#include "block/block_utils.h"
#include "client/vpn_client.h"
#include "common/encode.h"
#include "contract/contract_manager.h"
#include "contract/call_parameters.h"
#include "contract/contract_modexp.h"
#include "ip/ip_utils.h"
#include "ip/ip_with_country.h"
#include "tvm/tvm_utils.h"

namespace tenon {

namespace bignum {

namespace test {

static const std::string ballot_str = common::Encode::HexDecode(std::string("6080604052348015620000125760006000fd5b50604051620014a0380380620014a0833981810160405281019062000038919062000299565b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160016000506000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000506000016000508190909055506000600090505b8151811015620001ca576002600050604051806040016040528084848151811015156200014c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000191681526020016000815260200150908060018154018082558091505060019003906000526020600020906002020160005b909190919091506000820151816000016000509060001916905560208201518160010160005090905550505b8080620001c19062000389565b915050620000f6565b505b506200046b566200046a565b6000620001ef620001e9846200030c565b620002e1565b90508083825260208201905082856020860282011115620002105760006000fd5b60005b8581101562000245578162000229888262000281565b8452602084019350602083019250505b60018101905062000213565b5050505b9392505050565b600082601f8301121515620002655760006000fd5b815162000277848260208601620001d8565b9150505b92915050565b60008151905062000292816200044c565b5b92915050565b600060208284031215620002ad5760006000fd5b600082015167ffffffffffffffff811115620002c95760006000fd5b620002d78482850162000250565b9150505b92915050565b6000620002ed62000301565b9050620002fb828262000352565b5b919050565b600060405190505b90565b600067ffffffffffffffff8211156200032a576200032962000409565b5b6020820290506020810190505b919050565b60008190505b919050565b60008190505b919050565b6200035d826200043a565b810181811067ffffffffffffffff821117156200037f576200037e62000409565b5b80604052505b5050565b6000620003968262000347565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620003cc57620003cb620003d8565b5b6001820190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b565b6000601f19601f83011690505b919050565b62000457816200033c565b81141515620004665760006000fd5b5b50565b5b611025806200047b6000396000f3fe60806040523480156100115760006000fd5b506004361061008d5760003560e01c8063609ff1bd1161005c578063609ff1bd1461011a5780639e7b8d6114610138578063a3ec138d14610154578063e2ba53f0146101875761008d565b80630121b93f14610093578063013cf08b146100af5780632e4176cf146100e05780635c19a95c146100fe5761008d565b60006000fd5b6100ad60048036038101906100a89190610afd565b6101a5565b005b6100c960048036038101906100c49190610afd565b610294565b6040516100d7929190610c54565b60405180910390f35b6100e86102d2565b6040516100f59190610c1c565b60405180910390f35b61011860048036038101906101139190610ad2565b6102f8565b005b6101226106f7565b60405161012f9190610d23565b60405180910390f35b610152600480360381019061014d9190610ad2565b6107f1565b005b61016e60048036038101906101699190610ad2565b6109cd565b60405161017e9493929190610d3f565b60405180910390f35b61018f610a33565b60405161019c9190610c38565b60405180910390f35b6000600160005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050905060018160010160006101000a81548160ff02191690831515021790555081816002016000508190909055508060000160005054600260005083815481101515610260577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b50600101600082828250546102869190610d97565b925050819090905550505b50565b600260005081815481106102a757600080fd5b906000526020600020906002020160005b915090508060000160005054908060010160005054905082565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090508060010160009054906101000a900460ff16151515610395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038c90610c7e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fd90610d02565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561058857600160005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915081503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a90610cc0565b60405180910390fd5b610407565b60018160010160006101000a81548160ff021916908315150217905550818160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090508060010160009054906101000a900460ff16156106ca57816000016000505460026000508260020160005054815481101515610696577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b50600101600082828250546106bc9190610d97565b9250508190909055506106f1565b816000016000505481600001600082828250546106e79190610d97565b9250508190909055505b50505b50565b60006000600090506000600090505b6002600050805490508110156107eb5781600260005082815481101515610756577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b506001016000505411156107d7576002600050818154811015156107b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b50600101600050549150815080925082505b5b80806107e390610e45565b915050610706565b50505b90565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087a90610c9f565b60405180910390fd5b600160005060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160009054906101000a900460ff1615151561091b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091290610ce1565b60405180910390fd5b6000600160005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001600050541415156109765760006000fd5b6001600160005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000506000016000508190909055505b50565b60016000506020528060005260406000206000915090508060000160005054908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160005054905084565b60006002600050610a486106f763ffffffff16565b815481101515610a81577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b5060000160005054905080505b9056610fee565b600081359050610ab581610fb8565b5b92915050565b600081359050610acb81610fd3565b5b92915050565b600060208284031215610ae55760006000fd5b6000610af384828501610aa6565b9150505b92915050565b600060208284031215610b105760006000fd5b6000610b1e84828501610abc565b9150505b92915050565b610b3181610dee565b82525b5050565b610b4181610e01565b82525b5050565b610b5181610e0e565b82525b5050565b6000610b65601283610d85565b9150610b7082610ec0565b6020820190505b919050565b6000610b89602883610d85565b9150610b9482610eea565b6040820190505b919050565b6000610bad601983610d85565b9150610bb882610f3a565b6020820190505b919050565b6000610bd1601883610d85565b9150610bdc82610f64565b6020820190505b919050565b6000610bf5601e83610d85565b9150610c0082610f8e565b6020820190505b919050565b610c1581610e3a565b82525b5050565b6000602082019050610c316000830184610b28565b5b92915050565b6000602082019050610c4d6000830184610b48565b5b92915050565b6000604082019050610c696000830185610b48565b610c766020830184610c0c565b5b9392505050565b60006020820190508181036000830152610c9781610b58565b90505b919050565b60006020820190508181036000830152610cb881610b7c565b90505b919050565b60006020820190508181036000830152610cd981610ba0565b90505b919050565b60006020820190508181036000830152610cfa81610bc4565b90505b919050565b60006020820190508181036000830152610d1b81610be8565b90505b919050565b6000602082019050610d386000830184610c0c565b5b92915050565b6000608082019050610d546000830187610c0c565b610d616020830186610b38565b610d6e6040830185610b28565b610d7b6060830184610c0c565b5b95945050505050565b60008282526020820190505b92915050565b6000610da282610e3a565b9150610dad83610e3a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610de257610de1610e8f565b5b82820190505b92915050565b6000610df982610e19565b90505b919050565b600081151590505b919050565b60008190505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b6000610e5082610e3a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e8357610e82610e8f565b5b6001820190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b7f596f7520616c726561647920766f7465642e000000000000000000000000000060008201525b50565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e00000000000000000000000000000000000000000000000060208201525b50565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e0000000000000060008201525b50565b7f54686520766f74657220616c726561647920766f7465642e000000000000000060008201525b50565b7f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e000060008201525b50565b610fc181610dee565b81141515610fcf5760006000fd5b5b50565b610fdc81610e3a565b81141515610fea5760006000fd5b5b50565bfea26469706673582212208a11da71baf451a53adabf2049084a2e24ceea212a4f9eae8a39afacdcc7453d64736f6c63430008030033") + "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8704348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8701348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8702");
class TestContractBallot : public testing::Test {
public:
    static void SetUpTestCase() {
        tenon::common::Config conf;
        ASSERT_TRUE(conf.Init("./conf/tenon.conf"));
        std::string db_path;
        conf.Get("db", "path", db_path);
        auto st = tenon::db::Db::Instance()->Init(db_path);
        ASSERT_TRUE(st);
        std::string local_ip;
        conf.Get("tenon", "local_ip", local_ip);
        uint16_t local_port;
        conf.Get("tenon", "local_port", local_port);
        std::string bootstrap;
        conf.Get("tenon", "bootstrap", bootstrap);
        bool show_cmd;
        conf.Get("tenon", "show_cmd", show_cmd);
        bool run_tx = false;
        conf.Get("tenon", "run_tx", run_tx);
        tenon::common::SignalRegister();
        ASSERT_EQ(tenon::ip::IpWithCountry::Instance()->Init(
            "./conf/geolite.conf",
            "./conf/geo_country.conf"), tenon::ip::kIpSuccess);
        auto int_res = tenon::client::VpnClient::Instance()->Init(
            local_ip,
            2,
            bootstrap,
            "./conf/",
            "3.0.0",
            "");
        ASSERT_NE(int_res, "ERROR");
    }

    static void TearDownTestCase() {
    }

    virtual void SetUp() {
    }

    virtual void TearDown() {
    }
};

TEST_F(TestContractBallot, Ballot) {
    std::string contract_address;
    client::VpnClient::Instance()->CreateContract(ballot_str, 0, 10000000, &contract_address);
}

}  // namespace test

}  // namespace bignum

}  // namespace tenon
