// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bls.proto

#ifndef PROTOBUF_INCLUDED_bls_2eproto
#define PROTOBUF_INCLUDED_bls_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_bls_2eproto 

namespace protobuf_bls_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_bls_2eproto
namespace tenon {
namespace bls {
namespace protobuf {
class AgainstParticipant;
class AgainstParticipantDefaultTypeInternal;
extern AgainstParticipantDefaultTypeInternal _AgainstParticipant_default_instance_;
class BlsMessage;
class BlsMessageDefaultTypeInternal;
extern BlsMessageDefaultTypeInternal _BlsMessage_default_instance_;
class BlsPublicKey;
class BlsPublicKeyDefaultTypeInternal;
extern BlsPublicKeyDefaultTypeInternal _BlsPublicKey_default_instance_;
class FinishBroadcast;
class FinishBroadcastDefaultTypeInternal;
extern FinishBroadcastDefaultTypeInternal _FinishBroadcast_default_instance_;
class SwapSecKeyReq;
class SwapSecKeyReqDefaultTypeInternal;
extern SwapSecKeyReqDefaultTypeInternal _SwapSecKeyReq_default_instance_;
class VerifyVecBrdReq;
class VerifyVecBrdReqDefaultTypeInternal;
extern VerifyVecBrdReqDefaultTypeInternal _VerifyVecBrdReq_default_instance_;
class VerifyVecBrdRes;
class VerifyVecBrdResDefaultTypeInternal;
extern VerifyVecBrdResDefaultTypeInternal _VerifyVecBrdRes_default_instance_;
class VerifyVecItem;
class VerifyVecItemDefaultTypeInternal;
extern VerifyVecItemDefaultTypeInternal _VerifyVecItem_default_instance_;
}  // namespace protobuf
}  // namespace bls
}  // namespace tenon
namespace google {
namespace protobuf {
template<> ::tenon::bls::protobuf::AgainstParticipant* Arena::CreateMaybeMessage<::tenon::bls::protobuf::AgainstParticipant>(Arena*);
template<> ::tenon::bls::protobuf::BlsMessage* Arena::CreateMaybeMessage<::tenon::bls::protobuf::BlsMessage>(Arena*);
template<> ::tenon::bls::protobuf::BlsPublicKey* Arena::CreateMaybeMessage<::tenon::bls::protobuf::BlsPublicKey>(Arena*);
template<> ::tenon::bls::protobuf::FinishBroadcast* Arena::CreateMaybeMessage<::tenon::bls::protobuf::FinishBroadcast>(Arena*);
template<> ::tenon::bls::protobuf::SwapSecKeyReq* Arena::CreateMaybeMessage<::tenon::bls::protobuf::SwapSecKeyReq>(Arena*);
template<> ::tenon::bls::protobuf::VerifyVecBrdReq* Arena::CreateMaybeMessage<::tenon::bls::protobuf::VerifyVecBrdReq>(Arena*);
template<> ::tenon::bls::protobuf::VerifyVecBrdRes* Arena::CreateMaybeMessage<::tenon::bls::protobuf::VerifyVecBrdRes>(Arena*);
template<> ::tenon::bls::protobuf::VerifyVecItem* Arena::CreateMaybeMessage<::tenon::bls::protobuf::VerifyVecItem>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tenon {
namespace bls {
namespace protobuf {

// ===================================================================

class VerifyVecItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bls.protobuf.VerifyVecItem) */ {
 public:
  VerifyVecItem();
  virtual ~VerifyVecItem();

  VerifyVecItem(const VerifyVecItem& from);

  inline VerifyVecItem& operator=(const VerifyVecItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerifyVecItem(VerifyVecItem&& from) noexcept
    : VerifyVecItem() {
    *this = ::std::move(from);
  }

  inline VerifyVecItem& operator=(VerifyVecItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyVecItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyVecItem* internal_default_instance() {
    return reinterpret_cast<const VerifyVecItem*>(
               &_VerifyVecItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VerifyVecItem* other);
  friend void swap(VerifyVecItem& a, VerifyVecItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerifyVecItem* New() const final {
    return CreateMaybeMessage<VerifyVecItem>(NULL);
  }

  VerifyVecItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerifyVecItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerifyVecItem& from);
  void MergeFrom(const VerifyVecItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyVecItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes x_c0 = 1;
  bool has_x_c0() const;
  void clear_x_c0();
  static const int kXC0FieldNumber = 1;
  const ::std::string& x_c0() const;
  void set_x_c0(const ::std::string& value);
  #if LANG_CXX11
  void set_x_c0(::std::string&& value);
  #endif
  void set_x_c0(const char* value);
  void set_x_c0(const void* value, size_t size);
  ::std::string* mutable_x_c0();
  ::std::string* release_x_c0();
  void set_allocated_x_c0(::std::string* x_c0);

  // optional bytes x_c1 = 2;
  bool has_x_c1() const;
  void clear_x_c1();
  static const int kXC1FieldNumber = 2;
  const ::std::string& x_c1() const;
  void set_x_c1(const ::std::string& value);
  #if LANG_CXX11
  void set_x_c1(::std::string&& value);
  #endif
  void set_x_c1(const char* value);
  void set_x_c1(const void* value, size_t size);
  ::std::string* mutable_x_c1();
  ::std::string* release_x_c1();
  void set_allocated_x_c1(::std::string* x_c1);

  // optional bytes y_c0 = 3;
  bool has_y_c0() const;
  void clear_y_c0();
  static const int kYC0FieldNumber = 3;
  const ::std::string& y_c0() const;
  void set_y_c0(const ::std::string& value);
  #if LANG_CXX11
  void set_y_c0(::std::string&& value);
  #endif
  void set_y_c0(const char* value);
  void set_y_c0(const void* value, size_t size);
  ::std::string* mutable_y_c0();
  ::std::string* release_y_c0();
  void set_allocated_y_c0(::std::string* y_c0);

  // optional bytes y_c1 = 4;
  bool has_y_c1() const;
  void clear_y_c1();
  static const int kYC1FieldNumber = 4;
  const ::std::string& y_c1() const;
  void set_y_c1(const ::std::string& value);
  #if LANG_CXX11
  void set_y_c1(::std::string&& value);
  #endif
  void set_y_c1(const char* value);
  void set_y_c1(const void* value, size_t size);
  ::std::string* mutable_y_c1();
  ::std::string* release_y_c1();
  void set_allocated_y_c1(::std::string* y_c1);

  // optional bytes z_c0 = 5;
  bool has_z_c0() const;
  void clear_z_c0();
  static const int kZC0FieldNumber = 5;
  const ::std::string& z_c0() const;
  void set_z_c0(const ::std::string& value);
  #if LANG_CXX11
  void set_z_c0(::std::string&& value);
  #endif
  void set_z_c0(const char* value);
  void set_z_c0(const void* value, size_t size);
  ::std::string* mutable_z_c0();
  ::std::string* release_z_c0();
  void set_allocated_z_c0(::std::string* z_c0);

  // optional bytes z_c1 = 6;
  bool has_z_c1() const;
  void clear_z_c1();
  static const int kZC1FieldNumber = 6;
  const ::std::string& z_c1() const;
  void set_z_c1(const ::std::string& value);
  #if LANG_CXX11
  void set_z_c1(::std::string&& value);
  #endif
  void set_z_c1(const char* value);
  void set_z_c1(const void* value, size_t size);
  ::std::string* mutable_z_c1();
  ::std::string* release_z_c1();
  void set_allocated_z_c1(::std::string* z_c1);

  // @@protoc_insertion_point(class_scope:tenon.bls.protobuf.VerifyVecItem)
 private:
  void set_has_x_c0();
  void clear_has_x_c0();
  void set_has_x_c1();
  void clear_has_x_c1();
  void set_has_y_c0();
  void clear_has_y_c0();
  void set_has_y_c1();
  void clear_has_y_c1();
  void set_has_z_c0();
  void clear_has_z_c0();
  void set_has_z_c1();
  void clear_has_z_c1();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr x_c0_;
  ::google::protobuf::internal::ArenaStringPtr x_c1_;
  ::google::protobuf::internal::ArenaStringPtr y_c0_;
  ::google::protobuf::internal::ArenaStringPtr y_c1_;
  ::google::protobuf::internal::ArenaStringPtr z_c0_;
  ::google::protobuf::internal::ArenaStringPtr z_c1_;
  friend struct ::protobuf_bls_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlsPublicKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bls.protobuf.BlsPublicKey) */ {
 public:
  BlsPublicKey();
  virtual ~BlsPublicKey();

  BlsPublicKey(const BlsPublicKey& from);

  inline BlsPublicKey& operator=(const BlsPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlsPublicKey(BlsPublicKey&& from) noexcept
    : BlsPublicKey() {
    *this = ::std::move(from);
  }

  inline BlsPublicKey& operator=(BlsPublicKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlsPublicKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlsPublicKey* internal_default_instance() {
    return reinterpret_cast<const BlsPublicKey*>(
               &_BlsPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BlsPublicKey* other);
  friend void swap(BlsPublicKey& a, BlsPublicKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlsPublicKey* New() const final {
    return CreateMaybeMessage<BlsPublicKey>(NULL);
  }

  BlsPublicKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlsPublicKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlsPublicKey& from);
  void MergeFrom(const BlsPublicKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlsPublicKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes x_c0 = 1;
  bool has_x_c0() const;
  void clear_x_c0();
  static const int kXC0FieldNumber = 1;
  const ::std::string& x_c0() const;
  void set_x_c0(const ::std::string& value);
  #if LANG_CXX11
  void set_x_c0(::std::string&& value);
  #endif
  void set_x_c0(const char* value);
  void set_x_c0(const void* value, size_t size);
  ::std::string* mutable_x_c0();
  ::std::string* release_x_c0();
  void set_allocated_x_c0(::std::string* x_c0);

  // optional bytes x_c1 = 2;
  bool has_x_c1() const;
  void clear_x_c1();
  static const int kXC1FieldNumber = 2;
  const ::std::string& x_c1() const;
  void set_x_c1(const ::std::string& value);
  #if LANG_CXX11
  void set_x_c1(::std::string&& value);
  #endif
  void set_x_c1(const char* value);
  void set_x_c1(const void* value, size_t size);
  ::std::string* mutable_x_c1();
  ::std::string* release_x_c1();
  void set_allocated_x_c1(::std::string* x_c1);

  // optional bytes y_c0 = 3;
  bool has_y_c0() const;
  void clear_y_c0();
  static const int kYC0FieldNumber = 3;
  const ::std::string& y_c0() const;
  void set_y_c0(const ::std::string& value);
  #if LANG_CXX11
  void set_y_c0(::std::string&& value);
  #endif
  void set_y_c0(const char* value);
  void set_y_c0(const void* value, size_t size);
  ::std::string* mutable_y_c0();
  ::std::string* release_y_c0();
  void set_allocated_y_c0(::std::string* y_c0);

  // optional bytes y_c1 = 4;
  bool has_y_c1() const;
  void clear_y_c1();
  static const int kYC1FieldNumber = 4;
  const ::std::string& y_c1() const;
  void set_y_c1(const ::std::string& value);
  #if LANG_CXX11
  void set_y_c1(::std::string&& value);
  #endif
  void set_y_c1(const char* value);
  void set_y_c1(const void* value, size_t size);
  ::std::string* mutable_y_c1();
  ::std::string* release_y_c1();
  void set_allocated_y_c1(::std::string* y_c1);

  // @@protoc_insertion_point(class_scope:tenon.bls.protobuf.BlsPublicKey)
 private:
  void set_has_x_c0();
  void clear_has_x_c0();
  void set_has_x_c1();
  void clear_has_x_c1();
  void set_has_y_c0();
  void clear_has_y_c0();
  void set_has_y_c1();
  void clear_has_y_c1();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr x_c0_;
  ::google::protobuf::internal::ArenaStringPtr x_c1_;
  ::google::protobuf::internal::ArenaStringPtr y_c0_;
  ::google::protobuf::internal::ArenaStringPtr y_c1_;
  friend struct ::protobuf_bls_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyVecBrdReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bls.protobuf.VerifyVecBrdReq) */ {
 public:
  VerifyVecBrdReq();
  virtual ~VerifyVecBrdReq();

  VerifyVecBrdReq(const VerifyVecBrdReq& from);

  inline VerifyVecBrdReq& operator=(const VerifyVecBrdReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerifyVecBrdReq(VerifyVecBrdReq&& from) noexcept
    : VerifyVecBrdReq() {
    *this = ::std::move(from);
  }

  inline VerifyVecBrdReq& operator=(VerifyVecBrdReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyVecBrdReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyVecBrdReq* internal_default_instance() {
    return reinterpret_cast<const VerifyVecBrdReq*>(
               &_VerifyVecBrdReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(VerifyVecBrdReq* other);
  friend void swap(VerifyVecBrdReq& a, VerifyVecBrdReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerifyVecBrdReq* New() const final {
    return CreateMaybeMessage<VerifyVecBrdReq>(NULL);
  }

  VerifyVecBrdReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerifyVecBrdReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerifyVecBrdReq& from);
  void MergeFrom(const VerifyVecBrdReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyVecBrdReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tenon.bls.protobuf.VerifyVecItem verify_vec = 1;
  int verify_vec_size() const;
  void clear_verify_vec();
  static const int kVerifyVecFieldNumber = 1;
  ::tenon::bls::protobuf::VerifyVecItem* mutable_verify_vec(int index);
  ::google::protobuf::RepeatedPtrField< ::tenon::bls::protobuf::VerifyVecItem >*
      mutable_verify_vec();
  const ::tenon::bls::protobuf::VerifyVecItem& verify_vec(int index) const;
  ::tenon::bls::protobuf::VerifyVecItem* add_verify_vec();
  const ::google::protobuf::RepeatedPtrField< ::tenon::bls::protobuf::VerifyVecItem >&
      verify_vec() const;

  // optional bytes public_ip = 2;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 2;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const void* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional uint32 public_port = 3;
  bool has_public_port() const;
  void clear_public_port();
  static const int kPublicPortFieldNumber = 3;
  ::google::protobuf::uint32 public_port() const;
  void set_public_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.bls.protobuf.VerifyVecBrdReq)
 private:
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_public_port();
  void clear_has_public_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tenon::bls::protobuf::VerifyVecItem > verify_vec_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  ::google::protobuf::uint32 public_port_;
  friend struct ::protobuf_bls_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyVecBrdRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bls.protobuf.VerifyVecBrdRes) */ {
 public:
  VerifyVecBrdRes();
  virtual ~VerifyVecBrdRes();

  VerifyVecBrdRes(const VerifyVecBrdRes& from);

  inline VerifyVecBrdRes& operator=(const VerifyVecBrdRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerifyVecBrdRes(VerifyVecBrdRes&& from) noexcept
    : VerifyVecBrdRes() {
    *this = ::std::move(from);
  }

  inline VerifyVecBrdRes& operator=(VerifyVecBrdRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyVecBrdRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyVecBrdRes* internal_default_instance() {
    return reinterpret_cast<const VerifyVecBrdRes*>(
               &_VerifyVecBrdRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(VerifyVecBrdRes* other);
  friend void swap(VerifyVecBrdRes& a, VerifyVecBrdRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerifyVecBrdRes* New() const final {
    return CreateMaybeMessage<VerifyVecBrdRes>(NULL);
  }

  VerifyVecBrdRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerifyVecBrdRes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerifyVecBrdRes& from);
  void MergeFrom(const VerifyVecBrdRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyVecBrdRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes public_ip = 1;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 1;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const void* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional uint32 public_port = 2;
  bool has_public_port() const;
  void clear_public_port();
  static const int kPublicPortFieldNumber = 2;
  ::google::protobuf::uint32 public_port() const;
  void set_public_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.bls.protobuf.VerifyVecBrdRes)
 private:
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_public_port();
  void clear_has_public_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  ::google::protobuf::uint32 public_port_;
  friend struct ::protobuf_bls_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SwapSecKeyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bls.protobuf.SwapSecKeyReq) */ {
 public:
  SwapSecKeyReq();
  virtual ~SwapSecKeyReq();

  SwapSecKeyReq(const SwapSecKeyReq& from);

  inline SwapSecKeyReq& operator=(const SwapSecKeyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SwapSecKeyReq(SwapSecKeyReq&& from) noexcept
    : SwapSecKeyReq() {
    *this = ::std::move(from);
  }

  inline SwapSecKeyReq& operator=(SwapSecKeyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SwapSecKeyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwapSecKeyReq* internal_default_instance() {
    return reinterpret_cast<const SwapSecKeyReq*>(
               &_SwapSecKeyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SwapSecKeyReq* other);
  friend void swap(SwapSecKeyReq& a, SwapSecKeyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SwapSecKeyReq* New() const final {
    return CreateMaybeMessage<SwapSecKeyReq>(NULL);
  }

  SwapSecKeyReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SwapSecKeyReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SwapSecKeyReq& from);
  void MergeFrom(const SwapSecKeyReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapSecKeyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes sec_key = 1;
  bool has_sec_key() const;
  void clear_sec_key();
  static const int kSecKeyFieldNumber = 1;
  const ::std::string& sec_key() const;
  void set_sec_key(const ::std::string& value);
  #if LANG_CXX11
  void set_sec_key(::std::string&& value);
  #endif
  void set_sec_key(const char* value);
  void set_sec_key(const void* value, size_t size);
  ::std::string* mutable_sec_key();
  ::std::string* release_sec_key();
  void set_allocated_sec_key(::std::string* sec_key);

  // optional uint32 sec_key_len = 2;
  bool has_sec_key_len() const;
  void clear_sec_key_len();
  static const int kSecKeyLenFieldNumber = 2;
  ::google::protobuf::uint32 sec_key_len() const;
  void set_sec_key_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.bls.protobuf.SwapSecKeyReq)
 private:
  void set_has_sec_key();
  void clear_has_sec_key();
  void set_has_sec_key_len();
  void clear_has_sec_key_len();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sec_key_;
  ::google::protobuf::uint32 sec_key_len_;
  friend struct ::protobuf_bls_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AgainstParticipant : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bls.protobuf.AgainstParticipant) */ {
 public:
  AgainstParticipant();
  virtual ~AgainstParticipant();

  AgainstParticipant(const AgainstParticipant& from);

  inline AgainstParticipant& operator=(const AgainstParticipant& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AgainstParticipant(AgainstParticipant&& from) noexcept
    : AgainstParticipant() {
    *this = ::std::move(from);
  }

  inline AgainstParticipant& operator=(AgainstParticipant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AgainstParticipant& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgainstParticipant* internal_default_instance() {
    return reinterpret_cast<const AgainstParticipant*>(
               &_AgainstParticipant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AgainstParticipant* other);
  friend void swap(AgainstParticipant& a, AgainstParticipant& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AgainstParticipant* New() const final {
    return CreateMaybeMessage<AgainstParticipant>(NULL);
  }

  AgainstParticipant* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AgainstParticipant>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AgainstParticipant& from);
  void MergeFrom(const AgainstParticipant& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgainstParticipant* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 against_index = 1;
  bool has_against_index() const;
  void clear_against_index();
  static const int kAgainstIndexFieldNumber = 1;
  ::google::protobuf::uint32 against_index() const;
  void set_against_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.bls.protobuf.AgainstParticipant)
 private:
  void set_has_against_index();
  void clear_has_against_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 against_index_;
  friend struct ::protobuf_bls_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FinishBroadcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bls.protobuf.FinishBroadcast) */ {
 public:
  FinishBroadcast();
  virtual ~FinishBroadcast();

  FinishBroadcast(const FinishBroadcast& from);

  inline FinishBroadcast& operator=(const FinishBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FinishBroadcast(FinishBroadcast&& from) noexcept
    : FinishBroadcast() {
    *this = ::std::move(from);
  }

  inline FinishBroadcast& operator=(FinishBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FinishBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinishBroadcast* internal_default_instance() {
    return reinterpret_cast<const FinishBroadcast*>(
               &_FinishBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(FinishBroadcast* other);
  friend void swap(FinishBroadcast& a, FinishBroadcast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FinishBroadcast* New() const final {
    return CreateMaybeMessage<FinishBroadcast>(NULL);
  }

  FinishBroadcast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FinishBroadcast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FinishBroadcast& from);
  void MergeFrom(const FinishBroadcast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinishBroadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 bitmap = 1;
  int bitmap_size() const;
  void clear_bitmap();
  static const int kBitmapFieldNumber = 1;
  ::google::protobuf::uint64 bitmap(int index) const;
  void set_bitmap(int index, ::google::protobuf::uint64 value);
  void add_bitmap(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bitmap() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bitmap();

  // optional bytes bls_sign_x = 5;
  bool has_bls_sign_x() const;
  void clear_bls_sign_x();
  static const int kBlsSignXFieldNumber = 5;
  const ::std::string& bls_sign_x() const;
  void set_bls_sign_x(const ::std::string& value);
  #if LANG_CXX11
  void set_bls_sign_x(::std::string&& value);
  #endif
  void set_bls_sign_x(const char* value);
  void set_bls_sign_x(const void* value, size_t size);
  ::std::string* mutable_bls_sign_x();
  ::std::string* release_bls_sign_x();
  void set_allocated_bls_sign_x(::std::string* bls_sign_x);

  // optional bytes bls_sign_y = 6;
  bool has_bls_sign_y() const;
  void clear_bls_sign_y();
  static const int kBlsSignYFieldNumber = 6;
  const ::std::string& bls_sign_y() const;
  void set_bls_sign_y(const ::std::string& value);
  #if LANG_CXX11
  void set_bls_sign_y(::std::string&& value);
  #endif
  void set_bls_sign_y(const char* value);
  void set_bls_sign_y(const void* value, size_t size);
  ::std::string* mutable_bls_sign_y();
  ::std::string* release_bls_sign_y();
  void set_allocated_bls_sign_y(::std::string* bls_sign_y);

  // optional .tenon.bls.protobuf.BlsPublicKey pubkey = 2;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 2;
  private:
  const ::tenon::bls::protobuf::BlsPublicKey& _internal_pubkey() const;
  public:
  const ::tenon::bls::protobuf::BlsPublicKey& pubkey() const;
  ::tenon::bls::protobuf::BlsPublicKey* release_pubkey();
  ::tenon::bls::protobuf::BlsPublicKey* mutable_pubkey();
  void set_allocated_pubkey(::tenon::bls::protobuf::BlsPublicKey* pubkey);

  // optional .tenon.bls.protobuf.BlsPublicKey common_pubkey = 3;
  bool has_common_pubkey() const;
  void clear_common_pubkey();
  static const int kCommonPubkeyFieldNumber = 3;
  private:
  const ::tenon::bls::protobuf::BlsPublicKey& _internal_common_pubkey() const;
  public:
  const ::tenon::bls::protobuf::BlsPublicKey& common_pubkey() const;
  ::tenon::bls::protobuf::BlsPublicKey* release_common_pubkey();
  ::tenon::bls::protobuf::BlsPublicKey* mutable_common_pubkey();
  void set_allocated_common_pubkey(::tenon::bls::protobuf::BlsPublicKey* common_pubkey);

  // optional uint32 network_id = 4;
  bool has_network_id() const;
  void clear_network_id();
  static const int kNetworkIdFieldNumber = 4;
  ::google::protobuf::uint32 network_id() const;
  void set_network_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.bls.protobuf.FinishBroadcast)
 private:
  void set_has_pubkey();
  void clear_has_pubkey();
  void set_has_common_pubkey();
  void clear_has_common_pubkey();
  void set_has_network_id();
  void clear_has_network_id();
  void set_has_bls_sign_x();
  void clear_has_bls_sign_x();
  void set_has_bls_sign_y();
  void clear_has_bls_sign_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bitmap_;
  ::google::protobuf::internal::ArenaStringPtr bls_sign_x_;
  ::google::protobuf::internal::ArenaStringPtr bls_sign_y_;
  ::tenon::bls::protobuf::BlsPublicKey* pubkey_;
  ::tenon::bls::protobuf::BlsPublicKey* common_pubkey_;
  ::google::protobuf::uint32 network_id_;
  friend struct ::protobuf_bls_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlsMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bls.protobuf.BlsMessage) */ {
 public:
  BlsMessage();
  virtual ~BlsMessage();

  BlsMessage(const BlsMessage& from);

  inline BlsMessage& operator=(const BlsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlsMessage(BlsMessage&& from) noexcept
    : BlsMessage() {
    *this = ::std::move(from);
  }

  inline BlsMessage& operator=(BlsMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlsMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlsMessage* internal_default_instance() {
    return reinterpret_cast<const BlsMessage*>(
               &_BlsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(BlsMessage* other);
  friend void swap(BlsMessage& a, BlsMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlsMessage* New() const final {
    return CreateMaybeMessage<BlsMessage>(NULL);
  }

  BlsMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlsMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlsMessage& from);
  void MergeFrom(const BlsMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlsMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes sign_ch = 7;
  bool has_sign_ch() const;
  void clear_sign_ch();
  static const int kSignChFieldNumber = 7;
  const ::std::string& sign_ch() const;
  void set_sign_ch(const ::std::string& value);
  #if LANG_CXX11
  void set_sign_ch(::std::string&& value);
  #endif
  void set_sign_ch(const char* value);
  void set_sign_ch(const void* value, size_t size);
  ::std::string* mutable_sign_ch();
  ::std::string* release_sign_ch();
  void set_allocated_sign_ch(::std::string* sign_ch);

  // optional bytes sign_res = 8;
  bool has_sign_res() const;
  void clear_sign_res();
  static const int kSignResFieldNumber = 8;
  const ::std::string& sign_res() const;
  void set_sign_res(const ::std::string& value);
  #if LANG_CXX11
  void set_sign_res(::std::string&& value);
  #endif
  void set_sign_res(const char* value);
  void set_sign_res(const void* value, size_t size);
  ::std::string* mutable_sign_res();
  ::std::string* release_sign_res();
  void set_allocated_sign_res(::std::string* sign_res);

  // optional .tenon.bls.protobuf.VerifyVecBrdReq verify_brd = 1;
  bool has_verify_brd() const;
  void clear_verify_brd();
  static const int kVerifyBrdFieldNumber = 1;
  private:
  const ::tenon::bls::protobuf::VerifyVecBrdReq& _internal_verify_brd() const;
  public:
  const ::tenon::bls::protobuf::VerifyVecBrdReq& verify_brd() const;
  ::tenon::bls::protobuf::VerifyVecBrdReq* release_verify_brd();
  ::tenon::bls::protobuf::VerifyVecBrdReq* mutable_verify_brd();
  void set_allocated_verify_brd(::tenon::bls::protobuf::VerifyVecBrdReq* verify_brd);

  // optional .tenon.bls.protobuf.SwapSecKeyReq swap_req = 2;
  bool has_swap_req() const;
  void clear_swap_req();
  static const int kSwapReqFieldNumber = 2;
  private:
  const ::tenon::bls::protobuf::SwapSecKeyReq& _internal_swap_req() const;
  public:
  const ::tenon::bls::protobuf::SwapSecKeyReq& swap_req() const;
  ::tenon::bls::protobuf::SwapSecKeyReq* release_swap_req();
  ::tenon::bls::protobuf::SwapSecKeyReq* mutable_swap_req();
  void set_allocated_swap_req(::tenon::bls::protobuf::SwapSecKeyReq* swap_req);

  // optional .tenon.bls.protobuf.AgainstParticipant against_req = 3;
  bool has_against_req() const;
  void clear_against_req();
  static const int kAgainstReqFieldNumber = 3;
  private:
  const ::tenon::bls::protobuf::AgainstParticipant& _internal_against_req() const;
  public:
  const ::tenon::bls::protobuf::AgainstParticipant& against_req() const;
  ::tenon::bls::protobuf::AgainstParticipant* release_against_req();
  ::tenon::bls::protobuf::AgainstParticipant* mutable_against_req();
  void set_allocated_against_req(::tenon::bls::protobuf::AgainstParticipant* against_req);

  // optional .tenon.bls.protobuf.FinishBroadcast finish_req = 4;
  bool has_finish_req() const;
  void clear_finish_req();
  static const int kFinishReqFieldNumber = 4;
  private:
  const ::tenon::bls::protobuf::FinishBroadcast& _internal_finish_req() const;
  public:
  const ::tenon::bls::protobuf::FinishBroadcast& finish_req() const;
  ::tenon::bls::protobuf::FinishBroadcast* release_finish_req();
  ::tenon::bls::protobuf::FinishBroadcast* mutable_finish_req();
  void set_allocated_finish_req(::tenon::bls::protobuf::FinishBroadcast* finish_req);

  // optional .tenon.bls.protobuf.VerifyVecBrdRes verify_res = 5;
  bool has_verify_res() const;
  void clear_verify_res();
  static const int kVerifyResFieldNumber = 5;
  private:
  const ::tenon::bls::protobuf::VerifyVecBrdRes& _internal_verify_res() const;
  public:
  const ::tenon::bls::protobuf::VerifyVecBrdRes& verify_res() const;
  ::tenon::bls::protobuf::VerifyVecBrdRes* release_verify_res();
  ::tenon::bls::protobuf::VerifyVecBrdRes* mutable_verify_res();
  void set_allocated_verify_res(::tenon::bls::protobuf::VerifyVecBrdRes* verify_res);

  // optional uint64 elect_height = 9;
  bool has_elect_height() const;
  void clear_elect_height();
  static const int kElectHeightFieldNumber = 9;
  ::google::protobuf::uint64 elect_height() const;
  void set_elect_height(::google::protobuf::uint64 value);

  // optional uint32 index = 6;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 6;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.bls.protobuf.BlsMessage)
 private:
  void set_has_verify_brd();
  void clear_has_verify_brd();
  void set_has_swap_req();
  void clear_has_swap_req();
  void set_has_against_req();
  void clear_has_against_req();
  void set_has_finish_req();
  void clear_has_finish_req();
  void set_has_verify_res();
  void clear_has_verify_res();
  void set_has_index();
  void clear_has_index();
  void set_has_sign_ch();
  void clear_has_sign_ch();
  void set_has_sign_res();
  void clear_has_sign_res();
  void set_has_elect_height();
  void clear_has_elect_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sign_ch_;
  ::google::protobuf::internal::ArenaStringPtr sign_res_;
  ::tenon::bls::protobuf::VerifyVecBrdReq* verify_brd_;
  ::tenon::bls::protobuf::SwapSecKeyReq* swap_req_;
  ::tenon::bls::protobuf::AgainstParticipant* against_req_;
  ::tenon::bls::protobuf::FinishBroadcast* finish_req_;
  ::tenon::bls::protobuf::VerifyVecBrdRes* verify_res_;
  ::google::protobuf::uint64 elect_height_;
  ::google::protobuf::uint32 index_;
  friend struct ::protobuf_bls_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VerifyVecItem

// optional bytes x_c0 = 1;
inline bool VerifyVecItem::has_x_c0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyVecItem::set_has_x_c0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyVecItem::clear_has_x_c0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyVecItem::clear_x_c0() {
  x_c0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_x_c0();
}
inline const ::std::string& VerifyVecItem::x_c0() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.VerifyVecItem.x_c0)
  return x_c0_.GetNoArena();
}
inline void VerifyVecItem::set_x_c0(const ::std::string& value) {
  set_has_x_c0();
  x_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.VerifyVecItem.x_c0)
}
#if LANG_CXX11
inline void VerifyVecItem::set_x_c0(::std::string&& value) {
  set_has_x_c0();
  x_c0_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.VerifyVecItem.x_c0)
}
#endif
inline void VerifyVecItem::set_x_c0(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_x_c0();
  x_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.VerifyVecItem.x_c0)
}
inline void VerifyVecItem::set_x_c0(const void* value, size_t size) {
  set_has_x_c0();
  x_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.VerifyVecItem.x_c0)
}
inline ::std::string* VerifyVecItem::mutable_x_c0() {
  set_has_x_c0();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.VerifyVecItem.x_c0)
  return x_c0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyVecItem::release_x_c0() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.VerifyVecItem.x_c0)
  if (!has_x_c0()) {
    return NULL;
  }
  clear_has_x_c0();
  return x_c0_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyVecItem::set_allocated_x_c0(::std::string* x_c0) {
  if (x_c0 != NULL) {
    set_has_x_c0();
  } else {
    clear_has_x_c0();
  }
  x_c0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x_c0);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.VerifyVecItem.x_c0)
}

// optional bytes x_c1 = 2;
inline bool VerifyVecItem::has_x_c1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyVecItem::set_has_x_c1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyVecItem::clear_has_x_c1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyVecItem::clear_x_c1() {
  x_c1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_x_c1();
}
inline const ::std::string& VerifyVecItem::x_c1() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.VerifyVecItem.x_c1)
  return x_c1_.GetNoArena();
}
inline void VerifyVecItem::set_x_c1(const ::std::string& value) {
  set_has_x_c1();
  x_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.VerifyVecItem.x_c1)
}
#if LANG_CXX11
inline void VerifyVecItem::set_x_c1(::std::string&& value) {
  set_has_x_c1();
  x_c1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.VerifyVecItem.x_c1)
}
#endif
inline void VerifyVecItem::set_x_c1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_x_c1();
  x_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.VerifyVecItem.x_c1)
}
inline void VerifyVecItem::set_x_c1(const void* value, size_t size) {
  set_has_x_c1();
  x_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.VerifyVecItem.x_c1)
}
inline ::std::string* VerifyVecItem::mutable_x_c1() {
  set_has_x_c1();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.VerifyVecItem.x_c1)
  return x_c1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyVecItem::release_x_c1() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.VerifyVecItem.x_c1)
  if (!has_x_c1()) {
    return NULL;
  }
  clear_has_x_c1();
  return x_c1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyVecItem::set_allocated_x_c1(::std::string* x_c1) {
  if (x_c1 != NULL) {
    set_has_x_c1();
  } else {
    clear_has_x_c1();
  }
  x_c1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x_c1);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.VerifyVecItem.x_c1)
}

// optional bytes y_c0 = 3;
inline bool VerifyVecItem::has_y_c0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VerifyVecItem::set_has_y_c0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VerifyVecItem::clear_has_y_c0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VerifyVecItem::clear_y_c0() {
  y_c0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_y_c0();
}
inline const ::std::string& VerifyVecItem::y_c0() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.VerifyVecItem.y_c0)
  return y_c0_.GetNoArena();
}
inline void VerifyVecItem::set_y_c0(const ::std::string& value) {
  set_has_y_c0();
  y_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.VerifyVecItem.y_c0)
}
#if LANG_CXX11
inline void VerifyVecItem::set_y_c0(::std::string&& value) {
  set_has_y_c0();
  y_c0_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.VerifyVecItem.y_c0)
}
#endif
inline void VerifyVecItem::set_y_c0(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_y_c0();
  y_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.VerifyVecItem.y_c0)
}
inline void VerifyVecItem::set_y_c0(const void* value, size_t size) {
  set_has_y_c0();
  y_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.VerifyVecItem.y_c0)
}
inline ::std::string* VerifyVecItem::mutable_y_c0() {
  set_has_y_c0();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.VerifyVecItem.y_c0)
  return y_c0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyVecItem::release_y_c0() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.VerifyVecItem.y_c0)
  if (!has_y_c0()) {
    return NULL;
  }
  clear_has_y_c0();
  return y_c0_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyVecItem::set_allocated_y_c0(::std::string* y_c0) {
  if (y_c0 != NULL) {
    set_has_y_c0();
  } else {
    clear_has_y_c0();
  }
  y_c0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y_c0);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.VerifyVecItem.y_c0)
}

// optional bytes y_c1 = 4;
inline bool VerifyVecItem::has_y_c1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VerifyVecItem::set_has_y_c1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VerifyVecItem::clear_has_y_c1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VerifyVecItem::clear_y_c1() {
  y_c1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_y_c1();
}
inline const ::std::string& VerifyVecItem::y_c1() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.VerifyVecItem.y_c1)
  return y_c1_.GetNoArena();
}
inline void VerifyVecItem::set_y_c1(const ::std::string& value) {
  set_has_y_c1();
  y_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.VerifyVecItem.y_c1)
}
#if LANG_CXX11
inline void VerifyVecItem::set_y_c1(::std::string&& value) {
  set_has_y_c1();
  y_c1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.VerifyVecItem.y_c1)
}
#endif
inline void VerifyVecItem::set_y_c1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_y_c1();
  y_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.VerifyVecItem.y_c1)
}
inline void VerifyVecItem::set_y_c1(const void* value, size_t size) {
  set_has_y_c1();
  y_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.VerifyVecItem.y_c1)
}
inline ::std::string* VerifyVecItem::mutable_y_c1() {
  set_has_y_c1();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.VerifyVecItem.y_c1)
  return y_c1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyVecItem::release_y_c1() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.VerifyVecItem.y_c1)
  if (!has_y_c1()) {
    return NULL;
  }
  clear_has_y_c1();
  return y_c1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyVecItem::set_allocated_y_c1(::std::string* y_c1) {
  if (y_c1 != NULL) {
    set_has_y_c1();
  } else {
    clear_has_y_c1();
  }
  y_c1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y_c1);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.VerifyVecItem.y_c1)
}

// optional bytes z_c0 = 5;
inline bool VerifyVecItem::has_z_c0() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VerifyVecItem::set_has_z_c0() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VerifyVecItem::clear_has_z_c0() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VerifyVecItem::clear_z_c0() {
  z_c0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_z_c0();
}
inline const ::std::string& VerifyVecItem::z_c0() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.VerifyVecItem.z_c0)
  return z_c0_.GetNoArena();
}
inline void VerifyVecItem::set_z_c0(const ::std::string& value) {
  set_has_z_c0();
  z_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.VerifyVecItem.z_c0)
}
#if LANG_CXX11
inline void VerifyVecItem::set_z_c0(::std::string&& value) {
  set_has_z_c0();
  z_c0_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.VerifyVecItem.z_c0)
}
#endif
inline void VerifyVecItem::set_z_c0(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_z_c0();
  z_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.VerifyVecItem.z_c0)
}
inline void VerifyVecItem::set_z_c0(const void* value, size_t size) {
  set_has_z_c0();
  z_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.VerifyVecItem.z_c0)
}
inline ::std::string* VerifyVecItem::mutable_z_c0() {
  set_has_z_c0();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.VerifyVecItem.z_c0)
  return z_c0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyVecItem::release_z_c0() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.VerifyVecItem.z_c0)
  if (!has_z_c0()) {
    return NULL;
  }
  clear_has_z_c0();
  return z_c0_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyVecItem::set_allocated_z_c0(::std::string* z_c0) {
  if (z_c0 != NULL) {
    set_has_z_c0();
  } else {
    clear_has_z_c0();
  }
  z_c0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), z_c0);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.VerifyVecItem.z_c0)
}

// optional bytes z_c1 = 6;
inline bool VerifyVecItem::has_z_c1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VerifyVecItem::set_has_z_c1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VerifyVecItem::clear_has_z_c1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VerifyVecItem::clear_z_c1() {
  z_c1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_z_c1();
}
inline const ::std::string& VerifyVecItem::z_c1() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.VerifyVecItem.z_c1)
  return z_c1_.GetNoArena();
}
inline void VerifyVecItem::set_z_c1(const ::std::string& value) {
  set_has_z_c1();
  z_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.VerifyVecItem.z_c1)
}
#if LANG_CXX11
inline void VerifyVecItem::set_z_c1(::std::string&& value) {
  set_has_z_c1();
  z_c1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.VerifyVecItem.z_c1)
}
#endif
inline void VerifyVecItem::set_z_c1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_z_c1();
  z_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.VerifyVecItem.z_c1)
}
inline void VerifyVecItem::set_z_c1(const void* value, size_t size) {
  set_has_z_c1();
  z_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.VerifyVecItem.z_c1)
}
inline ::std::string* VerifyVecItem::mutable_z_c1() {
  set_has_z_c1();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.VerifyVecItem.z_c1)
  return z_c1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyVecItem::release_z_c1() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.VerifyVecItem.z_c1)
  if (!has_z_c1()) {
    return NULL;
  }
  clear_has_z_c1();
  return z_c1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyVecItem::set_allocated_z_c1(::std::string* z_c1) {
  if (z_c1 != NULL) {
    set_has_z_c1();
  } else {
    clear_has_z_c1();
  }
  z_c1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), z_c1);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.VerifyVecItem.z_c1)
}

// -------------------------------------------------------------------

// BlsPublicKey

// optional bytes x_c0 = 1;
inline bool BlsPublicKey::has_x_c0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlsPublicKey::set_has_x_c0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlsPublicKey::clear_has_x_c0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlsPublicKey::clear_x_c0() {
  x_c0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_x_c0();
}
inline const ::std::string& BlsPublicKey::x_c0() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.BlsPublicKey.x_c0)
  return x_c0_.GetNoArena();
}
inline void BlsPublicKey::set_x_c0(const ::std::string& value) {
  set_has_x_c0();
  x_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.BlsPublicKey.x_c0)
}
#if LANG_CXX11
inline void BlsPublicKey::set_x_c0(::std::string&& value) {
  set_has_x_c0();
  x_c0_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.BlsPublicKey.x_c0)
}
#endif
inline void BlsPublicKey::set_x_c0(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_x_c0();
  x_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.BlsPublicKey.x_c0)
}
inline void BlsPublicKey::set_x_c0(const void* value, size_t size) {
  set_has_x_c0();
  x_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.BlsPublicKey.x_c0)
}
inline ::std::string* BlsPublicKey::mutable_x_c0() {
  set_has_x_c0();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.BlsPublicKey.x_c0)
  return x_c0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlsPublicKey::release_x_c0() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.BlsPublicKey.x_c0)
  if (!has_x_c0()) {
    return NULL;
  }
  clear_has_x_c0();
  return x_c0_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlsPublicKey::set_allocated_x_c0(::std::string* x_c0) {
  if (x_c0 != NULL) {
    set_has_x_c0();
  } else {
    clear_has_x_c0();
  }
  x_c0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x_c0);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.BlsPublicKey.x_c0)
}

// optional bytes x_c1 = 2;
inline bool BlsPublicKey::has_x_c1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlsPublicKey::set_has_x_c1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlsPublicKey::clear_has_x_c1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlsPublicKey::clear_x_c1() {
  x_c1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_x_c1();
}
inline const ::std::string& BlsPublicKey::x_c1() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.BlsPublicKey.x_c1)
  return x_c1_.GetNoArena();
}
inline void BlsPublicKey::set_x_c1(const ::std::string& value) {
  set_has_x_c1();
  x_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.BlsPublicKey.x_c1)
}
#if LANG_CXX11
inline void BlsPublicKey::set_x_c1(::std::string&& value) {
  set_has_x_c1();
  x_c1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.BlsPublicKey.x_c1)
}
#endif
inline void BlsPublicKey::set_x_c1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_x_c1();
  x_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.BlsPublicKey.x_c1)
}
inline void BlsPublicKey::set_x_c1(const void* value, size_t size) {
  set_has_x_c1();
  x_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.BlsPublicKey.x_c1)
}
inline ::std::string* BlsPublicKey::mutable_x_c1() {
  set_has_x_c1();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.BlsPublicKey.x_c1)
  return x_c1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlsPublicKey::release_x_c1() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.BlsPublicKey.x_c1)
  if (!has_x_c1()) {
    return NULL;
  }
  clear_has_x_c1();
  return x_c1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlsPublicKey::set_allocated_x_c1(::std::string* x_c1) {
  if (x_c1 != NULL) {
    set_has_x_c1();
  } else {
    clear_has_x_c1();
  }
  x_c1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x_c1);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.BlsPublicKey.x_c1)
}

// optional bytes y_c0 = 3;
inline bool BlsPublicKey::has_y_c0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlsPublicKey::set_has_y_c0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlsPublicKey::clear_has_y_c0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlsPublicKey::clear_y_c0() {
  y_c0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_y_c0();
}
inline const ::std::string& BlsPublicKey::y_c0() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.BlsPublicKey.y_c0)
  return y_c0_.GetNoArena();
}
inline void BlsPublicKey::set_y_c0(const ::std::string& value) {
  set_has_y_c0();
  y_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.BlsPublicKey.y_c0)
}
#if LANG_CXX11
inline void BlsPublicKey::set_y_c0(::std::string&& value) {
  set_has_y_c0();
  y_c0_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.BlsPublicKey.y_c0)
}
#endif
inline void BlsPublicKey::set_y_c0(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_y_c0();
  y_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.BlsPublicKey.y_c0)
}
inline void BlsPublicKey::set_y_c0(const void* value, size_t size) {
  set_has_y_c0();
  y_c0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.BlsPublicKey.y_c0)
}
inline ::std::string* BlsPublicKey::mutable_y_c0() {
  set_has_y_c0();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.BlsPublicKey.y_c0)
  return y_c0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlsPublicKey::release_y_c0() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.BlsPublicKey.y_c0)
  if (!has_y_c0()) {
    return NULL;
  }
  clear_has_y_c0();
  return y_c0_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlsPublicKey::set_allocated_y_c0(::std::string* y_c0) {
  if (y_c0 != NULL) {
    set_has_y_c0();
  } else {
    clear_has_y_c0();
  }
  y_c0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y_c0);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.BlsPublicKey.y_c0)
}

// optional bytes y_c1 = 4;
inline bool BlsPublicKey::has_y_c1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlsPublicKey::set_has_y_c1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlsPublicKey::clear_has_y_c1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlsPublicKey::clear_y_c1() {
  y_c1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_y_c1();
}
inline const ::std::string& BlsPublicKey::y_c1() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.BlsPublicKey.y_c1)
  return y_c1_.GetNoArena();
}
inline void BlsPublicKey::set_y_c1(const ::std::string& value) {
  set_has_y_c1();
  y_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.BlsPublicKey.y_c1)
}
#if LANG_CXX11
inline void BlsPublicKey::set_y_c1(::std::string&& value) {
  set_has_y_c1();
  y_c1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.BlsPublicKey.y_c1)
}
#endif
inline void BlsPublicKey::set_y_c1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_y_c1();
  y_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.BlsPublicKey.y_c1)
}
inline void BlsPublicKey::set_y_c1(const void* value, size_t size) {
  set_has_y_c1();
  y_c1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.BlsPublicKey.y_c1)
}
inline ::std::string* BlsPublicKey::mutable_y_c1() {
  set_has_y_c1();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.BlsPublicKey.y_c1)
  return y_c1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlsPublicKey::release_y_c1() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.BlsPublicKey.y_c1)
  if (!has_y_c1()) {
    return NULL;
  }
  clear_has_y_c1();
  return y_c1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlsPublicKey::set_allocated_y_c1(::std::string* y_c1) {
  if (y_c1 != NULL) {
    set_has_y_c1();
  } else {
    clear_has_y_c1();
  }
  y_c1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y_c1);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.BlsPublicKey.y_c1)
}

// -------------------------------------------------------------------

// VerifyVecBrdReq

// repeated .tenon.bls.protobuf.VerifyVecItem verify_vec = 1;
inline int VerifyVecBrdReq::verify_vec_size() const {
  return verify_vec_.size();
}
inline void VerifyVecBrdReq::clear_verify_vec() {
  verify_vec_.Clear();
}
inline ::tenon::bls::protobuf::VerifyVecItem* VerifyVecBrdReq::mutable_verify_vec(int index) {
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.VerifyVecBrdReq.verify_vec)
  return verify_vec_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tenon::bls::protobuf::VerifyVecItem >*
VerifyVecBrdReq::mutable_verify_vec() {
  // @@protoc_insertion_point(field_mutable_list:tenon.bls.protobuf.VerifyVecBrdReq.verify_vec)
  return &verify_vec_;
}
inline const ::tenon::bls::protobuf::VerifyVecItem& VerifyVecBrdReq::verify_vec(int index) const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.VerifyVecBrdReq.verify_vec)
  return verify_vec_.Get(index);
}
inline ::tenon::bls::protobuf::VerifyVecItem* VerifyVecBrdReq::add_verify_vec() {
  // @@protoc_insertion_point(field_add:tenon.bls.protobuf.VerifyVecBrdReq.verify_vec)
  return verify_vec_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tenon::bls::protobuf::VerifyVecItem >&
VerifyVecBrdReq::verify_vec() const {
  // @@protoc_insertion_point(field_list:tenon.bls.protobuf.VerifyVecBrdReq.verify_vec)
  return verify_vec_;
}

// optional bytes public_ip = 2;
inline bool VerifyVecBrdReq::has_public_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyVecBrdReq::set_has_public_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyVecBrdReq::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyVecBrdReq::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& VerifyVecBrdReq::public_ip() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.VerifyVecBrdReq.public_ip)
  return public_ip_.GetNoArena();
}
inline void VerifyVecBrdReq::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.VerifyVecBrdReq.public_ip)
}
#if LANG_CXX11
inline void VerifyVecBrdReq::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.VerifyVecBrdReq.public_ip)
}
#endif
inline void VerifyVecBrdReq::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.VerifyVecBrdReq.public_ip)
}
inline void VerifyVecBrdReq::set_public_ip(const void* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.VerifyVecBrdReq.public_ip)
}
inline ::std::string* VerifyVecBrdReq::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.VerifyVecBrdReq.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyVecBrdReq::release_public_ip() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.VerifyVecBrdReq.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyVecBrdReq::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.VerifyVecBrdReq.public_ip)
}

// optional uint32 public_port = 3;
inline bool VerifyVecBrdReq::has_public_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyVecBrdReq::set_has_public_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyVecBrdReq::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyVecBrdReq::clear_public_port() {
  public_port_ = 0u;
  clear_has_public_port();
}
inline ::google::protobuf::uint32 VerifyVecBrdReq::public_port() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.VerifyVecBrdReq.public_port)
  return public_port_;
}
inline void VerifyVecBrdReq::set_public_port(::google::protobuf::uint32 value) {
  set_has_public_port();
  public_port_ = value;
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.VerifyVecBrdReq.public_port)
}

// -------------------------------------------------------------------

// VerifyVecBrdRes

// optional bytes public_ip = 1;
inline bool VerifyVecBrdRes::has_public_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyVecBrdRes::set_has_public_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyVecBrdRes::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyVecBrdRes::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& VerifyVecBrdRes::public_ip() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.VerifyVecBrdRes.public_ip)
  return public_ip_.GetNoArena();
}
inline void VerifyVecBrdRes::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.VerifyVecBrdRes.public_ip)
}
#if LANG_CXX11
inline void VerifyVecBrdRes::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.VerifyVecBrdRes.public_ip)
}
#endif
inline void VerifyVecBrdRes::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.VerifyVecBrdRes.public_ip)
}
inline void VerifyVecBrdRes::set_public_ip(const void* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.VerifyVecBrdRes.public_ip)
}
inline ::std::string* VerifyVecBrdRes::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.VerifyVecBrdRes.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyVecBrdRes::release_public_ip() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.VerifyVecBrdRes.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyVecBrdRes::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.VerifyVecBrdRes.public_ip)
}

// optional uint32 public_port = 2;
inline bool VerifyVecBrdRes::has_public_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyVecBrdRes::set_has_public_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyVecBrdRes::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyVecBrdRes::clear_public_port() {
  public_port_ = 0u;
  clear_has_public_port();
}
inline ::google::protobuf::uint32 VerifyVecBrdRes::public_port() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.VerifyVecBrdRes.public_port)
  return public_port_;
}
inline void VerifyVecBrdRes::set_public_port(::google::protobuf::uint32 value) {
  set_has_public_port();
  public_port_ = value;
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.VerifyVecBrdRes.public_port)
}

// -------------------------------------------------------------------

// SwapSecKeyReq

// optional bytes sec_key = 1;
inline bool SwapSecKeyReq::has_sec_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SwapSecKeyReq::set_has_sec_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SwapSecKeyReq::clear_has_sec_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SwapSecKeyReq::clear_sec_key() {
  sec_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sec_key();
}
inline const ::std::string& SwapSecKeyReq::sec_key() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.SwapSecKeyReq.sec_key)
  return sec_key_.GetNoArena();
}
inline void SwapSecKeyReq::set_sec_key(const ::std::string& value) {
  set_has_sec_key();
  sec_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.SwapSecKeyReq.sec_key)
}
#if LANG_CXX11
inline void SwapSecKeyReq::set_sec_key(::std::string&& value) {
  set_has_sec_key();
  sec_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.SwapSecKeyReq.sec_key)
}
#endif
inline void SwapSecKeyReq::set_sec_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sec_key();
  sec_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.SwapSecKeyReq.sec_key)
}
inline void SwapSecKeyReq::set_sec_key(const void* value, size_t size) {
  set_has_sec_key();
  sec_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.SwapSecKeyReq.sec_key)
}
inline ::std::string* SwapSecKeyReq::mutable_sec_key() {
  set_has_sec_key();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.SwapSecKeyReq.sec_key)
  return sec_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SwapSecKeyReq::release_sec_key() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.SwapSecKeyReq.sec_key)
  if (!has_sec_key()) {
    return NULL;
  }
  clear_has_sec_key();
  return sec_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SwapSecKeyReq::set_allocated_sec_key(::std::string* sec_key) {
  if (sec_key != NULL) {
    set_has_sec_key();
  } else {
    clear_has_sec_key();
  }
  sec_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sec_key);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.SwapSecKeyReq.sec_key)
}

// optional uint32 sec_key_len = 2;
inline bool SwapSecKeyReq::has_sec_key_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SwapSecKeyReq::set_has_sec_key_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SwapSecKeyReq::clear_has_sec_key_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SwapSecKeyReq::clear_sec_key_len() {
  sec_key_len_ = 0u;
  clear_has_sec_key_len();
}
inline ::google::protobuf::uint32 SwapSecKeyReq::sec_key_len() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.SwapSecKeyReq.sec_key_len)
  return sec_key_len_;
}
inline void SwapSecKeyReq::set_sec_key_len(::google::protobuf::uint32 value) {
  set_has_sec_key_len();
  sec_key_len_ = value;
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.SwapSecKeyReq.sec_key_len)
}

// -------------------------------------------------------------------

// AgainstParticipant

// optional uint32 against_index = 1;
inline bool AgainstParticipant::has_against_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AgainstParticipant::set_has_against_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AgainstParticipant::clear_has_against_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AgainstParticipant::clear_against_index() {
  against_index_ = 0u;
  clear_has_against_index();
}
inline ::google::protobuf::uint32 AgainstParticipant::against_index() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.AgainstParticipant.against_index)
  return against_index_;
}
inline void AgainstParticipant::set_against_index(::google::protobuf::uint32 value) {
  set_has_against_index();
  against_index_ = value;
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.AgainstParticipant.against_index)
}

// -------------------------------------------------------------------

// FinishBroadcast

// repeated uint64 bitmap = 1;
inline int FinishBroadcast::bitmap_size() const {
  return bitmap_.size();
}
inline void FinishBroadcast::clear_bitmap() {
  bitmap_.Clear();
}
inline ::google::protobuf::uint64 FinishBroadcast::bitmap(int index) const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.FinishBroadcast.bitmap)
  return bitmap_.Get(index);
}
inline void FinishBroadcast::set_bitmap(int index, ::google::protobuf::uint64 value) {
  bitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.FinishBroadcast.bitmap)
}
inline void FinishBroadcast::add_bitmap(::google::protobuf::uint64 value) {
  bitmap_.Add(value);
  // @@protoc_insertion_point(field_add:tenon.bls.protobuf.FinishBroadcast.bitmap)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FinishBroadcast::bitmap() const {
  // @@protoc_insertion_point(field_list:tenon.bls.protobuf.FinishBroadcast.bitmap)
  return bitmap_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FinishBroadcast::mutable_bitmap() {
  // @@protoc_insertion_point(field_mutable_list:tenon.bls.protobuf.FinishBroadcast.bitmap)
  return &bitmap_;
}

// optional .tenon.bls.protobuf.BlsPublicKey pubkey = 2;
inline bool FinishBroadcast::has_pubkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FinishBroadcast::set_has_pubkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FinishBroadcast::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FinishBroadcast::clear_pubkey() {
  if (pubkey_ != NULL) pubkey_->Clear();
  clear_has_pubkey();
}
inline const ::tenon::bls::protobuf::BlsPublicKey& FinishBroadcast::_internal_pubkey() const {
  return *pubkey_;
}
inline const ::tenon::bls::protobuf::BlsPublicKey& FinishBroadcast::pubkey() const {
  const ::tenon::bls::protobuf::BlsPublicKey* p = pubkey_;
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.FinishBroadcast.pubkey)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bls::protobuf::BlsPublicKey*>(
      &::tenon::bls::protobuf::_BlsPublicKey_default_instance_);
}
inline ::tenon::bls::protobuf::BlsPublicKey* FinishBroadcast::release_pubkey() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.FinishBroadcast.pubkey)
  clear_has_pubkey();
  ::tenon::bls::protobuf::BlsPublicKey* temp = pubkey_;
  pubkey_ = NULL;
  return temp;
}
inline ::tenon::bls::protobuf::BlsPublicKey* FinishBroadcast::mutable_pubkey() {
  set_has_pubkey();
  if (pubkey_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bls::protobuf::BlsPublicKey>(GetArenaNoVirtual());
    pubkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.FinishBroadcast.pubkey)
  return pubkey_;
}
inline void FinishBroadcast::set_allocated_pubkey(::tenon::bls::protobuf::BlsPublicKey* pubkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubkey_;
  }
  if (pubkey) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pubkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pubkey, submessage_arena);
    }
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_ = pubkey;
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.FinishBroadcast.pubkey)
}

// optional .tenon.bls.protobuf.BlsPublicKey common_pubkey = 3;
inline bool FinishBroadcast::has_common_pubkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FinishBroadcast::set_has_common_pubkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FinishBroadcast::clear_has_common_pubkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FinishBroadcast::clear_common_pubkey() {
  if (common_pubkey_ != NULL) common_pubkey_->Clear();
  clear_has_common_pubkey();
}
inline const ::tenon::bls::protobuf::BlsPublicKey& FinishBroadcast::_internal_common_pubkey() const {
  return *common_pubkey_;
}
inline const ::tenon::bls::protobuf::BlsPublicKey& FinishBroadcast::common_pubkey() const {
  const ::tenon::bls::protobuf::BlsPublicKey* p = common_pubkey_;
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.FinishBroadcast.common_pubkey)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bls::protobuf::BlsPublicKey*>(
      &::tenon::bls::protobuf::_BlsPublicKey_default_instance_);
}
inline ::tenon::bls::protobuf::BlsPublicKey* FinishBroadcast::release_common_pubkey() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.FinishBroadcast.common_pubkey)
  clear_has_common_pubkey();
  ::tenon::bls::protobuf::BlsPublicKey* temp = common_pubkey_;
  common_pubkey_ = NULL;
  return temp;
}
inline ::tenon::bls::protobuf::BlsPublicKey* FinishBroadcast::mutable_common_pubkey() {
  set_has_common_pubkey();
  if (common_pubkey_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bls::protobuf::BlsPublicKey>(GetArenaNoVirtual());
    common_pubkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.FinishBroadcast.common_pubkey)
  return common_pubkey_;
}
inline void FinishBroadcast::set_allocated_common_pubkey(::tenon::bls::protobuf::BlsPublicKey* common_pubkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete common_pubkey_;
  }
  if (common_pubkey) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      common_pubkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, common_pubkey, submessage_arena);
    }
    set_has_common_pubkey();
  } else {
    clear_has_common_pubkey();
  }
  common_pubkey_ = common_pubkey;
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.FinishBroadcast.common_pubkey)
}

// optional uint32 network_id = 4;
inline bool FinishBroadcast::has_network_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FinishBroadcast::set_has_network_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FinishBroadcast::clear_has_network_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FinishBroadcast::clear_network_id() {
  network_id_ = 0u;
  clear_has_network_id();
}
inline ::google::protobuf::uint32 FinishBroadcast::network_id() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.FinishBroadcast.network_id)
  return network_id_;
}
inline void FinishBroadcast::set_network_id(::google::protobuf::uint32 value) {
  set_has_network_id();
  network_id_ = value;
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.FinishBroadcast.network_id)
}

// optional bytes bls_sign_x = 5;
inline bool FinishBroadcast::has_bls_sign_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FinishBroadcast::set_has_bls_sign_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FinishBroadcast::clear_has_bls_sign_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FinishBroadcast::clear_bls_sign_x() {
  bls_sign_x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bls_sign_x();
}
inline const ::std::string& FinishBroadcast::bls_sign_x() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.FinishBroadcast.bls_sign_x)
  return bls_sign_x_.GetNoArena();
}
inline void FinishBroadcast::set_bls_sign_x(const ::std::string& value) {
  set_has_bls_sign_x();
  bls_sign_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.FinishBroadcast.bls_sign_x)
}
#if LANG_CXX11
inline void FinishBroadcast::set_bls_sign_x(::std::string&& value) {
  set_has_bls_sign_x();
  bls_sign_x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.FinishBroadcast.bls_sign_x)
}
#endif
inline void FinishBroadcast::set_bls_sign_x(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bls_sign_x();
  bls_sign_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.FinishBroadcast.bls_sign_x)
}
inline void FinishBroadcast::set_bls_sign_x(const void* value, size_t size) {
  set_has_bls_sign_x();
  bls_sign_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.FinishBroadcast.bls_sign_x)
}
inline ::std::string* FinishBroadcast::mutable_bls_sign_x() {
  set_has_bls_sign_x();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.FinishBroadcast.bls_sign_x)
  return bls_sign_x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FinishBroadcast::release_bls_sign_x() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.FinishBroadcast.bls_sign_x)
  if (!has_bls_sign_x()) {
    return NULL;
  }
  clear_has_bls_sign_x();
  return bls_sign_x_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FinishBroadcast::set_allocated_bls_sign_x(::std::string* bls_sign_x) {
  if (bls_sign_x != NULL) {
    set_has_bls_sign_x();
  } else {
    clear_has_bls_sign_x();
  }
  bls_sign_x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bls_sign_x);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.FinishBroadcast.bls_sign_x)
}

// optional bytes bls_sign_y = 6;
inline bool FinishBroadcast::has_bls_sign_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FinishBroadcast::set_has_bls_sign_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FinishBroadcast::clear_has_bls_sign_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FinishBroadcast::clear_bls_sign_y() {
  bls_sign_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bls_sign_y();
}
inline const ::std::string& FinishBroadcast::bls_sign_y() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.FinishBroadcast.bls_sign_y)
  return bls_sign_y_.GetNoArena();
}
inline void FinishBroadcast::set_bls_sign_y(const ::std::string& value) {
  set_has_bls_sign_y();
  bls_sign_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.FinishBroadcast.bls_sign_y)
}
#if LANG_CXX11
inline void FinishBroadcast::set_bls_sign_y(::std::string&& value) {
  set_has_bls_sign_y();
  bls_sign_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.FinishBroadcast.bls_sign_y)
}
#endif
inline void FinishBroadcast::set_bls_sign_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bls_sign_y();
  bls_sign_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.FinishBroadcast.bls_sign_y)
}
inline void FinishBroadcast::set_bls_sign_y(const void* value, size_t size) {
  set_has_bls_sign_y();
  bls_sign_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.FinishBroadcast.bls_sign_y)
}
inline ::std::string* FinishBroadcast::mutable_bls_sign_y() {
  set_has_bls_sign_y();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.FinishBroadcast.bls_sign_y)
  return bls_sign_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FinishBroadcast::release_bls_sign_y() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.FinishBroadcast.bls_sign_y)
  if (!has_bls_sign_y()) {
    return NULL;
  }
  clear_has_bls_sign_y();
  return bls_sign_y_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FinishBroadcast::set_allocated_bls_sign_y(::std::string* bls_sign_y) {
  if (bls_sign_y != NULL) {
    set_has_bls_sign_y();
  } else {
    clear_has_bls_sign_y();
  }
  bls_sign_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bls_sign_y);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.FinishBroadcast.bls_sign_y)
}

// -------------------------------------------------------------------

// BlsMessage

// optional .tenon.bls.protobuf.VerifyVecBrdReq verify_brd = 1;
inline bool BlsMessage::has_verify_brd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlsMessage::set_has_verify_brd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlsMessage::clear_has_verify_brd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlsMessage::clear_verify_brd() {
  if (verify_brd_ != NULL) verify_brd_->Clear();
  clear_has_verify_brd();
}
inline const ::tenon::bls::protobuf::VerifyVecBrdReq& BlsMessage::_internal_verify_brd() const {
  return *verify_brd_;
}
inline const ::tenon::bls::protobuf::VerifyVecBrdReq& BlsMessage::verify_brd() const {
  const ::tenon::bls::protobuf::VerifyVecBrdReq* p = verify_brd_;
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.BlsMessage.verify_brd)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bls::protobuf::VerifyVecBrdReq*>(
      &::tenon::bls::protobuf::_VerifyVecBrdReq_default_instance_);
}
inline ::tenon::bls::protobuf::VerifyVecBrdReq* BlsMessage::release_verify_brd() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.BlsMessage.verify_brd)
  clear_has_verify_brd();
  ::tenon::bls::protobuf::VerifyVecBrdReq* temp = verify_brd_;
  verify_brd_ = NULL;
  return temp;
}
inline ::tenon::bls::protobuf::VerifyVecBrdReq* BlsMessage::mutable_verify_brd() {
  set_has_verify_brd();
  if (verify_brd_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bls::protobuf::VerifyVecBrdReq>(GetArenaNoVirtual());
    verify_brd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.BlsMessage.verify_brd)
  return verify_brd_;
}
inline void BlsMessage::set_allocated_verify_brd(::tenon::bls::protobuf::VerifyVecBrdReq* verify_brd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete verify_brd_;
  }
  if (verify_brd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      verify_brd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, verify_brd, submessage_arena);
    }
    set_has_verify_brd();
  } else {
    clear_has_verify_brd();
  }
  verify_brd_ = verify_brd;
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.BlsMessage.verify_brd)
}

// optional .tenon.bls.protobuf.SwapSecKeyReq swap_req = 2;
inline bool BlsMessage::has_swap_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlsMessage::set_has_swap_req() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlsMessage::clear_has_swap_req() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlsMessage::clear_swap_req() {
  if (swap_req_ != NULL) swap_req_->Clear();
  clear_has_swap_req();
}
inline const ::tenon::bls::protobuf::SwapSecKeyReq& BlsMessage::_internal_swap_req() const {
  return *swap_req_;
}
inline const ::tenon::bls::protobuf::SwapSecKeyReq& BlsMessage::swap_req() const {
  const ::tenon::bls::protobuf::SwapSecKeyReq* p = swap_req_;
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.BlsMessage.swap_req)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bls::protobuf::SwapSecKeyReq*>(
      &::tenon::bls::protobuf::_SwapSecKeyReq_default_instance_);
}
inline ::tenon::bls::protobuf::SwapSecKeyReq* BlsMessage::release_swap_req() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.BlsMessage.swap_req)
  clear_has_swap_req();
  ::tenon::bls::protobuf::SwapSecKeyReq* temp = swap_req_;
  swap_req_ = NULL;
  return temp;
}
inline ::tenon::bls::protobuf::SwapSecKeyReq* BlsMessage::mutable_swap_req() {
  set_has_swap_req();
  if (swap_req_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bls::protobuf::SwapSecKeyReq>(GetArenaNoVirtual());
    swap_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.BlsMessage.swap_req)
  return swap_req_;
}
inline void BlsMessage::set_allocated_swap_req(::tenon::bls::protobuf::SwapSecKeyReq* swap_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete swap_req_;
  }
  if (swap_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      swap_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, swap_req, submessage_arena);
    }
    set_has_swap_req();
  } else {
    clear_has_swap_req();
  }
  swap_req_ = swap_req;
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.BlsMessage.swap_req)
}

// optional .tenon.bls.protobuf.AgainstParticipant against_req = 3;
inline bool BlsMessage::has_against_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlsMessage::set_has_against_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlsMessage::clear_has_against_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlsMessage::clear_against_req() {
  if (against_req_ != NULL) against_req_->Clear();
  clear_has_against_req();
}
inline const ::tenon::bls::protobuf::AgainstParticipant& BlsMessage::_internal_against_req() const {
  return *against_req_;
}
inline const ::tenon::bls::protobuf::AgainstParticipant& BlsMessage::against_req() const {
  const ::tenon::bls::protobuf::AgainstParticipant* p = against_req_;
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.BlsMessage.against_req)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bls::protobuf::AgainstParticipant*>(
      &::tenon::bls::protobuf::_AgainstParticipant_default_instance_);
}
inline ::tenon::bls::protobuf::AgainstParticipant* BlsMessage::release_against_req() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.BlsMessage.against_req)
  clear_has_against_req();
  ::tenon::bls::protobuf::AgainstParticipant* temp = against_req_;
  against_req_ = NULL;
  return temp;
}
inline ::tenon::bls::protobuf::AgainstParticipant* BlsMessage::mutable_against_req() {
  set_has_against_req();
  if (against_req_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bls::protobuf::AgainstParticipant>(GetArenaNoVirtual());
    against_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.BlsMessage.against_req)
  return against_req_;
}
inline void BlsMessage::set_allocated_against_req(::tenon::bls::protobuf::AgainstParticipant* against_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete against_req_;
  }
  if (against_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      against_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, against_req, submessage_arena);
    }
    set_has_against_req();
  } else {
    clear_has_against_req();
  }
  against_req_ = against_req;
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.BlsMessage.against_req)
}

// optional .tenon.bls.protobuf.FinishBroadcast finish_req = 4;
inline bool BlsMessage::has_finish_req() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlsMessage::set_has_finish_req() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlsMessage::clear_has_finish_req() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlsMessage::clear_finish_req() {
  if (finish_req_ != NULL) finish_req_->Clear();
  clear_has_finish_req();
}
inline const ::tenon::bls::protobuf::FinishBroadcast& BlsMessage::_internal_finish_req() const {
  return *finish_req_;
}
inline const ::tenon::bls::protobuf::FinishBroadcast& BlsMessage::finish_req() const {
  const ::tenon::bls::protobuf::FinishBroadcast* p = finish_req_;
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.BlsMessage.finish_req)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bls::protobuf::FinishBroadcast*>(
      &::tenon::bls::protobuf::_FinishBroadcast_default_instance_);
}
inline ::tenon::bls::protobuf::FinishBroadcast* BlsMessage::release_finish_req() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.BlsMessage.finish_req)
  clear_has_finish_req();
  ::tenon::bls::protobuf::FinishBroadcast* temp = finish_req_;
  finish_req_ = NULL;
  return temp;
}
inline ::tenon::bls::protobuf::FinishBroadcast* BlsMessage::mutable_finish_req() {
  set_has_finish_req();
  if (finish_req_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bls::protobuf::FinishBroadcast>(GetArenaNoVirtual());
    finish_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.BlsMessage.finish_req)
  return finish_req_;
}
inline void BlsMessage::set_allocated_finish_req(::tenon::bls::protobuf::FinishBroadcast* finish_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete finish_req_;
  }
  if (finish_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      finish_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, finish_req, submessage_arena);
    }
    set_has_finish_req();
  } else {
    clear_has_finish_req();
  }
  finish_req_ = finish_req;
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.BlsMessage.finish_req)
}

// optional .tenon.bls.protobuf.VerifyVecBrdRes verify_res = 5;
inline bool BlsMessage::has_verify_res() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlsMessage::set_has_verify_res() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlsMessage::clear_has_verify_res() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlsMessage::clear_verify_res() {
  if (verify_res_ != NULL) verify_res_->Clear();
  clear_has_verify_res();
}
inline const ::tenon::bls::protobuf::VerifyVecBrdRes& BlsMessage::_internal_verify_res() const {
  return *verify_res_;
}
inline const ::tenon::bls::protobuf::VerifyVecBrdRes& BlsMessage::verify_res() const {
  const ::tenon::bls::protobuf::VerifyVecBrdRes* p = verify_res_;
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.BlsMessage.verify_res)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bls::protobuf::VerifyVecBrdRes*>(
      &::tenon::bls::protobuf::_VerifyVecBrdRes_default_instance_);
}
inline ::tenon::bls::protobuf::VerifyVecBrdRes* BlsMessage::release_verify_res() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.BlsMessage.verify_res)
  clear_has_verify_res();
  ::tenon::bls::protobuf::VerifyVecBrdRes* temp = verify_res_;
  verify_res_ = NULL;
  return temp;
}
inline ::tenon::bls::protobuf::VerifyVecBrdRes* BlsMessage::mutable_verify_res() {
  set_has_verify_res();
  if (verify_res_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bls::protobuf::VerifyVecBrdRes>(GetArenaNoVirtual());
    verify_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.BlsMessage.verify_res)
  return verify_res_;
}
inline void BlsMessage::set_allocated_verify_res(::tenon::bls::protobuf::VerifyVecBrdRes* verify_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete verify_res_;
  }
  if (verify_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      verify_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, verify_res, submessage_arena);
    }
    set_has_verify_res();
  } else {
    clear_has_verify_res();
  }
  verify_res_ = verify_res;
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.BlsMessage.verify_res)
}

// optional uint32 index = 6;
inline bool BlsMessage::has_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlsMessage::set_has_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlsMessage::clear_has_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlsMessage::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 BlsMessage::index() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.BlsMessage.index)
  return index_;
}
inline void BlsMessage::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.BlsMessage.index)
}

// optional bytes sign_ch = 7;
inline bool BlsMessage::has_sign_ch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlsMessage::set_has_sign_ch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlsMessage::clear_has_sign_ch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlsMessage::clear_sign_ch() {
  sign_ch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign_ch();
}
inline const ::std::string& BlsMessage::sign_ch() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.BlsMessage.sign_ch)
  return sign_ch_.GetNoArena();
}
inline void BlsMessage::set_sign_ch(const ::std::string& value) {
  set_has_sign_ch();
  sign_ch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.BlsMessage.sign_ch)
}
#if LANG_CXX11
inline void BlsMessage::set_sign_ch(::std::string&& value) {
  set_has_sign_ch();
  sign_ch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.BlsMessage.sign_ch)
}
#endif
inline void BlsMessage::set_sign_ch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign_ch();
  sign_ch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.BlsMessage.sign_ch)
}
inline void BlsMessage::set_sign_ch(const void* value, size_t size) {
  set_has_sign_ch();
  sign_ch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.BlsMessage.sign_ch)
}
inline ::std::string* BlsMessage::mutable_sign_ch() {
  set_has_sign_ch();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.BlsMessage.sign_ch)
  return sign_ch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlsMessage::release_sign_ch() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.BlsMessage.sign_ch)
  if (!has_sign_ch()) {
    return NULL;
  }
  clear_has_sign_ch();
  return sign_ch_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlsMessage::set_allocated_sign_ch(::std::string* sign_ch) {
  if (sign_ch != NULL) {
    set_has_sign_ch();
  } else {
    clear_has_sign_ch();
  }
  sign_ch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_ch);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.BlsMessage.sign_ch)
}

// optional bytes sign_res = 8;
inline bool BlsMessage::has_sign_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlsMessage::set_has_sign_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlsMessage::clear_has_sign_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlsMessage::clear_sign_res() {
  sign_res_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign_res();
}
inline const ::std::string& BlsMessage::sign_res() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.BlsMessage.sign_res)
  return sign_res_.GetNoArena();
}
inline void BlsMessage::set_sign_res(const ::std::string& value) {
  set_has_sign_res();
  sign_res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.BlsMessage.sign_res)
}
#if LANG_CXX11
inline void BlsMessage::set_sign_res(::std::string&& value) {
  set_has_sign_res();
  sign_res_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bls.protobuf.BlsMessage.sign_res)
}
#endif
inline void BlsMessage::set_sign_res(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign_res();
  sign_res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bls.protobuf.BlsMessage.sign_res)
}
inline void BlsMessage::set_sign_res(const void* value, size_t size) {
  set_has_sign_res();
  sign_res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bls.protobuf.BlsMessage.sign_res)
}
inline ::std::string* BlsMessage::mutable_sign_res() {
  set_has_sign_res();
  // @@protoc_insertion_point(field_mutable:tenon.bls.protobuf.BlsMessage.sign_res)
  return sign_res_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlsMessage::release_sign_res() {
  // @@protoc_insertion_point(field_release:tenon.bls.protobuf.BlsMessage.sign_res)
  if (!has_sign_res()) {
    return NULL;
  }
  clear_has_sign_res();
  return sign_res_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlsMessage::set_allocated_sign_res(::std::string* sign_res) {
  if (sign_res != NULL) {
    set_has_sign_res();
  } else {
    clear_has_sign_res();
  }
  sign_res_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_res);
  // @@protoc_insertion_point(field_set_allocated:tenon.bls.protobuf.BlsMessage.sign_res)
}

// optional uint64 elect_height = 9;
inline bool BlsMessage::has_elect_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlsMessage::set_has_elect_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlsMessage::clear_has_elect_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlsMessage::clear_elect_height() {
  elect_height_ = GOOGLE_ULONGLONG(0);
  clear_has_elect_height();
}
inline ::google::protobuf::uint64 BlsMessage::elect_height() const {
  // @@protoc_insertion_point(field_get:tenon.bls.protobuf.BlsMessage.elect_height)
  return elect_height_;
}
inline void BlsMessage::set_elect_height(::google::protobuf::uint64 value) {
  set_has_elect_height();
  elect_height_ = value;
  // @@protoc_insertion_point(field_set:tenon.bls.protobuf.BlsMessage.elect_height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace bls
}  // namespace tenon

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_bls_2eproto
