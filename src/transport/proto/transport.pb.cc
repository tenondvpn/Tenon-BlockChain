#include "stdafx.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#include "transport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_transport_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transport_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BroadcastParam;
}  // namespace protobuf_transport_2eproto
namespace tenon {
namespace transport {
namespace protobuf {
class BroadcastParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BroadcastParam>
      _instance;
} _BroadcastParam_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
}  // namespace protobuf
}  // namespace transport
}  // namespace tenon
namespace protobuf_transport_2eproto {
static void InitDefaultsBroadcastParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::transport::protobuf::_BroadcastParam_default_instance_;
    new (ptr) ::tenon::transport::protobuf::BroadcastParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::transport::protobuf::BroadcastParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BroadcastParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBroadcastParam}, {}};

static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::transport::protobuf::_Header_default_instance_;
    new (ptr) ::tenon::transport::protobuf::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::transport::protobuf::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeader}, {
      &protobuf_transport_2eproto::scc_info_BroadcastParam.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BroadcastParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, neighbor_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, stop_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, hop_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, layer_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, layer_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, overlap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, hop_to_layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, net_crossed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, bloomfilter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, evil_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::BroadcastParam, ign_bloomfilter_hop_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  1,
  10,
  ~0u,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, src_dht_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, des_dht_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, src_node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, des_node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, hop_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, from_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, from_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, to_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, to_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, client_relayed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, client_proxy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, client_dht_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, client_handled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, universal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, broadcast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, handled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, des_dht_key_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, local_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, des_network_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, des_country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, transport_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::transport::protobuf::Header, version_),
  0,
  1,
  2,
  3,
  13,
  4,
  14,
  5,
  6,
  15,
  7,
  16,
  18,
  17,
  19,
  20,
  21,
  22,
  8,
  23,
  24,
  12,
  25,
  27,
  9,
  10,
  26,
  28,
  11,
  29,
  30,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::tenon::transport::protobuf::BroadcastParam)},
  { 33, 69, sizeof(::tenon::transport::protobuf::Header)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::transport::protobuf::_BroadcastParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::transport::protobuf::_Header_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "transport.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017transport.proto\022\027lego.transport.protob"
      "uf\"\245\002\n\016BroadcastParam\022\014\n\004type\030\001 \001(\r\022\026\n\016n"
      "eighbor_count\030\002 \001(\r\022\022\n\nstop_times\030\003 \001(\r\022"
      "\021\n\thop_limit\030\004 \001(\r\022\022\n\nlayer_left\030\005 \001(\004\022\023"
      "\n\013layer_right\030\006 \001(\004\022\017\n\007overlap\030\007 \001(\002\022\024\n\014"
      "hop_to_layer\030\010 \001(\r\022\016\n\006header\030\t \001(\014\022\014\n\004bo"
      "dy\030\n \001(\014\022\023\n\013net_crossed\030\013 \001(\010\022\023\n\013bloomfi"
      "lter\030\014 \003(\004\022\021\n\tevil_rate\030\r \001(\002\022\033\n\023ign_blo"
      "omfilter_hop\030\016 \001(\r\"\362\004\n\006Header\022\023\n\013src_dht"
      "_key\030\001 \001(\014\022\023\n\013des_dht_key\030\002 \001(\014\022\023\n\013src_n"
      "ode_id\030\003 \001(\014\022\023\n\013des_node_id\030\004 \001(\014\022\021\n\thop"
      "_count\030\005 \001(\r\022\014\n\004data\030\006 \001(\014\022\020\n\010priority\030\007"
      " \001(\r\022\r\n\005debug\030\010 \001(\014\022\017\n\007from_ip\030\t \001(\014\022\021\n\t"
      "from_port\030\n \001(\r\022\r\n\005to_ip\030\013 \001(\014\022\017\n\007to_por"
      "t\030\014 \001(\r\022\n\n\002id\030\r \001(\r\022\014\n\004hash\030\016 \001(\004\022\014\n\004typ"
      "e\030\017 \001(\r\022\016\n\006client\030\020 \001(\010\022\026\n\016client_relaye"
      "d\030\021 \001(\010\022\024\n\014client_proxy\030\022 \001(\010\022\026\n\016client_"
      "dht_key\030\023 \001(\014\022\026\n\016client_handled\030\024 \001(\010\022\021\n"
      "\tuniversal\030\025 \001(\010\022:\n\tbroadcast\030\026 \001(\0132\'.le"
      "go.transport.protobuf.BroadcastParam\022\017\n\007"
      "handled\030\027 \001(\010\022\030\n\020des_dht_key_hash\030\030 \001(\004\022"
      "\016\n\006pubkey\030\031 \001(\014\022\014\n\004sign\030\032 \001(\014\022\r\n\005local\030\033"
      " \001(\010\022\023\n\013des_network\030\034 \001(\005\022\023\n\013des_country"
      "\030\035 \001(\014\022\026\n\016transport_type\030\036 \001(\005\022\017\n\007versio"
      "n\030\037 \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 967);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transport.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_transport_2eproto
namespace tenon {
namespace transport {
namespace protobuf {

// ===================================================================

void BroadcastParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BroadcastParam::kTypeFieldNumber;
const int BroadcastParam::kNeighborCountFieldNumber;
const int BroadcastParam::kStopTimesFieldNumber;
const int BroadcastParam::kHopLimitFieldNumber;
const int BroadcastParam::kLayerLeftFieldNumber;
const int BroadcastParam::kLayerRightFieldNumber;
const int BroadcastParam::kOverlapFieldNumber;
const int BroadcastParam::kHopToLayerFieldNumber;
const int BroadcastParam::kHeaderFieldNumber;
const int BroadcastParam::kBodyFieldNumber;
const int BroadcastParam::kNetCrossedFieldNumber;
const int BroadcastParam::kBloomfilterFieldNumber;
const int BroadcastParam::kEvilRateFieldNumber;
const int BroadcastParam::kIgnBloomfilterHopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BroadcastParam::BroadcastParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transport_2eproto::scc_info_BroadcastParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.transport.protobuf.BroadcastParam)
}
BroadcastParam::BroadcastParam(const BroadcastParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bloomfilter_(from.bloomfilter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header()) {
    header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&ign_bloomfilter_hop_) -
    reinterpret_cast<char*>(&type_)) + sizeof(ign_bloomfilter_hop_));
  // @@protoc_insertion_point(copy_constructor:tenon.transport.protobuf.BroadcastParam)
}

void BroadcastParam::SharedCtor() {
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ign_bloomfilter_hop_) -
      reinterpret_cast<char*>(&type_)) + sizeof(ign_bloomfilter_hop_));
}

BroadcastParam::~BroadcastParam() {
  // @@protoc_insertion_point(destructor:tenon.transport.protobuf.BroadcastParam)
  SharedDtor();
}

void BroadcastParam::SharedDtor() {
  header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BroadcastParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BroadcastParam::descriptor() {
  ::protobuf_transport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transport_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BroadcastParam& BroadcastParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transport_2eproto::scc_info_BroadcastParam.base);
  return *internal_default_instance();
}


void BroadcastParam::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.transport.protobuf.BroadcastParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bloomfilter_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      header_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      body_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&layer_right_) -
        reinterpret_cast<char*>(&type_)) + sizeof(layer_right_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&overlap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ign_bloomfilter_hop_) -
        reinterpret_cast<char*>(&overlap_)) + sizeof(ign_bloomfilter_hop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BroadcastParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.transport.protobuf.BroadcastParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 neighbor_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_neighbor_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neighbor_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stop_times = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stop_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hop_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_hop_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hop_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 layer_left = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_layer_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &layer_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 layer_right = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_layer_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &layer_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float overlap = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_overlap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hop_to_layer = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_hop_to_layer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hop_to_layer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes header = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes body = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool net_crossed = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_net_crossed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &net_crossed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 bloomfilter = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 96u, input, this->mutable_bloomfilter())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bloomfilter())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float evil_rate = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_evil_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &evil_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ign_bloomfilter_hop = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_ign_bloomfilter_hop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ign_bloomfilter_hop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.transport.protobuf.BroadcastParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.transport.protobuf.BroadcastParam)
  return false;
#undef DO_
}

void BroadcastParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.transport.protobuf.BroadcastParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 neighbor_count = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->neighbor_count(), output);
  }

  // optional uint32 stop_times = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stop_times(), output);
  }

  // optional uint32 hop_limit = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hop_limit(), output);
  }

  // optional uint64 layer_left = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->layer_left(), output);
  }

  // optional uint64 layer_right = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->layer_right(), output);
  }

  // optional float overlap = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->overlap(), output);
  }

  // optional uint32 hop_to_layer = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hop_to_layer(), output);
  }

  // optional bytes header = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->header(), output);
  }

  // optional bytes body = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->body(), output);
  }

  // optional bool net_crossed = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->net_crossed(), output);
  }

  // repeated uint64 bloomfilter = 12;
  for (int i = 0, n = this->bloomfilter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      12, this->bloomfilter(i), output);
  }

  // optional float evil_rate = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->evil_rate(), output);
  }

  // optional uint32 ign_bloomfilter_hop = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ign_bloomfilter_hop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.transport.protobuf.BroadcastParam)
}

::google::protobuf::uint8* BroadcastParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.transport.protobuf.BroadcastParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 neighbor_count = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->neighbor_count(), target);
  }

  // optional uint32 stop_times = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stop_times(), target);
  }

  // optional uint32 hop_limit = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hop_limit(), target);
  }

  // optional uint64 layer_left = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->layer_left(), target);
  }

  // optional uint64 layer_right = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->layer_right(), target);
  }

  // optional float overlap = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->overlap(), target);
  }

  // optional uint32 hop_to_layer = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hop_to_layer(), target);
  }

  // optional bytes header = 9;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->header(), target);
  }

  // optional bytes body = 10;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->body(), target);
  }

  // optional bool net_crossed = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->net_crossed(), target);
  }

  // repeated uint64 bloomfilter = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(12, this->bloomfilter_, target);

  // optional float evil_rate = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->evil_rate(), target);
  }

  // optional uint32 ign_bloomfilter_hop = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->ign_bloomfilter_hop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.transport.protobuf.BroadcastParam)
  return target;
}

size_t BroadcastParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.transport.protobuf.BroadcastParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 bloomfilter = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->bloomfilter_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bloomfilter_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes header = 9;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->header());
    }

    // optional bytes body = 10;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 neighbor_count = 2;
    if (has_neighbor_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neighbor_count());
    }

    // optional uint32 stop_times = 3;
    if (has_stop_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stop_times());
    }

    // optional uint32 hop_limit = 4;
    if (has_hop_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hop_limit());
    }

    // optional uint64 layer_left = 5;
    if (has_layer_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->layer_left());
    }

    // optional uint64 layer_right = 6;
    if (has_layer_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->layer_right());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional float overlap = 7;
    if (has_overlap()) {
      total_size += 1 + 4;
    }

    // optional uint32 hop_to_layer = 8;
    if (has_hop_to_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hop_to_layer());
    }

    // optional bool net_crossed = 11;
    if (has_net_crossed()) {
      total_size += 1 + 1;
    }

    // optional float evil_rate = 13;
    if (has_evil_rate()) {
      total_size += 1 + 4;
    }

    // optional uint32 ign_bloomfilter_hop = 14;
    if (has_ign_bloomfilter_hop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ign_bloomfilter_hop());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.transport.protobuf.BroadcastParam)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BroadcastParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.transport.protobuf.BroadcastParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.transport.protobuf.BroadcastParam)
    MergeFrom(*source);
  }
}

void BroadcastParam::MergeFrom(const BroadcastParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.transport.protobuf.BroadcastParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bloomfilter_.MergeFrom(from.bloomfilter_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_header();
      header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      neighbor_count_ = from.neighbor_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      stop_times_ = from.stop_times_;
    }
    if (cached_has_bits & 0x00000020u) {
      hop_limit_ = from.hop_limit_;
    }
    if (cached_has_bits & 0x00000040u) {
      layer_left_ = from.layer_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      layer_right_ = from.layer_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      overlap_ = from.overlap_;
    }
    if (cached_has_bits & 0x00000200u) {
      hop_to_layer_ = from.hop_to_layer_;
    }
    if (cached_has_bits & 0x00000400u) {
      net_crossed_ = from.net_crossed_;
    }
    if (cached_has_bits & 0x00000800u) {
      evil_rate_ = from.evil_rate_;
    }
    if (cached_has_bits & 0x00001000u) {
      ign_bloomfilter_hop_ = from.ign_bloomfilter_hop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BroadcastParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.transport.protobuf.BroadcastParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastParam::CopyFrom(const BroadcastParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.transport.protobuf.BroadcastParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastParam::IsInitialized() const {
  return true;
}

void BroadcastParam::Swap(BroadcastParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BroadcastParam::InternalSwap(BroadcastParam* other) {
  using std::swap;
  bloomfilter_.InternalSwap(&other->bloomfilter_);
  header_.Swap(&other->header_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(neighbor_count_, other->neighbor_count_);
  swap(stop_times_, other->stop_times_);
  swap(hop_limit_, other->hop_limit_);
  swap(layer_left_, other->layer_left_);
  swap(layer_right_, other->layer_right_);
  swap(overlap_, other->overlap_);
  swap(hop_to_layer_, other->hop_to_layer_);
  swap(net_crossed_, other->net_crossed_);
  swap(evil_rate_, other->evil_rate_);
  swap(ign_bloomfilter_hop_, other->ign_bloomfilter_hop_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BroadcastParam::GetMetadata() const {
  protobuf_transport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transport_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Header::InitAsDefaultInstance() {
  ::tenon::transport::protobuf::_Header_default_instance_._instance.get_mutable()->broadcast_ = const_cast< ::tenon::transport::protobuf::BroadcastParam*>(
      ::tenon::transport::protobuf::BroadcastParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kSrcDhtKeyFieldNumber;
const int Header::kDesDhtKeyFieldNumber;
const int Header::kSrcNodeIdFieldNumber;
const int Header::kDesNodeIdFieldNumber;
const int Header::kHopCountFieldNumber;
const int Header::kDataFieldNumber;
const int Header::kPriorityFieldNumber;
const int Header::kDebugFieldNumber;
const int Header::kFromIpFieldNumber;
const int Header::kFromPortFieldNumber;
const int Header::kToIpFieldNumber;
const int Header::kToPortFieldNumber;
const int Header::kIdFieldNumber;
const int Header::kHashFieldNumber;
const int Header::kTypeFieldNumber;
const int Header::kClientFieldNumber;
const int Header::kClientRelayedFieldNumber;
const int Header::kClientProxyFieldNumber;
const int Header::kClientDhtKeyFieldNumber;
const int Header::kClientHandledFieldNumber;
const int Header::kUniversalFieldNumber;
const int Header::kBroadcastFieldNumber;
const int Header::kHandledFieldNumber;
const int Header::kDesDhtKeyHashFieldNumber;
const int Header::kPubkeyFieldNumber;
const int Header::kSignFieldNumber;
const int Header::kLocalFieldNumber;
const int Header::kDesNetworkFieldNumber;
const int Header::kDesCountryFieldNumber;
const int Header::kTransportTypeFieldNumber;
const int Header::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transport_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.transport.protobuf.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_dht_key()) {
    src_dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_dht_key_);
  }
  des_dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_des_dht_key()) {
    des_dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_dht_key_);
  }
  src_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_node_id()) {
    src_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_node_id_);
  }
  des_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_des_node_id()) {
    des_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_node_id_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_debug()) {
    debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
  }
  from_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_ip()) {
    from_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_ip_);
  }
  to_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_ip()) {
    to_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_ip_);
  }
  client_dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_dht_key()) {
    client_dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_dht_key_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkey()) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign()) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  des_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_des_country()) {
    des_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_country_);
  }
  if (from.has_broadcast()) {
    broadcast_ = new ::tenon::transport::protobuf::BroadcastParam(*from.broadcast_);
  } else {
    broadcast_ = NULL;
  }
  ::memcpy(&hop_count_, &from.hop_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&hop_count_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:tenon.transport.protobuf.Header)
}

void Header::SharedCtor() {
  src_dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&broadcast_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&broadcast_)) + sizeof(version_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:tenon.transport.protobuf.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  src_dht_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_dht_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_dht_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete broadcast_;
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_transport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transport_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transport_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.transport.protobuf.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      src_dht_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      des_dht_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      src_node_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      des_node_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      debug_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      from_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      to_ip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      client_dht_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      pubkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      sign_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      des_country_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(broadcast_ != NULL);
      broadcast_->Clear();
    }
  }
  if (cached_has_bits & 57344u) {
    ::memset(&hop_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_port_) -
        reinterpret_cast<char*>(&hop_count_)) + sizeof(from_port_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&to_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_handled_) -
        reinterpret_cast<char*>(&to_port_)) + sizeof(client_handled_));
  }
  if (cached_has_bits & 2130706432u) {
    ::memset(&universal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&universal_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.transport.protobuf.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes src_dht_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_dht_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes des_dht_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_des_dht_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes src_node_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes des_node_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_des_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hop_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_hop_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hop_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 priority = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes debug = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes from_ip = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 from_port = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_from_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes to_ip = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 to_port = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_to_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 hash = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool client = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_client();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool client_relayed = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_client_relayed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_relayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool client_proxy = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_client_proxy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_proxy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes client_dht_key = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_dht_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool client_handled = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_client_handled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_handled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool universal = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_universal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &universal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.transport.protobuf.BroadcastParam broadcast = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_broadcast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool handled = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_handled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &handled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 des_dht_key_hash = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_des_dht_key_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &des_dht_key_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pubkey = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool local = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_local();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &local_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 des_network = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_des_network();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &des_network_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes des_country = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_des_country()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transport_type = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_transport_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transport_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.transport.protobuf.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.transport.protobuf.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.transport.protobuf.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes src_dht_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->src_dht_key(), output);
  }

  // optional bytes des_dht_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->des_dht_key(), output);
  }

  // optional bytes src_node_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->src_node_id(), output);
  }

  // optional bytes des_node_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->des_node_id(), output);
  }

  // optional uint32 hop_count = 5;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hop_count(), output);
  }

  // optional bytes data = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // optional uint32 priority = 7;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->priority(), output);
  }

  // optional bytes debug = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->debug(), output);
  }

  // optional bytes from_ip = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->from_ip(), output);
  }

  // optional uint32 from_port = 10;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->from_port(), output);
  }

  // optional bytes to_ip = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->to_ip(), output);
  }

  // optional uint32 to_port = 12;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->to_port(), output);
  }

  // optional uint32 id = 13;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->id(), output);
  }

  // optional uint64 hash = 14;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->hash(), output);
  }

  // optional uint32 type = 15;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->type(), output);
  }

  // optional bool client = 16;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->client(), output);
  }

  // optional bool client_relayed = 17;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->client_relayed(), output);
  }

  // optional bool client_proxy = 18;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->client_proxy(), output);
  }

  // optional bytes client_dht_key = 19;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->client_dht_key(), output);
  }

  // optional bool client_handled = 20;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->client_handled(), output);
  }

  // optional bool universal = 21;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->universal(), output);
  }

  // optional .tenon.transport.protobuf.BroadcastParam broadcast = 22;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_broadcast(), output);
  }

  // optional bool handled = 23;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->handled(), output);
  }

  // optional uint64 des_dht_key_hash = 24;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->des_dht_key_hash(), output);
  }

  // optional bytes pubkey = 25;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->pubkey(), output);
  }

  // optional bytes sign = 26;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      26, this->sign(), output);
  }

  // optional bool local = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->local(), output);
  }

  // optional int32 des_network = 28;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->des_network(), output);
  }

  // optional bytes des_country = 29;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      29, this->des_country(), output);
  }

  // optional int32 transport_type = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->transport_type(), output);
  }

  // optional int32 version = 31;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.transport.protobuf.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.transport.protobuf.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes src_dht_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->src_dht_key(), target);
  }

  // optional bytes des_dht_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->des_dht_key(), target);
  }

  // optional bytes src_node_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->src_node_id(), target);
  }

  // optional bytes des_node_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->des_node_id(), target);
  }

  // optional uint32 hop_count = 5;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hop_count(), target);
  }

  // optional bytes data = 6;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional uint32 priority = 7;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->priority(), target);
  }

  // optional bytes debug = 8;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->debug(), target);
  }

  // optional bytes from_ip = 9;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->from_ip(), target);
  }

  // optional uint32 from_port = 10;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->from_port(), target);
  }

  // optional bytes to_ip = 11;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->to_ip(), target);
  }

  // optional uint32 to_port = 12;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->to_port(), target);
  }

  // optional uint32 id = 13;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->id(), target);
  }

  // optional uint64 hash = 14;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->hash(), target);
  }

  // optional uint32 type = 15;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->type(), target);
  }

  // optional bool client = 16;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->client(), target);
  }

  // optional bool client_relayed = 17;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->client_relayed(), target);
  }

  // optional bool client_proxy = 18;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->client_proxy(), target);
  }

  // optional bytes client_dht_key = 19;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->client_dht_key(), target);
  }

  // optional bool client_handled = 20;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->client_handled(), target);
  }

  // optional bool universal = 21;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->universal(), target);
  }

  // optional .tenon.transport.protobuf.BroadcastParam broadcast = 22;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_broadcast(), deterministic, target);
  }

  // optional bool handled = 23;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->handled(), target);
  }

  // optional uint64 des_dht_key_hash = 24;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->des_dht_key_hash(), target);
  }

  // optional bytes pubkey = 25;
  if (cached_has_bits & 0x00000200u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->pubkey(), target);
  }

  // optional bytes sign = 26;
  if (cached_has_bits & 0x00000400u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->sign(), target);
  }

  // optional bool local = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->local(), target);
  }

  // optional int32 des_network = 28;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->des_network(), target);
  }

  // optional bytes des_country = 29;
  if (cached_has_bits & 0x00000800u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        29, this->des_country(), target);
  }

  // optional int32 transport_type = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->transport_type(), target);
  }

  // optional int32 version = 31;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.transport.protobuf.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.transport.protobuf.Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes src_dht_key = 1;
    if (has_src_dht_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_dht_key());
    }

    // optional bytes des_dht_key = 2;
    if (has_des_dht_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->des_dht_key());
    }

    // optional bytes src_node_id = 3;
    if (has_src_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_node_id());
    }

    // optional bytes des_node_id = 4;
    if (has_des_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->des_node_id());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bytes debug = 8;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->debug());
    }

    // optional bytes from_ip = 9;
    if (has_from_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from_ip());
    }

    // optional bytes to_ip = 11;
    if (has_to_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to_ip());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bytes client_dht_key = 19;
    if (has_client_dht_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_dht_key());
    }

    // optional bytes pubkey = 25;
    if (has_pubkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional bytes sign = 26;
    if (has_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign());
    }

    // optional bytes des_country = 29;
    if (has_des_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->des_country());
    }

    // optional .tenon.transport.protobuf.BroadcastParam broadcast = 22;
    if (has_broadcast()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *broadcast_);
    }

    // optional uint32 hop_count = 5;
    if (has_hop_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hop_count());
    }

    // optional uint32 priority = 7;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

    // optional uint32 from_port = 10;
    if (has_from_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_port());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 to_port = 12;
    if (has_to_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_port());
    }

    // optional uint64 hash = 14;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hash());
    }

    // optional uint32 id = 13;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 type = 15;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional bool client = 16;
    if (has_client()) {
      total_size += 2 + 1;
    }

    // optional bool client_relayed = 17;
    if (has_client_relayed()) {
      total_size += 2 + 1;
    }

    // optional bool client_proxy = 18;
    if (has_client_proxy()) {
      total_size += 2 + 1;
    }

    // optional bool client_handled = 20;
    if (has_client_handled()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional bool universal = 21;
    if (has_universal()) {
      total_size += 2 + 1;
    }

    // optional bool handled = 23;
    if (has_handled()) {
      total_size += 2 + 1;
    }

    // optional bool local = 27;
    if (has_local()) {
      total_size += 2 + 1;
    }

    // optional uint64 des_dht_key_hash = 24;
    if (has_des_dht_key_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->des_dht_key_hash());
    }

    // optional int32 des_network = 28;
    if (has_des_network()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->des_network());
    }

    // optional int32 transport_type = 30;
    if (has_transport_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transport_type());
    }

    // optional int32 version = 31;
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.transport.protobuf.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.transport.protobuf.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.transport.protobuf.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.transport.protobuf.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_src_dht_key();
      src_dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_dht_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_des_dht_key();
      des_dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_dht_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_src_node_id();
      src_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_node_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_des_node_id();
      des_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_node_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_debug();
      debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_from_ip();
      from_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_ip_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_to_ip();
      to_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_ip_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_client_dht_key();
      client_dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_dht_key_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_pubkey();
      pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_sign();
      sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_des_country();
      des_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_country_);
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_broadcast()->::tenon::transport::protobuf::BroadcastParam::MergeFrom(from.broadcast());
    }
    if (cached_has_bits & 0x00002000u) {
      hop_count_ = from.hop_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00008000u) {
      from_port_ = from.from_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      to_port_ = from.to_port_;
    }
    if (cached_has_bits & 0x00020000u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00040000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00080000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00100000u) {
      client_ = from.client_;
    }
    if (cached_has_bits & 0x00200000u) {
      client_relayed_ = from.client_relayed_;
    }
    if (cached_has_bits & 0x00400000u) {
      client_proxy_ = from.client_proxy_;
    }
    if (cached_has_bits & 0x00800000u) {
      client_handled_ = from.client_handled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      universal_ = from.universal_;
    }
    if (cached_has_bits & 0x02000000u) {
      handled_ = from.handled_;
    }
    if (cached_has_bits & 0x04000000u) {
      local_ = from.local_;
    }
    if (cached_has_bits & 0x08000000u) {
      des_dht_key_hash_ = from.des_dht_key_hash_;
    }
    if (cached_has_bits & 0x10000000u) {
      des_network_ = from.des_network_;
    }
    if (cached_has_bits & 0x20000000u) {
      transport_type_ = from.transport_type_;
    }
    if (cached_has_bits & 0x40000000u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.transport.protobuf.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.transport.protobuf.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  src_dht_key_.Swap(&other->src_dht_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  des_dht_key_.Swap(&other->des_dht_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  src_node_id_.Swap(&other->src_node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  des_node_id_.Swap(&other->des_node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  debug_.Swap(&other->debug_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_ip_.Swap(&other->from_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_ip_.Swap(&other->to_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_dht_key_.Swap(&other->client_dht_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_.Swap(&other->sign_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  des_country_.Swap(&other->des_country_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(broadcast_, other->broadcast_);
  swap(hop_count_, other->hop_count_);
  swap(priority_, other->priority_);
  swap(from_port_, other->from_port_);
  swap(to_port_, other->to_port_);
  swap(hash_, other->hash_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(client_, other->client_);
  swap(client_relayed_, other->client_relayed_);
  swap(client_proxy_, other->client_proxy_);
  swap(client_handled_, other->client_handled_);
  swap(universal_, other->universal_);
  swap(handled_, other->handled_);
  swap(local_, other->local_);
  swap(des_dht_key_hash_, other->des_dht_key_hash_);
  swap(des_network_, other->des_network_);
  swap(transport_type_, other->transport_type_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_transport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transport_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace transport
}  // namespace tenon
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::transport::protobuf::BroadcastParam* Arena::CreateMaybeMessage< ::tenon::transport::protobuf::BroadcastParam >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::transport::protobuf::BroadcastParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::transport::protobuf::Header* Arena::CreateMaybeMessage< ::tenon::transport::protobuf::Header >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::transport::protobuf::Header >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
