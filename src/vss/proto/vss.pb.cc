// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vss.proto

#include "vss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_vss_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vss_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SplitItem;
}  // namespace protobuf_vss_2eproto
namespace tenon {
namespace vss {
namespace protobuf {
class SplitItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SplitItem>
      _instance;
} _SplitItem_default_instance_;
class VssMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VssMessage>
      _instance;
} _VssMessage_default_instance_;
}  // namespace protobuf
}  // namespace vss
}  // namespace tenon
namespace protobuf_vss_2eproto {
static void InitDefaultsSplitItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::vss::protobuf::_SplitItem_default_instance_;
    new (ptr) ::tenon::vss::protobuf::SplitItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::vss::protobuf::SplitItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SplitItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSplitItem}, {}};

static void InitDefaultsVssMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::vss::protobuf::_VssMessage_default_instance_;
    new (ptr) ::tenon::vss::protobuf::VssMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::vss::protobuf::VssMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VssMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVssMessage}, {
      &protobuf_vss_2eproto::scc_info_SplitItem.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SplitItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VssMessage.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::SplitItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::SplitItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::SplitItem, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::SplitItem, split_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::SplitItem, split_random_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, random_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, random_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, split_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, split_random_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, sign_ch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, sign_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, tm_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, elect_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, crypt_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::vss::protobuf::VssMessage, all_split_random_),
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  8,
  9,
  10,
  3,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::tenon::vss::protobuf::SplitItem)},
  { 11, 28, sizeof(::tenon::vss::protobuf::VssMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::vss::protobuf::_SplitItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::vss::protobuf::_VssMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "vss.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tvss.proto\022\022tenon.vss.protobuf\"B\n\tSplit"
      "Item\022\n\n\002id\030\001 \001(\014\022\023\n\013split_index\030\002 \001(\004\022\024\n"
      "\014split_random\030\003 \001(\004\"\223\002\n\nVssMessage\022\023\n\013ra"
      "ndom_hash\030\001 \001(\004\022\016\n\006random\030\002 \001(\004\022\023\n\013split"
      "_index\030\004 \001(\004\022\024\n\014split_random\030\005 \001(\004\022\016\n\006pu"
      "bkey\030\006 \001(\014\022\017\n\007sign_ch\030\007 \001(\014\022\020\n\010sign_res\030"
      "\010 \001(\014\022\021\n\ttm_height\030\t \001(\004\022\024\n\014elect_height"
      "\030\n \001(\004\022\014\n\004type\030\013 \001(\005\022\022\n\ncrypt_data\030\014 \001(\014"
      "\0227\n\020all_split_random\030\r \003(\0132\035.tenon.vss.p"
      "rotobuf.SplitItem"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 377);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vss.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vss_2eproto
namespace tenon {
namespace vss {
namespace protobuf {

// ===================================================================

void SplitItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitItem::kIdFieldNumber;
const int SplitItem::kSplitIndexFieldNumber;
const int SplitItem::kSplitRandomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitItem::SplitItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vss_2eproto::scc_info_SplitItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.vss.protobuf.SplitItem)
}
SplitItem::SplitItem(const SplitItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&split_index_, &from.split_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&split_random_) -
    reinterpret_cast<char*>(&split_index_)) + sizeof(split_random_));
  // @@protoc_insertion_point(copy_constructor:tenon.vss.protobuf.SplitItem)
}

void SplitItem::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&split_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&split_random_) -
      reinterpret_cast<char*>(&split_index_)) + sizeof(split_random_));
}

SplitItem::~SplitItem() {
  // @@protoc_insertion_point(destructor:tenon.vss.protobuf.SplitItem)
  SharedDtor();
}

void SplitItem::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SplitItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SplitItem::descriptor() {
  ::protobuf_vss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SplitItem& SplitItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vss_2eproto::scc_info_SplitItem.base);
  return *internal_default_instance();
}


void SplitItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.vss.protobuf.SplitItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&split_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&split_random_) -
        reinterpret_cast<char*>(&split_index_)) + sizeof(split_random_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SplitItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.vss.protobuf.SplitItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 split_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_split_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &split_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 split_random = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_split_random();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &split_random_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.vss.protobuf.SplitItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.vss.protobuf.SplitItem)
  return false;
#undef DO_
}

void SplitItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.vss.protobuf.SplitItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional uint64 split_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->split_index(), output);
  }

  // optional uint64 split_random = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->split_random(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.vss.protobuf.SplitItem)
}

::google::protobuf::uint8* SplitItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.vss.protobuf.SplitItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional uint64 split_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->split_index(), target);
  }

  // optional uint64 split_random = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->split_random(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.vss.protobuf.SplitItem)
  return target;
}

size_t SplitItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.vss.protobuf.SplitItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional uint64 split_index = 2;
    if (has_split_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->split_index());
    }

    // optional uint64 split_random = 3;
    if (has_split_random()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->split_random());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.vss.protobuf.SplitItem)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.vss.protobuf.SplitItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.vss.protobuf.SplitItem)
    MergeFrom(*source);
  }
}

void SplitItem::MergeFrom(const SplitItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.vss.protobuf.SplitItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      split_index_ = from.split_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      split_random_ = from.split_random_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SplitItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.vss.protobuf.SplitItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitItem::CopyFrom(const SplitItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.vss.protobuf.SplitItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitItem::IsInitialized() const {
  return true;
}

void SplitItem::Swap(SplitItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitItem::InternalSwap(SplitItem* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(split_index_, other->split_index_);
  swap(split_random_, other->split_random_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SplitItem::GetMetadata() const {
  protobuf_vss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VssMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VssMessage::kRandomHashFieldNumber;
const int VssMessage::kRandomFieldNumber;
const int VssMessage::kSplitIndexFieldNumber;
const int VssMessage::kSplitRandomFieldNumber;
const int VssMessage::kPubkeyFieldNumber;
const int VssMessage::kSignChFieldNumber;
const int VssMessage::kSignResFieldNumber;
const int VssMessage::kTmHeightFieldNumber;
const int VssMessage::kElectHeightFieldNumber;
const int VssMessage::kTypeFieldNumber;
const int VssMessage::kCryptDataFieldNumber;
const int VssMessage::kAllSplitRandomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VssMessage::VssMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vss_2eproto::scc_info_VssMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.vss.protobuf.VssMessage)
}
VssMessage::VssMessage(const VssMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      all_split_random_(from.all_split_random_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkey()) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  sign_ch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_ch()) {
    sign_ch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_ch_);
  }
  sign_res_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_res()) {
    sign_res_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_res_);
  }
  crypt_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_crypt_data()) {
    crypt_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crypt_data_);
  }
  ::memcpy(&random_hash_, &from.random_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&random_hash_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:tenon.vss.protobuf.VssMessage)
}

void VssMessage::SharedCtor() {
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_res_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crypt_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&random_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&random_hash_)) + sizeof(type_));
}

VssMessage::~VssMessage() {
  // @@protoc_insertion_point(destructor:tenon.vss.protobuf.VssMessage)
  SharedDtor();
}

void VssMessage::SharedDtor() {
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_res_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crypt_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VssMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VssMessage::descriptor() {
  ::protobuf_vss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VssMessage& VssMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vss_2eproto::scc_info_VssMessage.base);
  return *internal_default_instance();
}


void VssMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.vss.protobuf.VssMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_split_random_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      pubkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sign_ch_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      sign_res_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      crypt_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&random_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&split_random_) -
        reinterpret_cast<char*>(&random_hash_)) + sizeof(split_random_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&tm_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&tm_height_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VssMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.vss.protobuf.VssMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 random_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_random_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &random_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 random = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_random();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &random_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 split_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_split_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &split_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 split_random = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_split_random();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &split_random_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pubkey = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign_ch = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_ch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign_res = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tm_height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_tm_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tm_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 elect_height = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_elect_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elect_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes crypt_data = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_crypt_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tenon.vss.protobuf.SplitItem all_split_random = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_all_split_random()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.vss.protobuf.VssMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.vss.protobuf.VssMessage)
  return false;
#undef DO_
}

void VssMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.vss.protobuf.VssMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 random_hash = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->random_hash(), output);
  }

  // optional uint64 random = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->random(), output);
  }

  // optional uint64 split_index = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->split_index(), output);
  }

  // optional uint64 split_random = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->split_random(), output);
  }

  // optional bytes pubkey = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->pubkey(), output);
  }

  // optional bytes sign_ch = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->sign_ch(), output);
  }

  // optional bytes sign_res = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->sign_res(), output);
  }

  // optional uint64 tm_height = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->tm_height(), output);
  }

  // optional uint64 elect_height = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->elect_height(), output);
  }

  // optional int32 type = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->type(), output);
  }

  // optional bytes crypt_data = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->crypt_data(), output);
  }

  // repeated .tenon.vss.protobuf.SplitItem all_split_random = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_split_random_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->all_split_random(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.vss.protobuf.VssMessage)
}

::google::protobuf::uint8* VssMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.vss.protobuf.VssMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 random_hash = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->random_hash(), target);
  }

  // optional uint64 random = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->random(), target);
  }

  // optional uint64 split_index = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->split_index(), target);
  }

  // optional uint64 split_random = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->split_random(), target);
  }

  // optional bytes pubkey = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->pubkey(), target);
  }

  // optional bytes sign_ch = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->sign_ch(), target);
  }

  // optional bytes sign_res = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->sign_res(), target);
  }

  // optional uint64 tm_height = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->tm_height(), target);
  }

  // optional uint64 elect_height = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->elect_height(), target);
  }

  // optional int32 type = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->type(), target);
  }

  // optional bytes crypt_data = 12;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->crypt_data(), target);
  }

  // repeated .tenon.vss.protobuf.SplitItem all_split_random = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_split_random_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->all_split_random(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.vss.protobuf.VssMessage)
  return target;
}

size_t VssMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.vss.protobuf.VssMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tenon.vss.protobuf.SplitItem all_split_random = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->all_split_random_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->all_split_random(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes pubkey = 6;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional bytes sign_ch = 7;
    if (has_sign_ch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_ch());
    }

    // optional bytes sign_res = 8;
    if (has_sign_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_res());
    }

    // optional bytes crypt_data = 12;
    if (has_crypt_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->crypt_data());
    }

    // optional uint64 random_hash = 1;
    if (has_random_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->random_hash());
    }

    // optional uint64 random = 2;
    if (has_random()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->random());
    }

    // optional uint64 split_index = 4;
    if (has_split_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->split_index());
    }

    // optional uint64 split_random = 5;
    if (has_split_random()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->split_random());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint64 tm_height = 9;
    if (has_tm_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tm_height());
    }

    // optional uint64 elect_height = 10;
    if (has_elect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elect_height());
    }

    // optional int32 type = 11;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VssMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.vss.protobuf.VssMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const VssMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VssMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.vss.protobuf.VssMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.vss.protobuf.VssMessage)
    MergeFrom(*source);
  }
}

void VssMessage::MergeFrom(const VssMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.vss.protobuf.VssMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_split_random_.MergeFrom(from.all_split_random_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pubkey();
      pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sign_ch();
      sign_ch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_ch_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sign_res();
      sign_res_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_res_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_crypt_data();
      crypt_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crypt_data_);
    }
    if (cached_has_bits & 0x00000010u) {
      random_hash_ = from.random_hash_;
    }
    if (cached_has_bits & 0x00000020u) {
      random_ = from.random_;
    }
    if (cached_has_bits & 0x00000040u) {
      split_index_ = from.split_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      split_random_ = from.split_random_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      tm_height_ = from.tm_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      elect_height_ = from.elect_height_;
    }
    if (cached_has_bits & 0x00000400u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VssMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.vss.protobuf.VssMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VssMessage::CopyFrom(const VssMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.vss.protobuf.VssMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VssMessage::IsInitialized() const {
  return true;
}

void VssMessage::Swap(VssMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VssMessage::InternalSwap(VssMessage* other) {
  using std::swap;
  CastToBase(&all_split_random_)->InternalSwap(CastToBase(&other->all_split_random_));
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_ch_.Swap(&other->sign_ch_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_res_.Swap(&other->sign_res_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  crypt_data_.Swap(&other->crypt_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(random_hash_, other->random_hash_);
  swap(random_, other->random_);
  swap(split_index_, other->split_index_);
  swap(split_random_, other->split_random_);
  swap(tm_height_, other->tm_height_);
  swap(elect_height_, other->elect_height_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VssMessage::GetMetadata() const {
  protobuf_vss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace vss
}  // namespace tenon
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::vss::protobuf::SplitItem* Arena::CreateMaybeMessage< ::tenon::vss::protobuf::SplitItem >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::vss::protobuf::SplitItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::vss::protobuf::VssMessage* Arena::CreateMaybeMessage< ::tenon::vss::protobuf::VssMessage >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::vss::protobuf::VssMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
