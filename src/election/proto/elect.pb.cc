// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elect.proto

#include "elect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_elect_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_elect_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BlsPublicKey;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_elect_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WaitingNodeHeartbeat;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_elect_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WaitingNodesMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_elect_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_member;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_elect_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PrevMembers;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_elect_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ElectBlock;
}  // namespace protobuf_elect_2eproto
namespace tenon {
namespace elect {
namespace protobuf {
class BlsPublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlsPublicKey>
      _instance;
} _BlsPublicKey_default_instance_;
class memberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<member>
      _instance;
} _member_default_instance_;
class PrevMembersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrevMembers>
      _instance;
} _PrevMembers_default_instance_;
class ElectBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ElectBlock>
      _instance;
} _ElectBlock_default_instance_;
class WaitingNodesMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WaitingNodesMessage>
      _instance;
} _WaitingNodesMessage_default_instance_;
class WaitingNodeHeartbeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WaitingNodeHeartbeat>
      _instance;
} _WaitingNodeHeartbeat_default_instance_;
class ElectMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ElectMessage>
      _instance;
} _ElectMessage_default_instance_;
}  // namespace protobuf
}  // namespace elect
}  // namespace tenon
namespace protobuf_elect_2eproto {
static void InitDefaultsBlsPublicKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::elect::protobuf::_BlsPublicKey_default_instance_;
    new (ptr) ::tenon::elect::protobuf::BlsPublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::elect::protobuf::BlsPublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BlsPublicKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBlsPublicKey}, {}};

static void InitDefaultsmember() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::elect::protobuf::_member_default_instance_;
    new (ptr) ::tenon::elect::protobuf::member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::elect::protobuf::member::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_member =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmember}, {}};

static void InitDefaultsPrevMembers() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::elect::protobuf::_PrevMembers_default_instance_;
    new (ptr) ::tenon::elect::protobuf::PrevMembers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::elect::protobuf::PrevMembers::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PrevMembers =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrevMembers}, {
      &protobuf_elect_2eproto::scc_info_BlsPublicKey.base,}};

static void InitDefaultsElectBlock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::elect::protobuf::_ElectBlock_default_instance_;
    new (ptr) ::tenon::elect::protobuf::ElectBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::elect::protobuf::ElectBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ElectBlock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsElectBlock}, {
      &protobuf_elect_2eproto::scc_info_member.base,
      &protobuf_elect_2eproto::scc_info_PrevMembers.base,}};

static void InitDefaultsWaitingNodesMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::elect::protobuf::_WaitingNodesMessage_default_instance_;
    new (ptr) ::tenon::elect::protobuf::WaitingNodesMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::elect::protobuf::WaitingNodesMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WaitingNodesMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWaitingNodesMessage}, {}};

static void InitDefaultsWaitingNodeHeartbeat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::elect::protobuf::_WaitingNodeHeartbeat_default_instance_;
    new (ptr) ::tenon::elect::protobuf::WaitingNodeHeartbeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::elect::protobuf::WaitingNodeHeartbeat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WaitingNodeHeartbeat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWaitingNodeHeartbeat}, {}};

static void InitDefaultsElectMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::elect::protobuf::_ElectMessage_default_instance_;
    new (ptr) ::tenon::elect::protobuf::ElectMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::elect::protobuf::ElectMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ElectMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsElectMessage}, {
      &protobuf_elect_2eproto::scc_info_ElectBlock.base,
      &protobuf_elect_2eproto::scc_info_WaitingNodesMessage.base,
      &protobuf_elect_2eproto::scc_info_WaitingNodeHeartbeat.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BlsPublicKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_member.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrevMembers.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ElectBlock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WaitingNodesMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WaitingNodeHeartbeat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ElectMessage.base);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::BlsPublicKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::BlsPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::BlsPublicKey, x_c0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::BlsPublicKey, x_c1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::BlsPublicKey, y_c0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::BlsPublicKey, y_c1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::BlsPublicKey, pool_idx_mod_num_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::member, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::member, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::member, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::member, sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::member, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::member, dht_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::member, nat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::member, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::member, public_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::member, local_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::member, local_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::member, pool_idx_mod_num_),
  0,
  1,
  2,
  6,
  3,
  7,
  4,
  8,
  5,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::PrevMembers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::PrevMembers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::PrevMembers, bls_pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::PrevMembers, prev_elect_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::PrevMembers, common_pubkey_),
  ~0u,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectBlock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectBlock, in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectBlock, acc_pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectBlock, acc_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectBlock, shard_network_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectBlock, prev_members_),
  ~0u,
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::WaitingNodesMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::WaitingNodesMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::WaitingNodesMessage, nodes_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::WaitingNodesMessage, waiting_shard_id_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::WaitingNodeHeartbeat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::WaitingNodeHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::WaitingNodeHeartbeat, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::WaitingNodeHeartbeat, public_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::WaitingNodeHeartbeat, network_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::WaitingNodeHeartbeat, timestamp_sec_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectMessage, elect_block_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectMessage, prev_elect_block_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectMessage, waiting_nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectMessage, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectMessage, sign_ch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectMessage, sign_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::elect::protobuf::ElectMessage, waiting_heartbeat_),
  3,
  4,
  5,
  0,
  1,
  2,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::tenon::elect::protobuf::BlsPublicKey)},
  { 15, 31, sizeof(::tenon::elect::protobuf::member)},
  { 42, 50, sizeof(::tenon::elect::protobuf::PrevMembers)},
  { 53, 63, sizeof(::tenon::elect::protobuf::ElectBlock)},
  { 68, 75, sizeof(::tenon::elect::protobuf::WaitingNodesMessage)},
  { 77, 86, sizeof(::tenon::elect::protobuf::WaitingNodeHeartbeat)},
  { 90, 102, sizeof(::tenon::elect::protobuf::ElectMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::elect::protobuf::_BlsPublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::elect::protobuf::_member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::elect::protobuf::_PrevMembers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::elect::protobuf::_ElectBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::elect::protobuf::_WaitingNodesMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::elect::protobuf::_WaitingNodeHeartbeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::elect::protobuf::_ElectMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "elect.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013elect.proto\022\024tenon.elect.protobuf\"`\n\014B"
      "lsPublicKey\022\014\n\004x_c0\030\001 \001(\014\022\014\n\004x_c1\030\002 \001(\014\022"
      "\014\n\004y_c0\030\003 \001(\014\022\014\n\004y_c1\030\004 \001(\014\022\030\n\020pool_idx_"
      "mod_num\030\005 \001(\005\"\316\001\n\006member\022\n\n\002id\030\001 \001(\014\022\016\n\006"
      "pubkey\030\002 \001(\014\022\014\n\004sign\030\003 \001(\014\022\017\n\007country\030\004 "
      "\001(\r\022\017\n\007dht_key\030\005 \001(\014\022\020\n\010nat_type\030\006 \001(\005\022\021"
      "\n\tpublic_ip\030\007 \001(\014\022\023\n\013public_port\030\010 \001(\r\022\020"
      "\n\010local_ip\030\t \001(\014\022\022\n\nlocal_port\030\n \001(\r\022\030\n\020"
      "pool_idx_mod_num\030\013 \001(\005\"\233\001\n\013PrevMembers\0226"
      "\n\nbls_pubkey\030\001 \003(\0132\".tenon.elect.protobu"
      "f.BlsPublicKey\022\031\n\021prev_elect_height\030\002 \001("
      "\004\0229\n\rcommon_pubkey\030\003 \001(\0132\".tenon.elect.p"
      "rotobuf.BlsPublicKey\"\257\001\n\nElectBlock\022(\n\002i"
      "n\030\001 \003(\0132\034.tenon.elect.protobuf.member\022\022\n"
      "\nacc_pubkey\030\002 \001(\014\022\020\n\010acc_sign\030\003 \001(\014\022\030\n\020s"
      "hard_network_id\030\004 \001(\r\0227\n\014prev_members\030\005 "
      "\001(\0132!.tenon.elect.protobuf.PrevMembers\"E"
      "\n\023WaitingNodesMessage\022\024\n\014nodes_filter\030\001 "
      "\003(\004\022\030\n\020waiting_shard_id\030\002 \001(\r\"i\n\024Waiting"
      "NodeHeartbeat\022\021\n\tpublic_ip\030\001 \001(\014\022\023\n\013publ"
      "ic_port\030\002 \001(\r\022\022\n\nnetwork_id\030\003 \001(\r\022\025\n\rtim"
      "estamp_sec\030\004 \001(\004\"\275\002\n\014ElectMessage\0225\n\013ele"
      "ct_block\030\001 \001(\0132 .tenon.elect.protobuf.El"
      "ectBlock\022:\n\020prev_elect_block\030\002 \001(\0132 .ten"
      "on.elect.protobuf.ElectBlock\022@\n\rwaiting_"
      "nodes\030\003 \001(\0132).tenon.elect.protobuf.Waiti"
      "ngNodesMessage\022\016\n\006pubkey\030\004 \001(\014\022\017\n\007sign_c"
      "h\030\005 \001(\014\022\020\n\010sign_res\030\006 \001(\014\022E\n\021waiting_hea"
      "rtbeat\030\007 \001(\0132*.tenon.elect.protobuf.Wait"
      "ingNodeHeartbeat"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "elect.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_elect_2eproto
namespace tenon {
namespace elect {
namespace protobuf {

// ===================================================================

void BlsPublicKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlsPublicKey::kXC0FieldNumber;
const int BlsPublicKey::kXC1FieldNumber;
const int BlsPublicKey::kYC0FieldNumber;
const int BlsPublicKey::kYC1FieldNumber;
const int BlsPublicKey::kPoolIdxModNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlsPublicKey::BlsPublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_elect_2eproto::scc_info_BlsPublicKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.elect.protobuf.BlsPublicKey)
}
BlsPublicKey::BlsPublicKey(const BlsPublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  x_c0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_x_c0()) {
    x_c0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_c0_);
  }
  x_c1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_x_c1()) {
    x_c1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_c1_);
  }
  y_c0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_y_c0()) {
    y_c0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.y_c0_);
  }
  y_c1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_y_c1()) {
    y_c1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.y_c1_);
  }
  pool_idx_mod_num_ = from.pool_idx_mod_num_;
  // @@protoc_insertion_point(copy_constructor:tenon.elect.protobuf.BlsPublicKey)
}

void BlsPublicKey::SharedCtor() {
  x_c0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_c1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_c0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_c1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pool_idx_mod_num_ = 0;
}

BlsPublicKey::~BlsPublicKey() {
  // @@protoc_insertion_point(destructor:tenon.elect.protobuf.BlsPublicKey)
  SharedDtor();
}

void BlsPublicKey::SharedDtor() {
  x_c0_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_c1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_c0_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_c1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BlsPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BlsPublicKey::descriptor() {
  ::protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlsPublicKey& BlsPublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_elect_2eproto::scc_info_BlsPublicKey.base);
  return *internal_default_instance();
}


void BlsPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.elect.protobuf.BlsPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_c0_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      x_c1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      y_c0_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      y_c1_.ClearNonDefaultToEmptyNoArena();
    }
  }
  pool_idx_mod_num_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlsPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.elect.protobuf.BlsPublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes x_c0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x_c0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes x_c1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x_c1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes y_c0 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y_c0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes y_c1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y_c1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pool_idx_mod_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_pool_idx_mod_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pool_idx_mod_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.elect.protobuf.BlsPublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.elect.protobuf.BlsPublicKey)
  return false;
#undef DO_
}

void BlsPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.elect.protobuf.BlsPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes x_c0 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->x_c0(), output);
  }

  // optional bytes x_c1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->x_c1(), output);
  }

  // optional bytes y_c0 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->y_c0(), output);
  }

  // optional bytes y_c1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->y_c1(), output);
  }

  // optional int32 pool_idx_mod_num = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pool_idx_mod_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.elect.protobuf.BlsPublicKey)
}

::google::protobuf::uint8* BlsPublicKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.elect.protobuf.BlsPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes x_c0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->x_c0(), target);
  }

  // optional bytes x_c1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->x_c1(), target);
  }

  // optional bytes y_c0 = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->y_c0(), target);
  }

  // optional bytes y_c1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->y_c1(), target);
  }

  // optional int32 pool_idx_mod_num = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pool_idx_mod_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.elect.protobuf.BlsPublicKey)
  return target;
}

size_t BlsPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.elect.protobuf.BlsPublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes x_c0 = 1;
    if (has_x_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x_c0());
    }

    // optional bytes x_c1 = 2;
    if (has_x_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x_c1());
    }

    // optional bytes y_c0 = 3;
    if (has_y_c0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->y_c0());
    }

    // optional bytes y_c1 = 4;
    if (has_y_c1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->y_c1());
    }

    // optional int32 pool_idx_mod_num = 5;
    if (has_pool_idx_mod_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pool_idx_mod_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlsPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.elect.protobuf.BlsPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const BlsPublicKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlsPublicKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.elect.protobuf.BlsPublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.elect.protobuf.BlsPublicKey)
    MergeFrom(*source);
  }
}

void BlsPublicKey::MergeFrom(const BlsPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.elect.protobuf.BlsPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_x_c0();
      x_c0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_c0_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_x_c1();
      x_c1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_c1_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_y_c0();
      y_c0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.y_c0_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_y_c1();
      y_c1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.y_c1_);
    }
    if (cached_has_bits & 0x00000010u) {
      pool_idx_mod_num_ = from.pool_idx_mod_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlsPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.elect.protobuf.BlsPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlsPublicKey::CopyFrom(const BlsPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.elect.protobuf.BlsPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlsPublicKey::IsInitialized() const {
  return true;
}

void BlsPublicKey::Swap(BlsPublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlsPublicKey::InternalSwap(BlsPublicKey* other) {
  using std::swap;
  x_c0_.Swap(&other->x_c0_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  x_c1_.Swap(&other->x_c1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  y_c0_.Swap(&other->y_c0_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  y_c1_.Swap(&other->y_c1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pool_idx_mod_num_, other->pool_idx_mod_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BlsPublicKey::GetMetadata() const {
  protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void member::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int member::kIdFieldNumber;
const int member::kPubkeyFieldNumber;
const int member::kSignFieldNumber;
const int member::kCountryFieldNumber;
const int member::kDhtKeyFieldNumber;
const int member::kNatTypeFieldNumber;
const int member::kPublicIpFieldNumber;
const int member::kPublicPortFieldNumber;
const int member::kLocalIpFieldNumber;
const int member::kLocalPortFieldNumber;
const int member::kPoolIdxModNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

member::member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_elect_2eproto::scc_info_member.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.elect.protobuf.member)
}
member::member(const member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkey()) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign()) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dht_key()) {
    dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dht_key_);
  }
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_ip()) {
    public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
  }
  local_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_local_ip()) {
    local_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_ip_);
  }
  ::memcpy(&country_, &from.country_,
    static_cast<size_t>(reinterpret_cast<char*>(&pool_idx_mod_num_) -
    reinterpret_cast<char*>(&country_)) + sizeof(pool_idx_mod_num_));
  // @@protoc_insertion_point(copy_constructor:tenon.elect.protobuf.member)
}

void member::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&country_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pool_idx_mod_num_) -
      reinterpret_cast<char*>(&country_)) + sizeof(pool_idx_mod_num_));
}

member::~member() {
  // @@protoc_insertion_point(destructor:tenon.elect.protobuf.member)
  SharedDtor();
}

void member::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dht_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* member::descriptor() {
  ::protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const member& member::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_elect_2eproto::scc_info_member.base);
  return *internal_default_instance();
}


void member::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.elect.protobuf.member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pubkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      sign_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      dht_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      public_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      local_ip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&country_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nat_type_) -
        reinterpret_cast<char*>(&country_)) + sizeof(nat_type_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&public_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pool_idx_mod_num_) -
        reinterpret_cast<char*>(&public_port_)) + sizeof(pool_idx_mod_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.elect.protobuf.member)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pubkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 country = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_country();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes dht_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dht_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nat_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_nat_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nat_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes public_ip = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_port = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_public_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes local_ip = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_local_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_port = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_local_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pool_idx_mod_num = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_pool_idx_mod_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pool_idx_mod_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.elect.protobuf.member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.elect.protobuf.member)
  return false;
#undef DO_
}

void member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.elect.protobuf.member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional bytes pubkey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pubkey(), output);
  }

  // optional bytes sign = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sign(), output);
  }

  // optional uint32 country = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->country(), output);
  }

  // optional bytes dht_key = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->dht_key(), output);
  }

  // optional int32 nat_type = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nat_type(), output);
  }

  // optional bytes public_ip = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->public_ip(), output);
  }

  // optional uint32 public_port = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->public_port(), output);
  }

  // optional bytes local_ip = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->local_ip(), output);
  }

  // optional uint32 local_port = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->local_port(), output);
  }

  // optional int32 pool_idx_mod_num = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pool_idx_mod_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.elect.protobuf.member)
}

::google::protobuf::uint8* member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.elect.protobuf.member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional bytes pubkey = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pubkey(), target);
  }

  // optional bytes sign = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sign(), target);
  }

  // optional uint32 country = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->country(), target);
  }

  // optional bytes dht_key = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->dht_key(), target);
  }

  // optional int32 nat_type = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nat_type(), target);
  }

  // optional bytes public_ip = 7;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->public_ip(), target);
  }

  // optional uint32 public_port = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->public_port(), target);
  }

  // optional bytes local_ip = 9;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->local_ip(), target);
  }

  // optional uint32 local_port = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->local_port(), target);
  }

  // optional int32 pool_idx_mod_num = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pool_idx_mod_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.elect.protobuf.member)
  return target;
}

size_t member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.elect.protobuf.member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes pubkey = 2;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional bytes sign = 3;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign());
    }

    // optional bytes dht_key = 5;
    if (has_dht_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dht_key());
    }

    // optional bytes public_ip = 7;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_ip());
    }

    // optional bytes local_ip = 9;
    if (has_local_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->local_ip());
    }

    // optional uint32 country = 4;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // optional int32 nat_type = 6;
    if (has_nat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nat_type());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 public_port = 8;
    if (has_public_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_port());
    }

    // optional uint32 local_port = 10;
    if (has_local_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_port());
    }

    // optional int32 pool_idx_mod_num = 11;
    if (has_pool_idx_mod_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pool_idx_mod_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.elect.protobuf.member)
  GOOGLE_DCHECK_NE(&from, this);
  const member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.elect.protobuf.member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.elect.protobuf.member)
    MergeFrom(*source);
  }
}

void member::MergeFrom(const member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.elect.protobuf.member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pubkey();
      pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sign();
      sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_dht_key();
      dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dht_key_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_public_ip();
      public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_local_ip();
      local_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_ip_);
    }
    if (cached_has_bits & 0x00000040u) {
      country_ = from.country_;
    }
    if (cached_has_bits & 0x00000080u) {
      nat_type_ = from.nat_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      public_port_ = from.public_port_;
    }
    if (cached_has_bits & 0x00000200u) {
      local_port_ = from.local_port_;
    }
    if (cached_has_bits & 0x00000400u) {
      pool_idx_mod_num_ = from.pool_idx_mod_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.elect.protobuf.member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void member::CopyFrom(const member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.elect.protobuf.member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool member::IsInitialized() const {
  return true;
}

void member::Swap(member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void member::InternalSwap(member* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_.Swap(&other->sign_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dht_key_.Swap(&other->dht_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_ip_.Swap(&other->public_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_ip_.Swap(&other->local_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(country_, other->country_);
  swap(nat_type_, other->nat_type_);
  swap(public_port_, other->public_port_);
  swap(local_port_, other->local_port_);
  swap(pool_idx_mod_num_, other->pool_idx_mod_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata member::GetMetadata() const {
  protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrevMembers::InitAsDefaultInstance() {
  ::tenon::elect::protobuf::_PrevMembers_default_instance_._instance.get_mutable()->common_pubkey_ = const_cast< ::tenon::elect::protobuf::BlsPublicKey*>(
      ::tenon::elect::protobuf::BlsPublicKey::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrevMembers::kBlsPubkeyFieldNumber;
const int PrevMembers::kPrevElectHeightFieldNumber;
const int PrevMembers::kCommonPubkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrevMembers::PrevMembers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_elect_2eproto::scc_info_PrevMembers.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.elect.protobuf.PrevMembers)
}
PrevMembers::PrevMembers(const PrevMembers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bls_pubkey_(from.bls_pubkey_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common_pubkey()) {
    common_pubkey_ = new ::tenon::elect::protobuf::BlsPublicKey(*from.common_pubkey_);
  } else {
    common_pubkey_ = NULL;
  }
  prev_elect_height_ = from.prev_elect_height_;
  // @@protoc_insertion_point(copy_constructor:tenon.elect.protobuf.PrevMembers)
}

void PrevMembers::SharedCtor() {
  ::memset(&common_pubkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_elect_height_) -
      reinterpret_cast<char*>(&common_pubkey_)) + sizeof(prev_elect_height_));
}

PrevMembers::~PrevMembers() {
  // @@protoc_insertion_point(destructor:tenon.elect.protobuf.PrevMembers)
  SharedDtor();
}

void PrevMembers::SharedDtor() {
  if (this != internal_default_instance()) delete common_pubkey_;
}

void PrevMembers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PrevMembers::descriptor() {
  ::protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrevMembers& PrevMembers::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_elect_2eproto::scc_info_PrevMembers.base);
  return *internal_default_instance();
}


void PrevMembers::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.elect.protobuf.PrevMembers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bls_pubkey_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(common_pubkey_ != NULL);
    common_pubkey_->Clear();
  }
  prev_elect_height_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PrevMembers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.elect.protobuf.PrevMembers)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tenon.elect.protobuf.BlsPublicKey bls_pubkey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bls_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 prev_elect_height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_prev_elect_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_elect_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.elect.protobuf.BlsPublicKey common_pubkey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_common_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.elect.protobuf.PrevMembers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.elect.protobuf.PrevMembers)
  return false;
#undef DO_
}

void PrevMembers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.elect.protobuf.PrevMembers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tenon.elect.protobuf.BlsPublicKey bls_pubkey = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bls_pubkey_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->bls_pubkey(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 prev_elect_height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->prev_elect_height(), output);
  }

  // optional .tenon.elect.protobuf.BlsPublicKey common_pubkey = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_common_pubkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.elect.protobuf.PrevMembers)
}

::google::protobuf::uint8* PrevMembers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.elect.protobuf.PrevMembers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tenon.elect.protobuf.BlsPublicKey bls_pubkey = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bls_pubkey_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bls_pubkey(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 prev_elect_height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->prev_elect_height(), target);
  }

  // optional .tenon.elect.protobuf.BlsPublicKey common_pubkey = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_common_pubkey(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.elect.protobuf.PrevMembers)
  return target;
}

size_t PrevMembers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.elect.protobuf.PrevMembers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tenon.elect.protobuf.BlsPublicKey bls_pubkey = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bls_pubkey_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bls_pubkey(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .tenon.elect.protobuf.BlsPublicKey common_pubkey = 3;
    if (has_common_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *common_pubkey_);
    }

    // optional uint64 prev_elect_height = 2;
    if (has_prev_elect_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prev_elect_height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrevMembers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.elect.protobuf.PrevMembers)
  GOOGLE_DCHECK_NE(&from, this);
  const PrevMembers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrevMembers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.elect.protobuf.PrevMembers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.elect.protobuf.PrevMembers)
    MergeFrom(*source);
  }
}

void PrevMembers::MergeFrom(const PrevMembers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.elect.protobuf.PrevMembers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bls_pubkey_.MergeFrom(from.bls_pubkey_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_common_pubkey()->::tenon::elect::protobuf::BlsPublicKey::MergeFrom(from.common_pubkey());
    }
    if (cached_has_bits & 0x00000002u) {
      prev_elect_height_ = from.prev_elect_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrevMembers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.elect.protobuf.PrevMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrevMembers::CopyFrom(const PrevMembers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.elect.protobuf.PrevMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrevMembers::IsInitialized() const {
  return true;
}

void PrevMembers::Swap(PrevMembers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrevMembers::InternalSwap(PrevMembers* other) {
  using std::swap;
  CastToBase(&bls_pubkey_)->InternalSwap(CastToBase(&other->bls_pubkey_));
  swap(common_pubkey_, other->common_pubkey_);
  swap(prev_elect_height_, other->prev_elect_height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PrevMembers::GetMetadata() const {
  protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ElectBlock::InitAsDefaultInstance() {
  ::tenon::elect::protobuf::_ElectBlock_default_instance_._instance.get_mutable()->prev_members_ = const_cast< ::tenon::elect::protobuf::PrevMembers*>(
      ::tenon::elect::protobuf::PrevMembers::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElectBlock::kInFieldNumber;
const int ElectBlock::kAccPubkeyFieldNumber;
const int ElectBlock::kAccSignFieldNumber;
const int ElectBlock::kShardNetworkIdFieldNumber;
const int ElectBlock::kPrevMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElectBlock::ElectBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_elect_2eproto::scc_info_ElectBlock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.elect.protobuf.ElectBlock)
}
ElectBlock::ElectBlock(const ElectBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      in_(from.in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acc_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_acc_pubkey()) {
    acc_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_pubkey_);
  }
  acc_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_acc_sign()) {
    acc_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_sign_);
  }
  if (from.has_prev_members()) {
    prev_members_ = new ::tenon::elect::protobuf::PrevMembers(*from.prev_members_);
  } else {
    prev_members_ = NULL;
  }
  shard_network_id_ = from.shard_network_id_;
  // @@protoc_insertion_point(copy_constructor:tenon.elect.protobuf.ElectBlock)
}

void ElectBlock::SharedCtor() {
  acc_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acc_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&prev_members_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_network_id_) -
      reinterpret_cast<char*>(&prev_members_)) + sizeof(shard_network_id_));
}

ElectBlock::~ElectBlock() {
  // @@protoc_insertion_point(destructor:tenon.elect.protobuf.ElectBlock)
  SharedDtor();
}

void ElectBlock::SharedDtor() {
  acc_pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acc_sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete prev_members_;
}

void ElectBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ElectBlock::descriptor() {
  ::protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ElectBlock& ElectBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_elect_2eproto::scc_info_ElectBlock.base);
  return *internal_default_instance();
}


void ElectBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.elect.protobuf.ElectBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      acc_pubkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      acc_sign_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(prev_members_ != NULL);
      prev_members_->Clear();
    }
  }
  shard_network_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ElectBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.elect.protobuf.ElectBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tenon.elect.protobuf.member in = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes acc_pubkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_acc_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes acc_sign = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_acc_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shard_network_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_shard_network_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_network_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.elect.protobuf.PrevMembers prev_members = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prev_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.elect.protobuf.ElectBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.elect.protobuf.ElectBlock)
  return false;
#undef DO_
}

void ElectBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.elect.protobuf.ElectBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tenon.elect.protobuf.member in = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->in(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes acc_pubkey = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->acc_pubkey(), output);
  }

  // optional bytes acc_sign = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->acc_sign(), output);
  }

  // optional uint32 shard_network_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->shard_network_id(), output);
  }

  // optional .tenon.elect.protobuf.PrevMembers prev_members = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_prev_members(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.elect.protobuf.ElectBlock)
}

::google::protobuf::uint8* ElectBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.elect.protobuf.ElectBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tenon.elect.protobuf.member in = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->in_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->in(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes acc_pubkey = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->acc_pubkey(), target);
  }

  // optional bytes acc_sign = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->acc_sign(), target);
  }

  // optional uint32 shard_network_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->shard_network_id(), target);
  }

  // optional .tenon.elect.protobuf.PrevMembers prev_members = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_prev_members(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.elect.protobuf.ElectBlock)
  return target;
}

size_t ElectBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.elect.protobuf.ElectBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tenon.elect.protobuf.member in = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->in_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->in(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes acc_pubkey = 2;
    if (has_acc_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->acc_pubkey());
    }

    // optional bytes acc_sign = 3;
    if (has_acc_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->acc_sign());
    }

    // optional .tenon.elect.protobuf.PrevMembers prev_members = 5;
    if (has_prev_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *prev_members_);
    }

    // optional uint32 shard_network_id = 4;
    if (has_shard_network_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shard_network_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElectBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.elect.protobuf.ElectBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const ElectBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ElectBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.elect.protobuf.ElectBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.elect.protobuf.ElectBlock)
    MergeFrom(*source);
  }
}

void ElectBlock::MergeFrom(const ElectBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.elect.protobuf.ElectBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_.MergeFrom(from.in_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_acc_pubkey();
      acc_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_pubkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_acc_sign();
      acc_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_sign_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_prev_members()->::tenon::elect::protobuf::PrevMembers::MergeFrom(from.prev_members());
    }
    if (cached_has_bits & 0x00000008u) {
      shard_network_id_ = from.shard_network_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ElectBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.elect.protobuf.ElectBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectBlock::CopyFrom(const ElectBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.elect.protobuf.ElectBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectBlock::IsInitialized() const {
  return true;
}

void ElectBlock::Swap(ElectBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ElectBlock::InternalSwap(ElectBlock* other) {
  using std::swap;
  CastToBase(&in_)->InternalSwap(CastToBase(&other->in_));
  acc_pubkey_.Swap(&other->acc_pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  acc_sign_.Swap(&other->acc_sign_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prev_members_, other->prev_members_);
  swap(shard_network_id_, other->shard_network_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ElectBlock::GetMetadata() const {
  protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WaitingNodesMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaitingNodesMessage::kNodesFilterFieldNumber;
const int WaitingNodesMessage::kWaitingShardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitingNodesMessage::WaitingNodesMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_elect_2eproto::scc_info_WaitingNodesMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.elect.protobuf.WaitingNodesMessage)
}
WaitingNodesMessage::WaitingNodesMessage(const WaitingNodesMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      nodes_filter_(from.nodes_filter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  waiting_shard_id_ = from.waiting_shard_id_;
  // @@protoc_insertion_point(copy_constructor:tenon.elect.protobuf.WaitingNodesMessage)
}

void WaitingNodesMessage::SharedCtor() {
  waiting_shard_id_ = 0u;
}

WaitingNodesMessage::~WaitingNodesMessage() {
  // @@protoc_insertion_point(destructor:tenon.elect.protobuf.WaitingNodesMessage)
  SharedDtor();
}

void WaitingNodesMessage::SharedDtor() {
}

void WaitingNodesMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WaitingNodesMessage::descriptor() {
  ::protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WaitingNodesMessage& WaitingNodesMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_elect_2eproto::scc_info_WaitingNodesMessage.base);
  return *internal_default_instance();
}


void WaitingNodesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.elect.protobuf.WaitingNodesMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_filter_.Clear();
  waiting_shard_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WaitingNodesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.elect.protobuf.WaitingNodesMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 nodes_filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_nodes_filter())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_nodes_filter())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 waiting_shard_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_waiting_shard_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waiting_shard_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.elect.protobuf.WaitingNodesMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.elect.protobuf.WaitingNodesMessage)
  return false;
#undef DO_
}

void WaitingNodesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.elect.protobuf.WaitingNodesMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 nodes_filter = 1;
  for (int i = 0, n = this->nodes_filter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->nodes_filter(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 waiting_shard_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->waiting_shard_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.elect.protobuf.WaitingNodesMessage)
}

::google::protobuf::uint8* WaitingNodesMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.elect.protobuf.WaitingNodesMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 nodes_filter = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->nodes_filter_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 waiting_shard_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->waiting_shard_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.elect.protobuf.WaitingNodesMessage)
  return target;
}

size_t WaitingNodesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.elect.protobuf.WaitingNodesMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 nodes_filter = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->nodes_filter_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->nodes_filter_size());
    total_size += data_size;
  }

  // optional uint32 waiting_shard_id = 2;
  if (has_waiting_shard_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->waiting_shard_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitingNodesMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.elect.protobuf.WaitingNodesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitingNodesMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WaitingNodesMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.elect.protobuf.WaitingNodesMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.elect.protobuf.WaitingNodesMessage)
    MergeFrom(*source);
  }
}

void WaitingNodesMessage::MergeFrom(const WaitingNodesMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.elect.protobuf.WaitingNodesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_filter_.MergeFrom(from.nodes_filter_);
  if (from.has_waiting_shard_id()) {
    set_waiting_shard_id(from.waiting_shard_id());
  }
}

void WaitingNodesMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.elect.protobuf.WaitingNodesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitingNodesMessage::CopyFrom(const WaitingNodesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.elect.protobuf.WaitingNodesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitingNodesMessage::IsInitialized() const {
  return true;
}

void WaitingNodesMessage::Swap(WaitingNodesMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitingNodesMessage::InternalSwap(WaitingNodesMessage* other) {
  using std::swap;
  nodes_filter_.InternalSwap(&other->nodes_filter_);
  swap(waiting_shard_id_, other->waiting_shard_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WaitingNodesMessage::GetMetadata() const {
  protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WaitingNodeHeartbeat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaitingNodeHeartbeat::kPublicIpFieldNumber;
const int WaitingNodeHeartbeat::kPublicPortFieldNumber;
const int WaitingNodeHeartbeat::kNetworkIdFieldNumber;
const int WaitingNodeHeartbeat::kTimestampSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitingNodeHeartbeat::WaitingNodeHeartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_elect_2eproto::scc_info_WaitingNodeHeartbeat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.elect.protobuf.WaitingNodeHeartbeat)
}
WaitingNodeHeartbeat::WaitingNodeHeartbeat(const WaitingNodeHeartbeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_ip()) {
    public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
  }
  ::memcpy(&public_port_, &from.public_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_sec_) -
    reinterpret_cast<char*>(&public_port_)) + sizeof(timestamp_sec_));
  // @@protoc_insertion_point(copy_constructor:tenon.elect.protobuf.WaitingNodeHeartbeat)
}

void WaitingNodeHeartbeat::SharedCtor() {
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&public_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_sec_) -
      reinterpret_cast<char*>(&public_port_)) + sizeof(timestamp_sec_));
}

WaitingNodeHeartbeat::~WaitingNodeHeartbeat() {
  // @@protoc_insertion_point(destructor:tenon.elect.protobuf.WaitingNodeHeartbeat)
  SharedDtor();
}

void WaitingNodeHeartbeat::SharedDtor() {
  public_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WaitingNodeHeartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WaitingNodeHeartbeat::descriptor() {
  ::protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WaitingNodeHeartbeat& WaitingNodeHeartbeat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_elect_2eproto::scc_info_WaitingNodeHeartbeat.base);
  return *internal_default_instance();
}


void WaitingNodeHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.elect.protobuf.WaitingNodeHeartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    public_ip_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&public_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_sec_) -
        reinterpret_cast<char*>(&public_port_)) + sizeof(timestamp_sec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WaitingNodeHeartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.elect.protobuf.WaitingNodeHeartbeat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_public_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 network_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_network_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp_sec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.elect.protobuf.WaitingNodeHeartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.elect.protobuf.WaitingNodeHeartbeat)
  return false;
#undef DO_
}

void WaitingNodeHeartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.elect.protobuf.WaitingNodeHeartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_ip(), output);
  }

  // optional uint32 public_port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->public_port(), output);
  }

  // optional uint32 network_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->network_id(), output);
  }

  // optional uint64 timestamp_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.elect.protobuf.WaitingNodeHeartbeat)
}

::google::protobuf::uint8* WaitingNodeHeartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.elect.protobuf.WaitingNodeHeartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_ip(), target);
  }

  // optional uint32 public_port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->public_port(), target);
  }

  // optional uint32 network_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->network_id(), target);
  }

  // optional uint64 timestamp_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.elect.protobuf.WaitingNodeHeartbeat)
  return target;
}

size_t WaitingNodeHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.elect.protobuf.WaitingNodeHeartbeat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes public_ip = 1;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_ip());
    }

    // optional uint32 public_port = 2;
    if (has_public_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_port());
    }

    // optional uint32 network_id = 3;
    if (has_network_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_id());
    }

    // optional uint64 timestamp_sec = 4;
    if (has_timestamp_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_sec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitingNodeHeartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.elect.protobuf.WaitingNodeHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitingNodeHeartbeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WaitingNodeHeartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.elect.protobuf.WaitingNodeHeartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.elect.protobuf.WaitingNodeHeartbeat)
    MergeFrom(*source);
  }
}

void WaitingNodeHeartbeat::MergeFrom(const WaitingNodeHeartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.elect.protobuf.WaitingNodeHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_public_ip();
      public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      public_port_ = from.public_port_;
    }
    if (cached_has_bits & 0x00000004u) {
      network_id_ = from.network_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WaitingNodeHeartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.elect.protobuf.WaitingNodeHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitingNodeHeartbeat::CopyFrom(const WaitingNodeHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.elect.protobuf.WaitingNodeHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitingNodeHeartbeat::IsInitialized() const {
  return true;
}

void WaitingNodeHeartbeat::Swap(WaitingNodeHeartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitingNodeHeartbeat::InternalSwap(WaitingNodeHeartbeat* other) {
  using std::swap;
  public_ip_.Swap(&other->public_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(public_port_, other->public_port_);
  swap(network_id_, other->network_id_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WaitingNodeHeartbeat::GetMetadata() const {
  protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ElectMessage::InitAsDefaultInstance() {
  ::tenon::elect::protobuf::_ElectMessage_default_instance_._instance.get_mutable()->elect_block_ = const_cast< ::tenon::elect::protobuf::ElectBlock*>(
      ::tenon::elect::protobuf::ElectBlock::internal_default_instance());
  ::tenon::elect::protobuf::_ElectMessage_default_instance_._instance.get_mutable()->prev_elect_block_ = const_cast< ::tenon::elect::protobuf::ElectBlock*>(
      ::tenon::elect::protobuf::ElectBlock::internal_default_instance());
  ::tenon::elect::protobuf::_ElectMessage_default_instance_._instance.get_mutable()->waiting_nodes_ = const_cast< ::tenon::elect::protobuf::WaitingNodesMessage*>(
      ::tenon::elect::protobuf::WaitingNodesMessage::internal_default_instance());
  ::tenon::elect::protobuf::_ElectMessage_default_instance_._instance.get_mutable()->waiting_heartbeat_ = const_cast< ::tenon::elect::protobuf::WaitingNodeHeartbeat*>(
      ::tenon::elect::protobuf::WaitingNodeHeartbeat::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElectMessage::kElectBlockFieldNumber;
const int ElectMessage::kPrevElectBlockFieldNumber;
const int ElectMessage::kWaitingNodesFieldNumber;
const int ElectMessage::kPubkeyFieldNumber;
const int ElectMessage::kSignChFieldNumber;
const int ElectMessage::kSignResFieldNumber;
const int ElectMessage::kWaitingHeartbeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElectMessage::ElectMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_elect_2eproto::scc_info_ElectMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.elect.protobuf.ElectMessage)
}
ElectMessage::ElectMessage(const ElectMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkey()) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  sign_ch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_ch()) {
    sign_ch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_ch_);
  }
  sign_res_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_res()) {
    sign_res_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_res_);
  }
  if (from.has_elect_block()) {
    elect_block_ = new ::tenon::elect::protobuf::ElectBlock(*from.elect_block_);
  } else {
    elect_block_ = NULL;
  }
  if (from.has_prev_elect_block()) {
    prev_elect_block_ = new ::tenon::elect::protobuf::ElectBlock(*from.prev_elect_block_);
  } else {
    prev_elect_block_ = NULL;
  }
  if (from.has_waiting_nodes()) {
    waiting_nodes_ = new ::tenon::elect::protobuf::WaitingNodesMessage(*from.waiting_nodes_);
  } else {
    waiting_nodes_ = NULL;
  }
  if (from.has_waiting_heartbeat()) {
    waiting_heartbeat_ = new ::tenon::elect::protobuf::WaitingNodeHeartbeat(*from.waiting_heartbeat_);
  } else {
    waiting_heartbeat_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tenon.elect.protobuf.ElectMessage)
}

void ElectMessage::SharedCtor() {
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_res_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&elect_block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waiting_heartbeat_) -
      reinterpret_cast<char*>(&elect_block_)) + sizeof(waiting_heartbeat_));
}

ElectMessage::~ElectMessage() {
  // @@protoc_insertion_point(destructor:tenon.elect.protobuf.ElectMessage)
  SharedDtor();
}

void ElectMessage::SharedDtor() {
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_res_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete elect_block_;
  if (this != internal_default_instance()) delete prev_elect_block_;
  if (this != internal_default_instance()) delete waiting_nodes_;
  if (this != internal_default_instance()) delete waiting_heartbeat_;
}

void ElectMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ElectMessage::descriptor() {
  ::protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ElectMessage& ElectMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_elect_2eproto::scc_info_ElectMessage.base);
  return *internal_default_instance();
}


void ElectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.elect.protobuf.ElectMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      pubkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sign_ch_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      sign_res_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(elect_block_ != NULL);
      elect_block_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(prev_elect_block_ != NULL);
      prev_elect_block_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(waiting_nodes_ != NULL);
      waiting_nodes_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(waiting_heartbeat_ != NULL);
      waiting_heartbeat_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ElectMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.elect.protobuf.ElectMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tenon.elect.protobuf.ElectBlock elect_block = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_elect_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.elect.protobuf.ElectBlock prev_elect_block = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prev_elect_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_waiting_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pubkey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign_ch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_ch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign_res = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_waiting_heartbeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.elect.protobuf.ElectMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.elect.protobuf.ElectMessage)
  return false;
#undef DO_
}

void ElectMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.elect.protobuf.ElectMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.elect.protobuf.ElectBlock elect_block = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_elect_block(), output);
  }

  // optional .tenon.elect.protobuf.ElectBlock prev_elect_block = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_prev_elect_block(), output);
  }

  // optional .tenon.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_waiting_nodes(), output);
  }

  // optional bytes pubkey = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pubkey(), output);
  }

  // optional bytes sign_ch = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sign_ch(), output);
  }

  // optional bytes sign_res = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->sign_res(), output);
  }

  // optional .tenon.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_waiting_heartbeat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.elect.protobuf.ElectMessage)
}

::google::protobuf::uint8* ElectMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.elect.protobuf.ElectMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.elect.protobuf.ElectBlock elect_block = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_elect_block(), deterministic, target);
  }

  // optional .tenon.elect.protobuf.ElectBlock prev_elect_block = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_prev_elect_block(), deterministic, target);
  }

  // optional .tenon.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_waiting_nodes(), deterministic, target);
  }

  // optional bytes pubkey = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pubkey(), target);
  }

  // optional bytes sign_ch = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sign_ch(), target);
  }

  // optional bytes sign_res = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sign_res(), target);
  }

  // optional .tenon.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_waiting_heartbeat(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.elect.protobuf.ElectMessage)
  return target;
}

size_t ElectMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.elect.protobuf.ElectMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes pubkey = 4;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional bytes sign_ch = 5;
    if (has_sign_ch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_ch());
    }

    // optional bytes sign_res = 6;
    if (has_sign_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_res());
    }

    // optional .tenon.elect.protobuf.ElectBlock elect_block = 1;
    if (has_elect_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *elect_block_);
    }

    // optional .tenon.elect.protobuf.ElectBlock prev_elect_block = 2;
    if (has_prev_elect_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *prev_elect_block_);
    }

    // optional .tenon.elect.protobuf.WaitingNodesMessage waiting_nodes = 3;
    if (has_waiting_nodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *waiting_nodes_);
    }

    // optional .tenon.elect.protobuf.WaitingNodeHeartbeat waiting_heartbeat = 7;
    if (has_waiting_heartbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *waiting_heartbeat_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElectMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.elect.protobuf.ElectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ElectMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ElectMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.elect.protobuf.ElectMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.elect.protobuf.ElectMessage)
    MergeFrom(*source);
  }
}

void ElectMessage::MergeFrom(const ElectMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.elect.protobuf.ElectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pubkey();
      pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sign_ch();
      sign_ch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_ch_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sign_res();
      sign_res_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_res_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_elect_block()->::tenon::elect::protobuf::ElectBlock::MergeFrom(from.elect_block());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_prev_elect_block()->::tenon::elect::protobuf::ElectBlock::MergeFrom(from.prev_elect_block());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_waiting_nodes()->::tenon::elect::protobuf::WaitingNodesMessage::MergeFrom(from.waiting_nodes());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_waiting_heartbeat()->::tenon::elect::protobuf::WaitingNodeHeartbeat::MergeFrom(from.waiting_heartbeat());
    }
  }
}

void ElectMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.elect.protobuf.ElectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectMessage::CopyFrom(const ElectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.elect.protobuf.ElectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectMessage::IsInitialized() const {
  return true;
}

void ElectMessage::Swap(ElectMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ElectMessage::InternalSwap(ElectMessage* other) {
  using std::swap;
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_ch_.Swap(&other->sign_ch_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_res_.Swap(&other->sign_res_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(elect_block_, other->elect_block_);
  swap(prev_elect_block_, other->prev_elect_block_);
  swap(waiting_nodes_, other->waiting_nodes_);
  swap(waiting_heartbeat_, other->waiting_heartbeat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ElectMessage::GetMetadata() const {
  protobuf_elect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_elect_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace elect
}  // namespace tenon
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::elect::protobuf::BlsPublicKey* Arena::CreateMaybeMessage< ::tenon::elect::protobuf::BlsPublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::elect::protobuf::BlsPublicKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::elect::protobuf::member* Arena::CreateMaybeMessage< ::tenon::elect::protobuf::member >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::elect::protobuf::member >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::elect::protobuf::PrevMembers* Arena::CreateMaybeMessage< ::tenon::elect::protobuf::PrevMembers >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::elect::protobuf::PrevMembers >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::elect::protobuf::ElectBlock* Arena::CreateMaybeMessage< ::tenon::elect::protobuf::ElectBlock >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::elect::protobuf::ElectBlock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::elect::protobuf::WaitingNodesMessage* Arena::CreateMaybeMessage< ::tenon::elect::protobuf::WaitingNodesMessage >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::elect::protobuf::WaitingNodesMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::elect::protobuf::WaitingNodeHeartbeat* Arena::CreateMaybeMessage< ::tenon::elect::protobuf::WaitingNodeHeartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::elect::protobuf::WaitingNodeHeartbeat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::elect::protobuf::ElectMessage* Arena::CreateMaybeMessage< ::tenon::elect::protobuf::ElectMessage >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::elect::protobuf::ElectMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
