// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elect.proto

#ifndef PROTOBUF_INCLUDED_elect_2eproto
#define PROTOBUF_INCLUDED_elect_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_elect_2eproto 

namespace protobuf_elect_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_elect_2eproto
namespace tenon {
namespace elect {
namespace protobuf {
class ElectBlock;
class ElectBlockDefaultTypeInternal;
extern ElectBlockDefaultTypeInternal _ElectBlock_default_instance_;
class ElectMessage;
class ElectMessageDefaultTypeInternal;
extern ElectMessageDefaultTypeInternal _ElectMessage_default_instance_;
class WaitingNodesMessage;
class WaitingNodesMessageDefaultTypeInternal;
extern WaitingNodesMessageDefaultTypeInternal _WaitingNodesMessage_default_instance_;
class member;
class memberDefaultTypeInternal;
extern memberDefaultTypeInternal _member_default_instance_;
}  // namespace protobuf
}  // namespace elect
}  // namespace tenon
namespace google {
namespace protobuf {
template<> ::tenon::elect::protobuf::ElectBlock* Arena::CreateMaybeMessage<::tenon::elect::protobuf::ElectBlock>(Arena*);
template<> ::tenon::elect::protobuf::ElectMessage* Arena::CreateMaybeMessage<::tenon::elect::protobuf::ElectMessage>(Arena*);
template<> ::tenon::elect::protobuf::WaitingNodesMessage* Arena::CreateMaybeMessage<::tenon::elect::protobuf::WaitingNodesMessage>(Arena*);
template<> ::tenon::elect::protobuf::member* Arena::CreateMaybeMessage<::tenon::elect::protobuf::member>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tenon {
namespace elect {
namespace protobuf {

// ===================================================================

class member : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.elect.protobuf.member) */ {
 public:
  member();
  virtual ~member();

  member(const member& from);

  inline member& operator=(const member& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  member(member&& from) noexcept
    : member() {
    *this = ::std::move(from);
  }

  inline member& operator=(member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const member* internal_default_instance() {
    return reinterpret_cast<const member*>(
               &_member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(member* other);
  friend void swap(member& a, member& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline member* New() const final {
    return CreateMaybeMessage<member>(NULL);
  }

  member* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<member>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const member& from);
  void MergeFrom(const member& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(member* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes pubkey = 2;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 2;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional bytes sign = 3;
  bool has_sign() const;
  void clear_sign();
  static const int kSignFieldNumber = 3;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // optional bytes dht_key = 6;
  bool has_dht_key() const;
  void clear_dht_key();
  static const int kDhtKeyFieldNumber = 6;
  const ::std::string& dht_key() const;
  void set_dht_key(const ::std::string& value);
  #if LANG_CXX11
  void set_dht_key(::std::string&& value);
  #endif
  void set_dht_key(const char* value);
  void set_dht_key(const void* value, size_t size);
  ::std::string* mutable_dht_key();
  ::std::string* release_dht_key();
  void set_allocated_dht_key(::std::string* dht_key);

  // optional bytes public_ip = 8;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 8;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const void* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional bytes local_ip = 10;
  bool has_local_ip() const;
  void clear_local_ip();
  static const int kLocalIpFieldNumber = 10;
  const ::std::string& local_ip() const;
  void set_local_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_local_ip(::std::string&& value);
  #endif
  void set_local_ip(const char* value);
  void set_local_ip(const void* value, size_t size);
  ::std::string* mutable_local_ip();
  ::std::string* release_local_ip();
  void set_allocated_local_ip(::std::string* local_ip);

  // optional uint32 net_id = 4;
  bool has_net_id() const;
  void clear_net_id();
  static const int kNetIdFieldNumber = 4;
  ::google::protobuf::uint32 net_id() const;
  void set_net_id(::google::protobuf::uint32 value);

  // optional uint32 country = 5;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 5;
  ::google::protobuf::uint32 country() const;
  void set_country(::google::protobuf::uint32 value);

  // optional int32 nat_type = 7;
  bool has_nat_type() const;
  void clear_nat_type();
  static const int kNatTypeFieldNumber = 7;
  ::google::protobuf::int32 nat_type() const;
  void set_nat_type(::google::protobuf::int32 value);

  // optional uint32 public_port = 9;
  bool has_public_port() const;
  void clear_public_port();
  static const int kPublicPortFieldNumber = 9;
  ::google::protobuf::uint32 public_port() const;
  void set_public_port(::google::protobuf::uint32 value);

  // optional uint32 local_port = 11;
  bool has_local_port() const;
  void clear_local_port();
  static const int kLocalPortFieldNumber = 11;
  ::google::protobuf::uint32 local_port() const;
  void set_local_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.elect.protobuf.member)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_pubkey();
  void clear_has_pubkey();
  void set_has_sign();
  void clear_has_sign();
  void set_has_net_id();
  void clear_has_net_id();
  void set_has_country();
  void clear_has_country();
  void set_has_dht_key();
  void clear_has_dht_key();
  void set_has_nat_type();
  void clear_has_nat_type();
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_public_port();
  void clear_has_public_port();
  void set_has_local_ip();
  void clear_has_local_ip();
  void set_has_local_port();
  void clear_has_local_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::google::protobuf::internal::ArenaStringPtr dht_key_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  ::google::protobuf::internal::ArenaStringPtr local_ip_;
  ::google::protobuf::uint32 net_id_;
  ::google::protobuf::uint32 country_;
  ::google::protobuf::int32 nat_type_;
  ::google::protobuf::uint32 public_port_;
  ::google::protobuf::uint32 local_port_;
  friend struct ::protobuf_elect_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElectBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.elect.protobuf.ElectBlock) */ {
 public:
  ElectBlock();
  virtual ~ElectBlock();

  ElectBlock(const ElectBlock& from);

  inline ElectBlock& operator=(const ElectBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElectBlock(ElectBlock&& from) noexcept
    : ElectBlock() {
    *this = ::std::move(from);
  }

  inline ElectBlock& operator=(ElectBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ElectBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElectBlock* internal_default_instance() {
    return reinterpret_cast<const ElectBlock*>(
               &_ElectBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ElectBlock* other);
  friend void swap(ElectBlock& a, ElectBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElectBlock* New() const final {
    return CreateMaybeMessage<ElectBlock>(NULL);
  }

  ElectBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElectBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElectBlock& from);
  void MergeFrom(const ElectBlock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tenon.elect.protobuf.member in = 1;
  int in_size() const;
  void clear_in();
  static const int kInFieldNumber = 1;
  ::tenon::elect::protobuf::member* mutable_in(int index);
  ::google::protobuf::RepeatedPtrField< ::tenon::elect::protobuf::member >*
      mutable_in();
  const ::tenon::elect::protobuf::member& in(int index) const;
  ::tenon::elect::protobuf::member* add_in();
  const ::google::protobuf::RepeatedPtrField< ::tenon::elect::protobuf::member >&
      in() const;

  // repeated .tenon.elect.protobuf.member out = 2;
  int out_size() const;
  void clear_out();
  static const int kOutFieldNumber = 2;
  ::tenon::elect::protobuf::member* mutable_out(int index);
  ::google::protobuf::RepeatedPtrField< ::tenon::elect::protobuf::member >*
      mutable_out();
  const ::tenon::elect::protobuf::member& out(int index) const;
  ::tenon::elect::protobuf::member* add_out();
  const ::google::protobuf::RepeatedPtrField< ::tenon::elect::protobuf::member >&
      out() const;

  // optional bytes acc_pubkey = 3;
  bool has_acc_pubkey() const;
  void clear_acc_pubkey();
  static const int kAccPubkeyFieldNumber = 3;
  const ::std::string& acc_pubkey() const;
  void set_acc_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_acc_pubkey(::std::string&& value);
  #endif
  void set_acc_pubkey(const char* value);
  void set_acc_pubkey(const void* value, size_t size);
  ::std::string* mutable_acc_pubkey();
  ::std::string* release_acc_pubkey();
  void set_allocated_acc_pubkey(::std::string* acc_pubkey);

  // optional bytes acc_sign = 4;
  bool has_acc_sign() const;
  void clear_acc_sign();
  static const int kAccSignFieldNumber = 4;
  const ::std::string& acc_sign() const;
  void set_acc_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_acc_sign(::std::string&& value);
  #endif
  void set_acc_sign(const char* value);
  void set_acc_sign(const void* value, size_t size);
  ::std::string* mutable_acc_sign();
  ::std::string* release_acc_sign();
  void set_allocated_acc_sign(::std::string* acc_sign);

  // @@protoc_insertion_point(class_scope:tenon.elect.protobuf.ElectBlock)
 private:
  void set_has_acc_pubkey();
  void clear_has_acc_pubkey();
  void set_has_acc_sign();
  void clear_has_acc_sign();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tenon::elect::protobuf::member > in_;
  ::google::protobuf::RepeatedPtrField< ::tenon::elect::protobuf::member > out_;
  ::google::protobuf::internal::ArenaStringPtr acc_pubkey_;
  ::google::protobuf::internal::ArenaStringPtr acc_sign_;
  friend struct ::protobuf_elect_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WaitingNodesMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.elect.protobuf.WaitingNodesMessage) */ {
 public:
  WaitingNodesMessage();
  virtual ~WaitingNodesMessage();

  WaitingNodesMessage(const WaitingNodesMessage& from);

  inline WaitingNodesMessage& operator=(const WaitingNodesMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaitingNodesMessage(WaitingNodesMessage&& from) noexcept
    : WaitingNodesMessage() {
    *this = ::std::move(from);
  }

  inline WaitingNodesMessage& operator=(WaitingNodesMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WaitingNodesMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaitingNodesMessage* internal_default_instance() {
    return reinterpret_cast<const WaitingNodesMessage*>(
               &_WaitingNodesMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(WaitingNodesMessage* other);
  friend void swap(WaitingNodesMessage& a, WaitingNodesMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaitingNodesMessage* New() const final {
    return CreateMaybeMessage<WaitingNodesMessage>(NULL);
  }

  WaitingNodesMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WaitingNodesMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WaitingNodesMessage& from);
  void MergeFrom(const WaitingNodesMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitingNodesMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 nodes_filter = 1;
  int nodes_filter_size() const;
  void clear_nodes_filter();
  static const int kNodesFilterFieldNumber = 1;
  ::google::protobuf::uint64 nodes_filter(int index) const;
  void set_nodes_filter(int index, ::google::protobuf::uint64 value);
  void add_nodes_filter(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      nodes_filter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_nodes_filter();

  // optional uint32 waiting_shard_id = 2;
  bool has_waiting_shard_id() const;
  void clear_waiting_shard_id();
  static const int kWaitingShardIdFieldNumber = 2;
  ::google::protobuf::uint32 waiting_shard_id() const;
  void set_waiting_shard_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.elect.protobuf.WaitingNodesMessage)
 private:
  void set_has_waiting_shard_id();
  void clear_has_waiting_shard_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > nodes_filter_;
  ::google::protobuf::uint32 waiting_shard_id_;
  friend struct ::protobuf_elect_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElectMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.elect.protobuf.ElectMessage) */ {
 public:
  ElectMessage();
  virtual ~ElectMessage();

  ElectMessage(const ElectMessage& from);

  inline ElectMessage& operator=(const ElectMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElectMessage(ElectMessage&& from) noexcept
    : ElectMessage() {
    *this = ::std::move(from);
  }

  inline ElectMessage& operator=(ElectMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ElectMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElectMessage* internal_default_instance() {
    return reinterpret_cast<const ElectMessage*>(
               &_ElectMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ElectMessage* other);
  friend void swap(ElectMessage& a, ElectMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElectMessage* New() const final {
    return CreateMaybeMessage<ElectMessage>(NULL);
  }

  ElectMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElectMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElectMessage& from);
  void MergeFrom(const ElectMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes pubkey = 3;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 3;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional bytes sign_ch = 4;
  bool has_sign_ch() const;
  void clear_sign_ch();
  static const int kSignChFieldNumber = 4;
  const ::std::string& sign_ch() const;
  void set_sign_ch(const ::std::string& value);
  #if LANG_CXX11
  void set_sign_ch(::std::string&& value);
  #endif
  void set_sign_ch(const char* value);
  void set_sign_ch(const void* value, size_t size);
  ::std::string* mutable_sign_ch();
  ::std::string* release_sign_ch();
  void set_allocated_sign_ch(::std::string* sign_ch);

  // optional bytes sign_res = 5;
  bool has_sign_res() const;
  void clear_sign_res();
  static const int kSignResFieldNumber = 5;
  const ::std::string& sign_res() const;
  void set_sign_res(const ::std::string& value);
  #if LANG_CXX11
  void set_sign_res(::std::string&& value);
  #endif
  void set_sign_res(const char* value);
  void set_sign_res(const void* value, size_t size);
  ::std::string* mutable_sign_res();
  ::std::string* release_sign_res();
  void set_allocated_sign_res(::std::string* sign_res);

  // optional .tenon.elect.protobuf.ElectBlock elect_block = 1;
  bool has_elect_block() const;
  void clear_elect_block();
  static const int kElectBlockFieldNumber = 1;
  private:
  const ::tenon::elect::protobuf::ElectBlock& _internal_elect_block() const;
  public:
  const ::tenon::elect::protobuf::ElectBlock& elect_block() const;
  ::tenon::elect::protobuf::ElectBlock* release_elect_block();
  ::tenon::elect::protobuf::ElectBlock* mutable_elect_block();
  void set_allocated_elect_block(::tenon::elect::protobuf::ElectBlock* elect_block);

  // optional .tenon.elect.protobuf.WaitingNodesMessage waiting_nodes = 2;
  bool has_waiting_nodes() const;
  void clear_waiting_nodes();
  static const int kWaitingNodesFieldNumber = 2;
  private:
  const ::tenon::elect::protobuf::WaitingNodesMessage& _internal_waiting_nodes() const;
  public:
  const ::tenon::elect::protobuf::WaitingNodesMessage& waiting_nodes() const;
  ::tenon::elect::protobuf::WaitingNodesMessage* release_waiting_nodes();
  ::tenon::elect::protobuf::WaitingNodesMessage* mutable_waiting_nodes();
  void set_allocated_waiting_nodes(::tenon::elect::protobuf::WaitingNodesMessage* waiting_nodes);

  // @@protoc_insertion_point(class_scope:tenon.elect.protobuf.ElectMessage)
 private:
  void set_has_elect_block();
  void clear_has_elect_block();
  void set_has_waiting_nodes();
  void clear_has_waiting_nodes();
  void set_has_pubkey();
  void clear_has_pubkey();
  void set_has_sign_ch();
  void clear_has_sign_ch();
  void set_has_sign_res();
  void clear_has_sign_res();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr sign_ch_;
  ::google::protobuf::internal::ArenaStringPtr sign_res_;
  ::tenon::elect::protobuf::ElectBlock* elect_block_;
  ::tenon::elect::protobuf::WaitingNodesMessage* waiting_nodes_;
  friend struct ::protobuf_elect_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// member

// optional bytes id = 1;
inline bool member::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void member::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void member::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void member::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& member::id() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.member.id)
  return id_.GetNoArena();
}
inline void member::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.member.id)
}
#if LANG_CXX11
inline void member::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.elect.protobuf.member.id)
}
#endif
inline void member::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.elect.protobuf.member.id)
}
inline void member::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.elect.protobuf.member.id)
}
inline ::std::string* member::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.member.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* member::release_id() {
  // @@protoc_insertion_point(field_release:tenon.elect.protobuf.member.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void member::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tenon.elect.protobuf.member.id)
}

// optional bytes pubkey = 2;
inline bool member::has_pubkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void member::set_has_pubkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void member::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void member::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& member::pubkey() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.member.pubkey)
  return pubkey_.GetNoArena();
}
inline void member::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.member.pubkey)
}
#if LANG_CXX11
inline void member::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.elect.protobuf.member.pubkey)
}
#endif
inline void member::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.elect.protobuf.member.pubkey)
}
inline void member::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.elect.protobuf.member.pubkey)
}
inline ::std::string* member::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.member.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* member::release_pubkey() {
  // @@protoc_insertion_point(field_release:tenon.elect.protobuf.member.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void member::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:tenon.elect.protobuf.member.pubkey)
}

// optional bytes sign = 3;
inline bool member::has_sign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void member::set_has_sign() {
  _has_bits_[0] |= 0x00000004u;
}
inline void member::clear_has_sign() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void member::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign();
}
inline const ::std::string& member::sign() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.member.sign)
  return sign_.GetNoArena();
}
inline void member::set_sign(const ::std::string& value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.member.sign)
}
#if LANG_CXX11
inline void member::set_sign(::std::string&& value) {
  set_has_sign();
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.elect.protobuf.member.sign)
}
#endif
inline void member::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.elect.protobuf.member.sign)
}
inline void member::set_sign(const void* value, size_t size) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.elect.protobuf.member.sign)
}
inline ::std::string* member::mutable_sign() {
  set_has_sign();
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.member.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* member::release_sign() {
  // @@protoc_insertion_point(field_release:tenon.elect.protobuf.member.sign)
  if (!has_sign()) {
    return NULL;
  }
  clear_has_sign();
  return sign_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void member::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:tenon.elect.protobuf.member.sign)
}

// optional uint32 net_id = 4;
inline bool member::has_net_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void member::set_has_net_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void member::clear_has_net_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void member::clear_net_id() {
  net_id_ = 0u;
  clear_has_net_id();
}
inline ::google::protobuf::uint32 member::net_id() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.member.net_id)
  return net_id_;
}
inline void member::set_net_id(::google::protobuf::uint32 value) {
  set_has_net_id();
  net_id_ = value;
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.member.net_id)
}

// optional uint32 country = 5;
inline bool member::has_country() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void member::set_has_country() {
  _has_bits_[0] |= 0x00000080u;
}
inline void member::clear_has_country() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void member::clear_country() {
  country_ = 0u;
  clear_has_country();
}
inline ::google::protobuf::uint32 member::country() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.member.country)
  return country_;
}
inline void member::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.member.country)
}

// optional bytes dht_key = 6;
inline bool member::has_dht_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void member::set_has_dht_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void member::clear_has_dht_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void member::clear_dht_key() {
  dht_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dht_key();
}
inline const ::std::string& member::dht_key() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.member.dht_key)
  return dht_key_.GetNoArena();
}
inline void member::set_dht_key(const ::std::string& value) {
  set_has_dht_key();
  dht_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.member.dht_key)
}
#if LANG_CXX11
inline void member::set_dht_key(::std::string&& value) {
  set_has_dht_key();
  dht_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.elect.protobuf.member.dht_key)
}
#endif
inline void member::set_dht_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dht_key();
  dht_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.elect.protobuf.member.dht_key)
}
inline void member::set_dht_key(const void* value, size_t size) {
  set_has_dht_key();
  dht_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.elect.protobuf.member.dht_key)
}
inline ::std::string* member::mutable_dht_key() {
  set_has_dht_key();
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.member.dht_key)
  return dht_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* member::release_dht_key() {
  // @@protoc_insertion_point(field_release:tenon.elect.protobuf.member.dht_key)
  if (!has_dht_key()) {
    return NULL;
  }
  clear_has_dht_key();
  return dht_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void member::set_allocated_dht_key(::std::string* dht_key) {
  if (dht_key != NULL) {
    set_has_dht_key();
  } else {
    clear_has_dht_key();
  }
  dht_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dht_key);
  // @@protoc_insertion_point(field_set_allocated:tenon.elect.protobuf.member.dht_key)
}

// optional int32 nat_type = 7;
inline bool member::has_nat_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void member::set_has_nat_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void member::clear_has_nat_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void member::clear_nat_type() {
  nat_type_ = 0;
  clear_has_nat_type();
}
inline ::google::protobuf::int32 member::nat_type() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.member.nat_type)
  return nat_type_;
}
inline void member::set_nat_type(::google::protobuf::int32 value) {
  set_has_nat_type();
  nat_type_ = value;
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.member.nat_type)
}

// optional bytes public_ip = 8;
inline bool member::has_public_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void member::set_has_public_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void member::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void member::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& member::public_ip() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.member.public_ip)
  return public_ip_.GetNoArena();
}
inline void member::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.member.public_ip)
}
#if LANG_CXX11
inline void member::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.elect.protobuf.member.public_ip)
}
#endif
inline void member::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.elect.protobuf.member.public_ip)
}
inline void member::set_public_ip(const void* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.elect.protobuf.member.public_ip)
}
inline ::std::string* member::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.member.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* member::release_public_ip() {
  // @@protoc_insertion_point(field_release:tenon.elect.protobuf.member.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void member::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:tenon.elect.protobuf.member.public_ip)
}

// optional uint32 public_port = 9;
inline bool member::has_public_port() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void member::set_has_public_port() {
  _has_bits_[0] |= 0x00000200u;
}
inline void member::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void member::clear_public_port() {
  public_port_ = 0u;
  clear_has_public_port();
}
inline ::google::protobuf::uint32 member::public_port() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.member.public_port)
  return public_port_;
}
inline void member::set_public_port(::google::protobuf::uint32 value) {
  set_has_public_port();
  public_port_ = value;
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.member.public_port)
}

// optional bytes local_ip = 10;
inline bool member::has_local_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void member::set_has_local_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void member::clear_has_local_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void member::clear_local_ip() {
  local_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_local_ip();
}
inline const ::std::string& member::local_ip() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.member.local_ip)
  return local_ip_.GetNoArena();
}
inline void member::set_local_ip(const ::std::string& value) {
  set_has_local_ip();
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.member.local_ip)
}
#if LANG_CXX11
inline void member::set_local_ip(::std::string&& value) {
  set_has_local_ip();
  local_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.elect.protobuf.member.local_ip)
}
#endif
inline void member::set_local_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_local_ip();
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.elect.protobuf.member.local_ip)
}
inline void member::set_local_ip(const void* value, size_t size) {
  set_has_local_ip();
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.elect.protobuf.member.local_ip)
}
inline ::std::string* member::mutable_local_ip() {
  set_has_local_ip();
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.member.local_ip)
  return local_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* member::release_local_ip() {
  // @@protoc_insertion_point(field_release:tenon.elect.protobuf.member.local_ip)
  if (!has_local_ip()) {
    return NULL;
  }
  clear_has_local_ip();
  return local_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void member::set_allocated_local_ip(::std::string* local_ip) {
  if (local_ip != NULL) {
    set_has_local_ip();
  } else {
    clear_has_local_ip();
  }
  local_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_ip);
  // @@protoc_insertion_point(field_set_allocated:tenon.elect.protobuf.member.local_ip)
}

// optional uint32 local_port = 11;
inline bool member::has_local_port() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void member::set_has_local_port() {
  _has_bits_[0] |= 0x00000400u;
}
inline void member::clear_has_local_port() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void member::clear_local_port() {
  local_port_ = 0u;
  clear_has_local_port();
}
inline ::google::protobuf::uint32 member::local_port() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.member.local_port)
  return local_port_;
}
inline void member::set_local_port(::google::protobuf::uint32 value) {
  set_has_local_port();
  local_port_ = value;
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.member.local_port)
}

// -------------------------------------------------------------------

// ElectBlock

// repeated .tenon.elect.protobuf.member in = 1;
inline int ElectBlock::in_size() const {
  return in_.size();
}
inline void ElectBlock::clear_in() {
  in_.Clear();
}
inline ::tenon::elect::protobuf::member* ElectBlock::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.ElectBlock.in)
  return in_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tenon::elect::protobuf::member >*
ElectBlock::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:tenon.elect.protobuf.ElectBlock.in)
  return &in_;
}
inline const ::tenon::elect::protobuf::member& ElectBlock::in(int index) const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.ElectBlock.in)
  return in_.Get(index);
}
inline ::tenon::elect::protobuf::member* ElectBlock::add_in() {
  // @@protoc_insertion_point(field_add:tenon.elect.protobuf.ElectBlock.in)
  return in_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tenon::elect::protobuf::member >&
ElectBlock::in() const {
  // @@protoc_insertion_point(field_list:tenon.elect.protobuf.ElectBlock.in)
  return in_;
}

// repeated .tenon.elect.protobuf.member out = 2;
inline int ElectBlock::out_size() const {
  return out_.size();
}
inline void ElectBlock::clear_out() {
  out_.Clear();
}
inline ::tenon::elect::protobuf::member* ElectBlock::mutable_out(int index) {
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.ElectBlock.out)
  return out_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tenon::elect::protobuf::member >*
ElectBlock::mutable_out() {
  // @@protoc_insertion_point(field_mutable_list:tenon.elect.protobuf.ElectBlock.out)
  return &out_;
}
inline const ::tenon::elect::protobuf::member& ElectBlock::out(int index) const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.ElectBlock.out)
  return out_.Get(index);
}
inline ::tenon::elect::protobuf::member* ElectBlock::add_out() {
  // @@protoc_insertion_point(field_add:tenon.elect.protobuf.ElectBlock.out)
  return out_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tenon::elect::protobuf::member >&
ElectBlock::out() const {
  // @@protoc_insertion_point(field_list:tenon.elect.protobuf.ElectBlock.out)
  return out_;
}

// optional bytes acc_pubkey = 3;
inline bool ElectBlock::has_acc_pubkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ElectBlock::set_has_acc_pubkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ElectBlock::clear_has_acc_pubkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ElectBlock::clear_acc_pubkey() {
  acc_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_acc_pubkey();
}
inline const ::std::string& ElectBlock::acc_pubkey() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.ElectBlock.acc_pubkey)
  return acc_pubkey_.GetNoArena();
}
inline void ElectBlock::set_acc_pubkey(const ::std::string& value) {
  set_has_acc_pubkey();
  acc_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.ElectBlock.acc_pubkey)
}
#if LANG_CXX11
inline void ElectBlock::set_acc_pubkey(::std::string&& value) {
  set_has_acc_pubkey();
  acc_pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.elect.protobuf.ElectBlock.acc_pubkey)
}
#endif
inline void ElectBlock::set_acc_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_acc_pubkey();
  acc_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.elect.protobuf.ElectBlock.acc_pubkey)
}
inline void ElectBlock::set_acc_pubkey(const void* value, size_t size) {
  set_has_acc_pubkey();
  acc_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.elect.protobuf.ElectBlock.acc_pubkey)
}
inline ::std::string* ElectBlock::mutable_acc_pubkey() {
  set_has_acc_pubkey();
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.ElectBlock.acc_pubkey)
  return acc_pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ElectBlock::release_acc_pubkey() {
  // @@protoc_insertion_point(field_release:tenon.elect.protobuf.ElectBlock.acc_pubkey)
  if (!has_acc_pubkey()) {
    return NULL;
  }
  clear_has_acc_pubkey();
  return acc_pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ElectBlock::set_allocated_acc_pubkey(::std::string* acc_pubkey) {
  if (acc_pubkey != NULL) {
    set_has_acc_pubkey();
  } else {
    clear_has_acc_pubkey();
  }
  acc_pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acc_pubkey);
  // @@protoc_insertion_point(field_set_allocated:tenon.elect.protobuf.ElectBlock.acc_pubkey)
}

// optional bytes acc_sign = 4;
inline bool ElectBlock::has_acc_sign() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ElectBlock::set_has_acc_sign() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ElectBlock::clear_has_acc_sign() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ElectBlock::clear_acc_sign() {
  acc_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_acc_sign();
}
inline const ::std::string& ElectBlock::acc_sign() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.ElectBlock.acc_sign)
  return acc_sign_.GetNoArena();
}
inline void ElectBlock::set_acc_sign(const ::std::string& value) {
  set_has_acc_sign();
  acc_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.ElectBlock.acc_sign)
}
#if LANG_CXX11
inline void ElectBlock::set_acc_sign(::std::string&& value) {
  set_has_acc_sign();
  acc_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.elect.protobuf.ElectBlock.acc_sign)
}
#endif
inline void ElectBlock::set_acc_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_acc_sign();
  acc_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.elect.protobuf.ElectBlock.acc_sign)
}
inline void ElectBlock::set_acc_sign(const void* value, size_t size) {
  set_has_acc_sign();
  acc_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.elect.protobuf.ElectBlock.acc_sign)
}
inline ::std::string* ElectBlock::mutable_acc_sign() {
  set_has_acc_sign();
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.ElectBlock.acc_sign)
  return acc_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ElectBlock::release_acc_sign() {
  // @@protoc_insertion_point(field_release:tenon.elect.protobuf.ElectBlock.acc_sign)
  if (!has_acc_sign()) {
    return NULL;
  }
  clear_has_acc_sign();
  return acc_sign_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ElectBlock::set_allocated_acc_sign(::std::string* acc_sign) {
  if (acc_sign != NULL) {
    set_has_acc_sign();
  } else {
    clear_has_acc_sign();
  }
  acc_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acc_sign);
  // @@protoc_insertion_point(field_set_allocated:tenon.elect.protobuf.ElectBlock.acc_sign)
}

// -------------------------------------------------------------------

// WaitingNodesMessage

// repeated uint64 nodes_filter = 1;
inline int WaitingNodesMessage::nodes_filter_size() const {
  return nodes_filter_.size();
}
inline void WaitingNodesMessage::clear_nodes_filter() {
  nodes_filter_.Clear();
}
inline ::google::protobuf::uint64 WaitingNodesMessage::nodes_filter(int index) const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.WaitingNodesMessage.nodes_filter)
  return nodes_filter_.Get(index);
}
inline void WaitingNodesMessage::set_nodes_filter(int index, ::google::protobuf::uint64 value) {
  nodes_filter_.Set(index, value);
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.WaitingNodesMessage.nodes_filter)
}
inline void WaitingNodesMessage::add_nodes_filter(::google::protobuf::uint64 value) {
  nodes_filter_.Add(value);
  // @@protoc_insertion_point(field_add:tenon.elect.protobuf.WaitingNodesMessage.nodes_filter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
WaitingNodesMessage::nodes_filter() const {
  // @@protoc_insertion_point(field_list:tenon.elect.protobuf.WaitingNodesMessage.nodes_filter)
  return nodes_filter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
WaitingNodesMessage::mutable_nodes_filter() {
  // @@protoc_insertion_point(field_mutable_list:tenon.elect.protobuf.WaitingNodesMessage.nodes_filter)
  return &nodes_filter_;
}

// optional uint32 waiting_shard_id = 2;
inline bool WaitingNodesMessage::has_waiting_shard_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WaitingNodesMessage::set_has_waiting_shard_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WaitingNodesMessage::clear_has_waiting_shard_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WaitingNodesMessage::clear_waiting_shard_id() {
  waiting_shard_id_ = 0u;
  clear_has_waiting_shard_id();
}
inline ::google::protobuf::uint32 WaitingNodesMessage::waiting_shard_id() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.WaitingNodesMessage.waiting_shard_id)
  return waiting_shard_id_;
}
inline void WaitingNodesMessage::set_waiting_shard_id(::google::protobuf::uint32 value) {
  set_has_waiting_shard_id();
  waiting_shard_id_ = value;
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.WaitingNodesMessage.waiting_shard_id)
}

// -------------------------------------------------------------------

// ElectMessage

// optional .tenon.elect.protobuf.ElectBlock elect_block = 1;
inline bool ElectMessage::has_elect_block() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ElectMessage::set_has_elect_block() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ElectMessage::clear_has_elect_block() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ElectMessage::clear_elect_block() {
  if (elect_block_ != NULL) elect_block_->Clear();
  clear_has_elect_block();
}
inline const ::tenon::elect::protobuf::ElectBlock& ElectMessage::_internal_elect_block() const {
  return *elect_block_;
}
inline const ::tenon::elect::protobuf::ElectBlock& ElectMessage::elect_block() const {
  const ::tenon::elect::protobuf::ElectBlock* p = elect_block_;
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.ElectMessage.elect_block)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::elect::protobuf::ElectBlock*>(
      &::tenon::elect::protobuf::_ElectBlock_default_instance_);
}
inline ::tenon::elect::protobuf::ElectBlock* ElectMessage::release_elect_block() {
  // @@protoc_insertion_point(field_release:tenon.elect.protobuf.ElectMessage.elect_block)
  clear_has_elect_block();
  ::tenon::elect::protobuf::ElectBlock* temp = elect_block_;
  elect_block_ = NULL;
  return temp;
}
inline ::tenon::elect::protobuf::ElectBlock* ElectMessage::mutable_elect_block() {
  set_has_elect_block();
  if (elect_block_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::elect::protobuf::ElectBlock>(GetArenaNoVirtual());
    elect_block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.ElectMessage.elect_block)
  return elect_block_;
}
inline void ElectMessage::set_allocated_elect_block(::tenon::elect::protobuf::ElectBlock* elect_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete elect_block_;
  }
  if (elect_block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      elect_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, elect_block, submessage_arena);
    }
    set_has_elect_block();
  } else {
    clear_has_elect_block();
  }
  elect_block_ = elect_block;
  // @@protoc_insertion_point(field_set_allocated:tenon.elect.protobuf.ElectMessage.elect_block)
}

// optional .tenon.elect.protobuf.WaitingNodesMessage waiting_nodes = 2;
inline bool ElectMessage::has_waiting_nodes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ElectMessage::set_has_waiting_nodes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ElectMessage::clear_has_waiting_nodes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ElectMessage::clear_waiting_nodes() {
  if (waiting_nodes_ != NULL) waiting_nodes_->Clear();
  clear_has_waiting_nodes();
}
inline const ::tenon::elect::protobuf::WaitingNodesMessage& ElectMessage::_internal_waiting_nodes() const {
  return *waiting_nodes_;
}
inline const ::tenon::elect::protobuf::WaitingNodesMessage& ElectMessage::waiting_nodes() const {
  const ::tenon::elect::protobuf::WaitingNodesMessage* p = waiting_nodes_;
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.ElectMessage.waiting_nodes)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::elect::protobuf::WaitingNodesMessage*>(
      &::tenon::elect::protobuf::_WaitingNodesMessage_default_instance_);
}
inline ::tenon::elect::protobuf::WaitingNodesMessage* ElectMessage::release_waiting_nodes() {
  // @@protoc_insertion_point(field_release:tenon.elect.protobuf.ElectMessage.waiting_nodes)
  clear_has_waiting_nodes();
  ::tenon::elect::protobuf::WaitingNodesMessage* temp = waiting_nodes_;
  waiting_nodes_ = NULL;
  return temp;
}
inline ::tenon::elect::protobuf::WaitingNodesMessage* ElectMessage::mutable_waiting_nodes() {
  set_has_waiting_nodes();
  if (waiting_nodes_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::elect::protobuf::WaitingNodesMessage>(GetArenaNoVirtual());
    waiting_nodes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.ElectMessage.waiting_nodes)
  return waiting_nodes_;
}
inline void ElectMessage::set_allocated_waiting_nodes(::tenon::elect::protobuf::WaitingNodesMessage* waiting_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete waiting_nodes_;
  }
  if (waiting_nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      waiting_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, waiting_nodes, submessage_arena);
    }
    set_has_waiting_nodes();
  } else {
    clear_has_waiting_nodes();
  }
  waiting_nodes_ = waiting_nodes;
  // @@protoc_insertion_point(field_set_allocated:tenon.elect.protobuf.ElectMessage.waiting_nodes)
}

// optional bytes pubkey = 3;
inline bool ElectMessage::has_pubkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ElectMessage::set_has_pubkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ElectMessage::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ElectMessage::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& ElectMessage::pubkey() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.ElectMessage.pubkey)
  return pubkey_.GetNoArena();
}
inline void ElectMessage::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.ElectMessage.pubkey)
}
#if LANG_CXX11
inline void ElectMessage::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.elect.protobuf.ElectMessage.pubkey)
}
#endif
inline void ElectMessage::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.elect.protobuf.ElectMessage.pubkey)
}
inline void ElectMessage::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.elect.protobuf.ElectMessage.pubkey)
}
inline ::std::string* ElectMessage::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.ElectMessage.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ElectMessage::release_pubkey() {
  // @@protoc_insertion_point(field_release:tenon.elect.protobuf.ElectMessage.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ElectMessage::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:tenon.elect.protobuf.ElectMessage.pubkey)
}

// optional bytes sign_ch = 4;
inline bool ElectMessage::has_sign_ch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ElectMessage::set_has_sign_ch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ElectMessage::clear_has_sign_ch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ElectMessage::clear_sign_ch() {
  sign_ch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign_ch();
}
inline const ::std::string& ElectMessage::sign_ch() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.ElectMessage.sign_ch)
  return sign_ch_.GetNoArena();
}
inline void ElectMessage::set_sign_ch(const ::std::string& value) {
  set_has_sign_ch();
  sign_ch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.ElectMessage.sign_ch)
}
#if LANG_CXX11
inline void ElectMessage::set_sign_ch(::std::string&& value) {
  set_has_sign_ch();
  sign_ch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.elect.protobuf.ElectMessage.sign_ch)
}
#endif
inline void ElectMessage::set_sign_ch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign_ch();
  sign_ch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.elect.protobuf.ElectMessage.sign_ch)
}
inline void ElectMessage::set_sign_ch(const void* value, size_t size) {
  set_has_sign_ch();
  sign_ch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.elect.protobuf.ElectMessage.sign_ch)
}
inline ::std::string* ElectMessage::mutable_sign_ch() {
  set_has_sign_ch();
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.ElectMessage.sign_ch)
  return sign_ch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ElectMessage::release_sign_ch() {
  // @@protoc_insertion_point(field_release:tenon.elect.protobuf.ElectMessage.sign_ch)
  if (!has_sign_ch()) {
    return NULL;
  }
  clear_has_sign_ch();
  return sign_ch_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ElectMessage::set_allocated_sign_ch(::std::string* sign_ch) {
  if (sign_ch != NULL) {
    set_has_sign_ch();
  } else {
    clear_has_sign_ch();
  }
  sign_ch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_ch);
  // @@protoc_insertion_point(field_set_allocated:tenon.elect.protobuf.ElectMessage.sign_ch)
}

// optional bytes sign_res = 5;
inline bool ElectMessage::has_sign_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ElectMessage::set_has_sign_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ElectMessage::clear_has_sign_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ElectMessage::clear_sign_res() {
  sign_res_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign_res();
}
inline const ::std::string& ElectMessage::sign_res() const {
  // @@protoc_insertion_point(field_get:tenon.elect.protobuf.ElectMessage.sign_res)
  return sign_res_.GetNoArena();
}
inline void ElectMessage::set_sign_res(const ::std::string& value) {
  set_has_sign_res();
  sign_res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.elect.protobuf.ElectMessage.sign_res)
}
#if LANG_CXX11
inline void ElectMessage::set_sign_res(::std::string&& value) {
  set_has_sign_res();
  sign_res_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.elect.protobuf.ElectMessage.sign_res)
}
#endif
inline void ElectMessage::set_sign_res(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign_res();
  sign_res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.elect.protobuf.ElectMessage.sign_res)
}
inline void ElectMessage::set_sign_res(const void* value, size_t size) {
  set_has_sign_res();
  sign_res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.elect.protobuf.ElectMessage.sign_res)
}
inline ::std::string* ElectMessage::mutable_sign_res() {
  set_has_sign_res();
  // @@protoc_insertion_point(field_mutable:tenon.elect.protobuf.ElectMessage.sign_res)
  return sign_res_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ElectMessage::release_sign_res() {
  // @@protoc_insertion_point(field_release:tenon.elect.protobuf.ElectMessage.sign_res)
  if (!has_sign_res()) {
    return NULL;
  }
  clear_has_sign_res();
  return sign_res_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ElectMessage::set_allocated_sign_res(::std::string* sign_res) {
  if (sign_res != NULL) {
    set_has_sign_res();
  } else {
    clear_has_sign_res();
  }
  sign_res_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_res);
  // @@protoc_insertion_point(field_set_allocated:tenon.elect.protobuf.ElectMessage.sign_res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace elect
}  // namespace tenon

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_elect_2eproto
