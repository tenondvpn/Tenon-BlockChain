// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef PROTOBUF_INCLUDED_service_2eproto
#define PROTOBUF_INCLUDED_service_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_service_2eproto 

namespace protobuf_service_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_service_2eproto
namespace tenon {
namespace service {
namespace protobuf {
class GetVpnInfoRequest;
class GetVpnInfoRequestDefaultTypeInternal;
extern GetVpnInfoRequestDefaultTypeInternal _GetVpnInfoRequest_default_instance_;
class GetVpnInfoResponse;
class GetVpnInfoResponseDefaultTypeInternal;
extern GetVpnInfoResponseDefaultTypeInternal _GetVpnInfoResponse_default_instance_;
class ServiceMessage;
class ServiceMessageDefaultTypeInternal;
extern ServiceMessageDefaultTypeInternal _ServiceMessage_default_instance_;
class VlanNodeHeartbeat;
class VlanNodeHeartbeatDefaultTypeInternal;
extern VlanNodeHeartbeatDefaultTypeInternal _VlanNodeHeartbeat_default_instance_;
}  // namespace protobuf
}  // namespace service
}  // namespace tenon
namespace google {
namespace protobuf {
template<> ::tenon::service::protobuf::GetVpnInfoRequest* Arena::CreateMaybeMessage<::tenon::service::protobuf::GetVpnInfoRequest>(Arena*);
template<> ::tenon::service::protobuf::GetVpnInfoResponse* Arena::CreateMaybeMessage<::tenon::service::protobuf::GetVpnInfoResponse>(Arena*);
template<> ::tenon::service::protobuf::ServiceMessage* Arena::CreateMaybeMessage<::tenon::service::protobuf::ServiceMessage>(Arena*);
template<> ::tenon::service::protobuf::VlanNodeHeartbeat* Arena::CreateMaybeMessage<::tenon::service::protobuf::VlanNodeHeartbeat>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tenon {
namespace service {
namespace protobuf {

// ===================================================================

class GetVpnInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.service.protobuf.GetVpnInfoRequest) */ {
 public:
  GetVpnInfoRequest();
  virtual ~GetVpnInfoRequest();

  GetVpnInfoRequest(const GetVpnInfoRequest& from);

  inline GetVpnInfoRequest& operator=(const GetVpnInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVpnInfoRequest(GetVpnInfoRequest&& from) noexcept
    : GetVpnInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetVpnInfoRequest& operator=(GetVpnInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVpnInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVpnInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetVpnInfoRequest*>(
               &_GetVpnInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetVpnInfoRequest* other);
  friend void swap(GetVpnInfoRequest& a, GetVpnInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVpnInfoRequest* New() const final {
    return CreateMaybeMessage<GetVpnInfoRequest>(NULL);
  }

  GetVpnInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVpnInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVpnInfoRequest& from);
  void MergeFrom(const GetVpnInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVpnInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes pubkey = 1;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 1;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional bytes sign_challenge = 2;
  bool has_sign_challenge() const;
  void clear_sign_challenge();
  static const int kSignChallengeFieldNumber = 2;
  const ::std::string& sign_challenge() const;
  void set_sign_challenge(const ::std::string& value);
  #if LANG_CXX11
  void set_sign_challenge(::std::string&& value);
  #endif
  void set_sign_challenge(const char* value);
  void set_sign_challenge(const void* value, size_t size);
  ::std::string* mutable_sign_challenge();
  ::std::string* release_sign_challenge();
  void set_allocated_sign_challenge(::std::string* sign_challenge);

  // optional bytes sign_response = 3;
  bool has_sign_response() const;
  void clear_sign_response();
  static const int kSignResponseFieldNumber = 3;
  const ::std::string& sign_response() const;
  void set_sign_response(const ::std::string& value);
  #if LANG_CXX11
  void set_sign_response(::std::string&& value);
  #endif
  void set_sign_response(const char* value);
  void set_sign_response(const void* value, size_t size);
  ::std::string* mutable_sign_response();
  ::std::string* release_sign_response();
  void set_allocated_sign_response(::std::string* sign_response);

  // optional bytes method = 5;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 5;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const void* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // optional bool heartbeat = 4;
  bool has_heartbeat() const;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 4;
  bool heartbeat() const;
  void set_heartbeat(bool value);

  // @@protoc_insertion_point(class_scope:tenon.service.protobuf.GetVpnInfoRequest)
 private:
  void set_has_pubkey();
  void clear_has_pubkey();
  void set_has_sign_challenge();
  void clear_has_sign_challenge();
  void set_has_sign_response();
  void clear_has_sign_response();
  void set_has_heartbeat();
  void clear_has_heartbeat();
  void set_has_method();
  void clear_has_method();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr sign_challenge_;
  ::google::protobuf::internal::ArenaStringPtr sign_response_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  bool heartbeat_;
  friend struct ::protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVpnInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.service.protobuf.GetVpnInfoResponse) */ {
 public:
  GetVpnInfoResponse();
  virtual ~GetVpnInfoResponse();

  GetVpnInfoResponse(const GetVpnInfoResponse& from);

  inline GetVpnInfoResponse& operator=(const GetVpnInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVpnInfoResponse(GetVpnInfoResponse&& from) noexcept
    : GetVpnInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetVpnInfoResponse& operator=(GetVpnInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVpnInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVpnInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetVpnInfoResponse*>(
               &_GetVpnInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetVpnInfoResponse* other);
  friend void swap(GetVpnInfoResponse& a, GetVpnInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVpnInfoResponse* New() const final {
    return CreateMaybeMessage<GetVpnInfoResponse>(NULL);
  }

  GetVpnInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVpnInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVpnInfoResponse& from);
  void MergeFrom(const GetVpnInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVpnInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional bytes country = 4;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 4;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const void* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional bytes pubkey = 6;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 6;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional uint32 svr_port = 2;
  bool has_svr_port() const;
  void clear_svr_port();
  static const int kSvrPortFieldNumber = 2;
  ::google::protobuf::uint32 svr_port() const;
  void set_svr_port(::google::protobuf::uint32 value);

  // optional uint32 route_port = 3;
  bool has_route_port() const;
  void clear_route_port();
  static const int kRoutePortFieldNumber = 3;
  ::google::protobuf::uint32 route_port() const;
  void set_route_port(::google::protobuf::uint32 value);

  // optional int32 secnum = 5;
  bool has_secnum() const;
  void clear_secnum();
  static const int kSecnumFieldNumber = 5;
  ::google::protobuf::int32 secnum() const;
  void set_secnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tenon.service.protobuf.GetVpnInfoResponse)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_svr_port();
  void clear_has_svr_port();
  void set_has_route_port();
  void clear_has_route_port();
  void set_has_country();
  void clear_has_country();
  void set_has_secnum();
  void clear_has_secnum();
  void set_has_pubkey();
  void clear_has_pubkey();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::uint32 svr_port_;
  ::google::protobuf::uint32 route_port_;
  ::google::protobuf::int32 secnum_;
  friend struct ::protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VlanNodeHeartbeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.service.protobuf.VlanNodeHeartbeat) */ {
 public:
  VlanNodeHeartbeat();
  virtual ~VlanNodeHeartbeat();

  VlanNodeHeartbeat(const VlanNodeHeartbeat& from);

  inline VlanNodeHeartbeat& operator=(const VlanNodeHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VlanNodeHeartbeat(VlanNodeHeartbeat&& from) noexcept
    : VlanNodeHeartbeat() {
    *this = ::std::move(from);
  }

  inline VlanNodeHeartbeat& operator=(VlanNodeHeartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VlanNodeHeartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VlanNodeHeartbeat* internal_default_instance() {
    return reinterpret_cast<const VlanNodeHeartbeat*>(
               &_VlanNodeHeartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(VlanNodeHeartbeat* other);
  friend void swap(VlanNodeHeartbeat& a, VlanNodeHeartbeat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VlanNodeHeartbeat* New() const final {
    return CreateMaybeMessage<VlanNodeHeartbeat>(NULL);
  }

  VlanNodeHeartbeat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VlanNodeHeartbeat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VlanNodeHeartbeat& from);
  void MergeFrom(const VlanNodeHeartbeat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VlanNodeHeartbeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes node_id = 2;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_id(::std::string&& value);
  #endif
  void set_node_id(const char* value);
  void set_node_id(const void* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);

  // optional bytes dht_key = 3;
  bool has_dht_key() const;
  void clear_dht_key();
  static const int kDhtKeyFieldNumber = 3;
  const ::std::string& dht_key() const;
  void set_dht_key(const ::std::string& value);
  #if LANG_CXX11
  void set_dht_key(::std::string&& value);
  #endif
  void set_dht_key(const char* value);
  void set_dht_key(const void* value, size_t size);
  ::std::string* mutable_dht_key();
  ::std::string* release_dht_key();
  void set_allocated_dht_key(::std::string* dht_key);

  // optional bytes public_key = 4;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 4;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // optional string public_ip = 5;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 5;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const char* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional int32 nat_type = 1;
  bool has_nat_type() const;
  void clear_nat_type();
  static const int kNatTypeFieldNumber = 1;
  ::google::protobuf::int32 nat_type() const;
  void set_nat_type(::google::protobuf::int32 value);

  // optional int32 udp_port = 6;
  bool has_udp_port() const;
  void clear_udp_port();
  static const int kUdpPortFieldNumber = 6;
  ::google::protobuf::int32 udp_port() const;
  void set_udp_port(::google::protobuf::int32 value);

  // optional int32 tcp_port = 7;
  bool has_tcp_port() const;
  void clear_tcp_port();
  static const int kTcpPortFieldNumber = 7;
  ::google::protobuf::int32 tcp_port() const;
  void set_tcp_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tenon.service.protobuf.VlanNodeHeartbeat)
 private:
  void set_has_nat_type();
  void clear_has_nat_type();
  void set_has_node_id();
  void clear_has_node_id();
  void set_has_dht_key();
  void clear_has_dht_key();
  void set_has_public_key();
  void clear_has_public_key();
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_udp_port();
  void clear_has_udp_port();
  void set_has_tcp_port();
  void clear_has_tcp_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  ::google::protobuf::internal::ArenaStringPtr dht_key_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  ::google::protobuf::int32 nat_type_;
  ::google::protobuf::int32 udp_port_;
  ::google::protobuf::int32 tcp_port_;
  friend struct ::protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.service.protobuf.ServiceMessage) */ {
 public:
  ServiceMessage();
  virtual ~ServiceMessage();

  ServiceMessage(const ServiceMessage& from);

  inline ServiceMessage& operator=(const ServiceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceMessage(ServiceMessage&& from) noexcept
    : ServiceMessage() {
    *this = ::std::move(from);
  }

  inline ServiceMessage& operator=(ServiceMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceMessage* internal_default_instance() {
    return reinterpret_cast<const ServiceMessage*>(
               &_ServiceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ServiceMessage* other);
  friend void swap(ServiceMessage& a, ServiceMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceMessage* New() const final {
    return CreateMaybeMessage<ServiceMessage>(NULL);
  }

  ServiceMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceMessage& from);
  void MergeFrom(const ServiceMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tenon.service.protobuf.GetVpnInfoRequest vpn_req = 1;
  bool has_vpn_req() const;
  void clear_vpn_req();
  static const int kVpnReqFieldNumber = 1;
  private:
  const ::tenon::service::protobuf::GetVpnInfoRequest& _internal_vpn_req() const;
  public:
  const ::tenon::service::protobuf::GetVpnInfoRequest& vpn_req() const;
  ::tenon::service::protobuf::GetVpnInfoRequest* release_vpn_req();
  ::tenon::service::protobuf::GetVpnInfoRequest* mutable_vpn_req();
  void set_allocated_vpn_req(::tenon::service::protobuf::GetVpnInfoRequest* vpn_req);

  // optional .tenon.service.protobuf.GetVpnInfoResponse vpn_res = 2;
  bool has_vpn_res() const;
  void clear_vpn_res();
  static const int kVpnResFieldNumber = 2;
  private:
  const ::tenon::service::protobuf::GetVpnInfoResponse& _internal_vpn_res() const;
  public:
  const ::tenon::service::protobuf::GetVpnInfoResponse& vpn_res() const;
  ::tenon::service::protobuf::GetVpnInfoResponse* release_vpn_res();
  ::tenon::service::protobuf::GetVpnInfoResponse* mutable_vpn_res();
  void set_allocated_vpn_res(::tenon::service::protobuf::GetVpnInfoResponse* vpn_res);

  // optional .tenon.service.protobuf.VlanNodeHeartbeat vlan_heartbeat = 3;
  bool has_vlan_heartbeat() const;
  void clear_vlan_heartbeat();
  static const int kVlanHeartbeatFieldNumber = 3;
  private:
  const ::tenon::service::protobuf::VlanNodeHeartbeat& _internal_vlan_heartbeat() const;
  public:
  const ::tenon::service::protobuf::VlanNodeHeartbeat& vlan_heartbeat() const;
  ::tenon::service::protobuf::VlanNodeHeartbeat* release_vlan_heartbeat();
  ::tenon::service::protobuf::VlanNodeHeartbeat* mutable_vlan_heartbeat();
  void set_allocated_vlan_heartbeat(::tenon::service::protobuf::VlanNodeHeartbeat* vlan_heartbeat);

  // @@protoc_insertion_point(class_scope:tenon.service.protobuf.ServiceMessage)
 private:
  void set_has_vpn_req();
  void clear_has_vpn_req();
  void set_has_vpn_res();
  void clear_has_vpn_res();
  void set_has_vlan_heartbeat();
  void clear_has_vlan_heartbeat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::tenon::service::protobuf::GetVpnInfoRequest* vpn_req_;
  ::tenon::service::protobuf::GetVpnInfoResponse* vpn_res_;
  ::tenon::service::protobuf::VlanNodeHeartbeat* vlan_heartbeat_;
  friend struct ::protobuf_service_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetVpnInfoRequest

// optional bytes pubkey = 1;
inline bool GetVpnInfoRequest::has_pubkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetVpnInfoRequest::set_has_pubkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetVpnInfoRequest::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetVpnInfoRequest::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& GetVpnInfoRequest::pubkey() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.GetVpnInfoRequest.pubkey)
  return pubkey_.GetNoArena();
}
inline void GetVpnInfoRequest::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.GetVpnInfoRequest.pubkey)
}
#if LANG_CXX11
inline void GetVpnInfoRequest::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.service.protobuf.GetVpnInfoRequest.pubkey)
}
#endif
inline void GetVpnInfoRequest::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.service.protobuf.GetVpnInfoRequest.pubkey)
}
inline void GetVpnInfoRequest::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.service.protobuf.GetVpnInfoRequest.pubkey)
}
inline ::std::string* GetVpnInfoRequest::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.GetVpnInfoRequest.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVpnInfoRequest::release_pubkey() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.GetVpnInfoRequest.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVpnInfoRequest::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.GetVpnInfoRequest.pubkey)
}

// optional bytes sign_challenge = 2;
inline bool GetVpnInfoRequest::has_sign_challenge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetVpnInfoRequest::set_has_sign_challenge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetVpnInfoRequest::clear_has_sign_challenge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetVpnInfoRequest::clear_sign_challenge() {
  sign_challenge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign_challenge();
}
inline const ::std::string& GetVpnInfoRequest::sign_challenge() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.GetVpnInfoRequest.sign_challenge)
  return sign_challenge_.GetNoArena();
}
inline void GetVpnInfoRequest::set_sign_challenge(const ::std::string& value) {
  set_has_sign_challenge();
  sign_challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.GetVpnInfoRequest.sign_challenge)
}
#if LANG_CXX11
inline void GetVpnInfoRequest::set_sign_challenge(::std::string&& value) {
  set_has_sign_challenge();
  sign_challenge_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.service.protobuf.GetVpnInfoRequest.sign_challenge)
}
#endif
inline void GetVpnInfoRequest::set_sign_challenge(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign_challenge();
  sign_challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.service.protobuf.GetVpnInfoRequest.sign_challenge)
}
inline void GetVpnInfoRequest::set_sign_challenge(const void* value, size_t size) {
  set_has_sign_challenge();
  sign_challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.service.protobuf.GetVpnInfoRequest.sign_challenge)
}
inline ::std::string* GetVpnInfoRequest::mutable_sign_challenge() {
  set_has_sign_challenge();
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.GetVpnInfoRequest.sign_challenge)
  return sign_challenge_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVpnInfoRequest::release_sign_challenge() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.GetVpnInfoRequest.sign_challenge)
  if (!has_sign_challenge()) {
    return NULL;
  }
  clear_has_sign_challenge();
  return sign_challenge_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVpnInfoRequest::set_allocated_sign_challenge(::std::string* sign_challenge) {
  if (sign_challenge != NULL) {
    set_has_sign_challenge();
  } else {
    clear_has_sign_challenge();
  }
  sign_challenge_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_challenge);
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.GetVpnInfoRequest.sign_challenge)
}

// optional bytes sign_response = 3;
inline bool GetVpnInfoRequest::has_sign_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetVpnInfoRequest::set_has_sign_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetVpnInfoRequest::clear_has_sign_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetVpnInfoRequest::clear_sign_response() {
  sign_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign_response();
}
inline const ::std::string& GetVpnInfoRequest::sign_response() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.GetVpnInfoRequest.sign_response)
  return sign_response_.GetNoArena();
}
inline void GetVpnInfoRequest::set_sign_response(const ::std::string& value) {
  set_has_sign_response();
  sign_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.GetVpnInfoRequest.sign_response)
}
#if LANG_CXX11
inline void GetVpnInfoRequest::set_sign_response(::std::string&& value) {
  set_has_sign_response();
  sign_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.service.protobuf.GetVpnInfoRequest.sign_response)
}
#endif
inline void GetVpnInfoRequest::set_sign_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign_response();
  sign_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.service.protobuf.GetVpnInfoRequest.sign_response)
}
inline void GetVpnInfoRequest::set_sign_response(const void* value, size_t size) {
  set_has_sign_response();
  sign_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.service.protobuf.GetVpnInfoRequest.sign_response)
}
inline ::std::string* GetVpnInfoRequest::mutable_sign_response() {
  set_has_sign_response();
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.GetVpnInfoRequest.sign_response)
  return sign_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVpnInfoRequest::release_sign_response() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.GetVpnInfoRequest.sign_response)
  if (!has_sign_response()) {
    return NULL;
  }
  clear_has_sign_response();
  return sign_response_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVpnInfoRequest::set_allocated_sign_response(::std::string* sign_response) {
  if (sign_response != NULL) {
    set_has_sign_response();
  } else {
    clear_has_sign_response();
  }
  sign_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_response);
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.GetVpnInfoRequest.sign_response)
}

// optional bool heartbeat = 4;
inline bool GetVpnInfoRequest::has_heartbeat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetVpnInfoRequest::set_has_heartbeat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetVpnInfoRequest::clear_has_heartbeat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetVpnInfoRequest::clear_heartbeat() {
  heartbeat_ = false;
  clear_has_heartbeat();
}
inline bool GetVpnInfoRequest::heartbeat() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.GetVpnInfoRequest.heartbeat)
  return heartbeat_;
}
inline void GetVpnInfoRequest::set_heartbeat(bool value) {
  set_has_heartbeat();
  heartbeat_ = value;
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.GetVpnInfoRequest.heartbeat)
}

// optional bytes method = 5;
inline bool GetVpnInfoRequest::has_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetVpnInfoRequest::set_has_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetVpnInfoRequest::clear_has_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetVpnInfoRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
inline const ::std::string& GetVpnInfoRequest::method() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.GetVpnInfoRequest.method)
  return method_.GetNoArena();
}
inline void GetVpnInfoRequest::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.GetVpnInfoRequest.method)
}
#if LANG_CXX11
inline void GetVpnInfoRequest::set_method(::std::string&& value) {
  set_has_method();
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.service.protobuf.GetVpnInfoRequest.method)
}
#endif
inline void GetVpnInfoRequest::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.service.protobuf.GetVpnInfoRequest.method)
}
inline void GetVpnInfoRequest::set_method(const void* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.service.protobuf.GetVpnInfoRequest.method)
}
inline ::std::string* GetVpnInfoRequest::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.GetVpnInfoRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVpnInfoRequest::release_method() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.GetVpnInfoRequest.method)
  if (!has_method()) {
    return NULL;
  }
  clear_has_method();
  return method_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVpnInfoRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.GetVpnInfoRequest.method)
}

// -------------------------------------------------------------------

// GetVpnInfoResponse

// optional bytes ip = 1;
inline bool GetVpnInfoResponse::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetVpnInfoResponse::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetVpnInfoResponse::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetVpnInfoResponse::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& GetVpnInfoResponse::ip() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.GetVpnInfoResponse.ip)
  return ip_.GetNoArena();
}
inline void GetVpnInfoResponse::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.GetVpnInfoResponse.ip)
}
#if LANG_CXX11
inline void GetVpnInfoResponse::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.service.protobuf.GetVpnInfoResponse.ip)
}
#endif
inline void GetVpnInfoResponse::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.service.protobuf.GetVpnInfoResponse.ip)
}
inline void GetVpnInfoResponse::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.service.protobuf.GetVpnInfoResponse.ip)
}
inline ::std::string* GetVpnInfoResponse::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.GetVpnInfoResponse.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVpnInfoResponse::release_ip() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.GetVpnInfoResponse.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVpnInfoResponse::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.GetVpnInfoResponse.ip)
}

// optional uint32 svr_port = 2;
inline bool GetVpnInfoResponse::has_svr_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetVpnInfoResponse::set_has_svr_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetVpnInfoResponse::clear_has_svr_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetVpnInfoResponse::clear_svr_port() {
  svr_port_ = 0u;
  clear_has_svr_port();
}
inline ::google::protobuf::uint32 GetVpnInfoResponse::svr_port() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.GetVpnInfoResponse.svr_port)
  return svr_port_;
}
inline void GetVpnInfoResponse::set_svr_port(::google::protobuf::uint32 value) {
  set_has_svr_port();
  svr_port_ = value;
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.GetVpnInfoResponse.svr_port)
}

// optional uint32 route_port = 3;
inline bool GetVpnInfoResponse::has_route_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetVpnInfoResponse::set_has_route_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetVpnInfoResponse::clear_has_route_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetVpnInfoResponse::clear_route_port() {
  route_port_ = 0u;
  clear_has_route_port();
}
inline ::google::protobuf::uint32 GetVpnInfoResponse::route_port() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.GetVpnInfoResponse.route_port)
  return route_port_;
}
inline void GetVpnInfoResponse::set_route_port(::google::protobuf::uint32 value) {
  set_has_route_port();
  route_port_ = value;
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.GetVpnInfoResponse.route_port)
}

// optional bytes country = 4;
inline bool GetVpnInfoResponse::has_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetVpnInfoResponse::set_has_country() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetVpnInfoResponse::clear_has_country() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetVpnInfoResponse::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& GetVpnInfoResponse::country() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.GetVpnInfoResponse.country)
  return country_.GetNoArena();
}
inline void GetVpnInfoResponse::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.GetVpnInfoResponse.country)
}
#if LANG_CXX11
inline void GetVpnInfoResponse::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.service.protobuf.GetVpnInfoResponse.country)
}
#endif
inline void GetVpnInfoResponse::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.service.protobuf.GetVpnInfoResponse.country)
}
inline void GetVpnInfoResponse::set_country(const void* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.service.protobuf.GetVpnInfoResponse.country)
}
inline ::std::string* GetVpnInfoResponse::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.GetVpnInfoResponse.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVpnInfoResponse::release_country() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.GetVpnInfoResponse.country)
  if (!has_country()) {
    return NULL;
  }
  clear_has_country();
  return country_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVpnInfoResponse::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.GetVpnInfoResponse.country)
}

// optional int32 secnum = 5;
inline bool GetVpnInfoResponse::has_secnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetVpnInfoResponse::set_has_secnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetVpnInfoResponse::clear_has_secnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetVpnInfoResponse::clear_secnum() {
  secnum_ = 0;
  clear_has_secnum();
}
inline ::google::protobuf::int32 GetVpnInfoResponse::secnum() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.GetVpnInfoResponse.secnum)
  return secnum_;
}
inline void GetVpnInfoResponse::set_secnum(::google::protobuf::int32 value) {
  set_has_secnum();
  secnum_ = value;
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.GetVpnInfoResponse.secnum)
}

// optional bytes pubkey = 6;
inline bool GetVpnInfoResponse::has_pubkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetVpnInfoResponse::set_has_pubkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetVpnInfoResponse::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetVpnInfoResponse::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& GetVpnInfoResponse::pubkey() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.GetVpnInfoResponse.pubkey)
  return pubkey_.GetNoArena();
}
inline void GetVpnInfoResponse::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.GetVpnInfoResponse.pubkey)
}
#if LANG_CXX11
inline void GetVpnInfoResponse::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.service.protobuf.GetVpnInfoResponse.pubkey)
}
#endif
inline void GetVpnInfoResponse::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.service.protobuf.GetVpnInfoResponse.pubkey)
}
inline void GetVpnInfoResponse::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.service.protobuf.GetVpnInfoResponse.pubkey)
}
inline ::std::string* GetVpnInfoResponse::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.GetVpnInfoResponse.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVpnInfoResponse::release_pubkey() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.GetVpnInfoResponse.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVpnInfoResponse::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.GetVpnInfoResponse.pubkey)
}

// -------------------------------------------------------------------

// VlanNodeHeartbeat

// optional int32 nat_type = 1;
inline bool VlanNodeHeartbeat::has_nat_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VlanNodeHeartbeat::set_has_nat_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VlanNodeHeartbeat::clear_has_nat_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VlanNodeHeartbeat::clear_nat_type() {
  nat_type_ = 0;
  clear_has_nat_type();
}
inline ::google::protobuf::int32 VlanNodeHeartbeat::nat_type() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.VlanNodeHeartbeat.nat_type)
  return nat_type_;
}
inline void VlanNodeHeartbeat::set_nat_type(::google::protobuf::int32 value) {
  set_has_nat_type();
  nat_type_ = value;
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.VlanNodeHeartbeat.nat_type)
}

// optional bytes node_id = 2;
inline bool VlanNodeHeartbeat::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VlanNodeHeartbeat::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VlanNodeHeartbeat::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VlanNodeHeartbeat::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_node_id();
}
inline const ::std::string& VlanNodeHeartbeat::node_id() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.VlanNodeHeartbeat.node_id)
  return node_id_.GetNoArena();
}
inline void VlanNodeHeartbeat::set_node_id(const ::std::string& value) {
  set_has_node_id();
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.VlanNodeHeartbeat.node_id)
}
#if LANG_CXX11
inline void VlanNodeHeartbeat::set_node_id(::std::string&& value) {
  set_has_node_id();
  node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.service.protobuf.VlanNodeHeartbeat.node_id)
}
#endif
inline void VlanNodeHeartbeat::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_node_id();
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.service.protobuf.VlanNodeHeartbeat.node_id)
}
inline void VlanNodeHeartbeat::set_node_id(const void* value, size_t size) {
  set_has_node_id();
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.service.protobuf.VlanNodeHeartbeat.node_id)
}
inline ::std::string* VlanNodeHeartbeat::mutable_node_id() {
  set_has_node_id();
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.VlanNodeHeartbeat.node_id)
  return node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VlanNodeHeartbeat::release_node_id() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.VlanNodeHeartbeat.node_id)
  if (!has_node_id()) {
    return NULL;
  }
  clear_has_node_id();
  return node_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VlanNodeHeartbeat::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    set_has_node_id();
  } else {
    clear_has_node_id();
  }
  node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.VlanNodeHeartbeat.node_id)
}

// optional bytes dht_key = 3;
inline bool VlanNodeHeartbeat::has_dht_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VlanNodeHeartbeat::set_has_dht_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VlanNodeHeartbeat::clear_has_dht_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VlanNodeHeartbeat::clear_dht_key() {
  dht_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dht_key();
}
inline const ::std::string& VlanNodeHeartbeat::dht_key() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.VlanNodeHeartbeat.dht_key)
  return dht_key_.GetNoArena();
}
inline void VlanNodeHeartbeat::set_dht_key(const ::std::string& value) {
  set_has_dht_key();
  dht_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.VlanNodeHeartbeat.dht_key)
}
#if LANG_CXX11
inline void VlanNodeHeartbeat::set_dht_key(::std::string&& value) {
  set_has_dht_key();
  dht_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.service.protobuf.VlanNodeHeartbeat.dht_key)
}
#endif
inline void VlanNodeHeartbeat::set_dht_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dht_key();
  dht_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.service.protobuf.VlanNodeHeartbeat.dht_key)
}
inline void VlanNodeHeartbeat::set_dht_key(const void* value, size_t size) {
  set_has_dht_key();
  dht_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.service.protobuf.VlanNodeHeartbeat.dht_key)
}
inline ::std::string* VlanNodeHeartbeat::mutable_dht_key() {
  set_has_dht_key();
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.VlanNodeHeartbeat.dht_key)
  return dht_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VlanNodeHeartbeat::release_dht_key() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.VlanNodeHeartbeat.dht_key)
  if (!has_dht_key()) {
    return NULL;
  }
  clear_has_dht_key();
  return dht_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VlanNodeHeartbeat::set_allocated_dht_key(::std::string* dht_key) {
  if (dht_key != NULL) {
    set_has_dht_key();
  } else {
    clear_has_dht_key();
  }
  dht_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dht_key);
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.VlanNodeHeartbeat.dht_key)
}

// optional bytes public_key = 4;
inline bool VlanNodeHeartbeat::has_public_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VlanNodeHeartbeat::set_has_public_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VlanNodeHeartbeat::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VlanNodeHeartbeat::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& VlanNodeHeartbeat::public_key() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.VlanNodeHeartbeat.public_key)
  return public_key_.GetNoArena();
}
inline void VlanNodeHeartbeat::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.VlanNodeHeartbeat.public_key)
}
#if LANG_CXX11
inline void VlanNodeHeartbeat::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.service.protobuf.VlanNodeHeartbeat.public_key)
}
#endif
inline void VlanNodeHeartbeat::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.service.protobuf.VlanNodeHeartbeat.public_key)
}
inline void VlanNodeHeartbeat::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.service.protobuf.VlanNodeHeartbeat.public_key)
}
inline ::std::string* VlanNodeHeartbeat::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.VlanNodeHeartbeat.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VlanNodeHeartbeat::release_public_key() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.VlanNodeHeartbeat.public_key)
  if (!has_public_key()) {
    return NULL;
  }
  clear_has_public_key();
  return public_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VlanNodeHeartbeat::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.VlanNodeHeartbeat.public_key)
}

// optional string public_ip = 5;
inline bool VlanNodeHeartbeat::has_public_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VlanNodeHeartbeat::set_has_public_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VlanNodeHeartbeat::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VlanNodeHeartbeat::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& VlanNodeHeartbeat::public_ip() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.VlanNodeHeartbeat.public_ip)
  return public_ip_.GetNoArena();
}
inline void VlanNodeHeartbeat::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.VlanNodeHeartbeat.public_ip)
}
#if LANG_CXX11
inline void VlanNodeHeartbeat::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.service.protobuf.VlanNodeHeartbeat.public_ip)
}
#endif
inline void VlanNodeHeartbeat::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.service.protobuf.VlanNodeHeartbeat.public_ip)
}
inline void VlanNodeHeartbeat::set_public_ip(const char* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.service.protobuf.VlanNodeHeartbeat.public_ip)
}
inline ::std::string* VlanNodeHeartbeat::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.VlanNodeHeartbeat.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VlanNodeHeartbeat::release_public_ip() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.VlanNodeHeartbeat.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VlanNodeHeartbeat::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.VlanNodeHeartbeat.public_ip)
}

// optional int32 udp_port = 6;
inline bool VlanNodeHeartbeat::has_udp_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VlanNodeHeartbeat::set_has_udp_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VlanNodeHeartbeat::clear_has_udp_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VlanNodeHeartbeat::clear_udp_port() {
  udp_port_ = 0;
  clear_has_udp_port();
}
inline ::google::protobuf::int32 VlanNodeHeartbeat::udp_port() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.VlanNodeHeartbeat.udp_port)
  return udp_port_;
}
inline void VlanNodeHeartbeat::set_udp_port(::google::protobuf::int32 value) {
  set_has_udp_port();
  udp_port_ = value;
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.VlanNodeHeartbeat.udp_port)
}

// optional int32 tcp_port = 7;
inline bool VlanNodeHeartbeat::has_tcp_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VlanNodeHeartbeat::set_has_tcp_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VlanNodeHeartbeat::clear_has_tcp_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VlanNodeHeartbeat::clear_tcp_port() {
  tcp_port_ = 0;
  clear_has_tcp_port();
}
inline ::google::protobuf::int32 VlanNodeHeartbeat::tcp_port() const {
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.VlanNodeHeartbeat.tcp_port)
  return tcp_port_;
}
inline void VlanNodeHeartbeat::set_tcp_port(::google::protobuf::int32 value) {
  set_has_tcp_port();
  tcp_port_ = value;
  // @@protoc_insertion_point(field_set:tenon.service.protobuf.VlanNodeHeartbeat.tcp_port)
}

// -------------------------------------------------------------------

// ServiceMessage

// optional .tenon.service.protobuf.GetVpnInfoRequest vpn_req = 1;
inline bool ServiceMessage::has_vpn_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceMessage::set_has_vpn_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceMessage::clear_has_vpn_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceMessage::clear_vpn_req() {
  if (vpn_req_ != NULL) vpn_req_->Clear();
  clear_has_vpn_req();
}
inline const ::tenon::service::protobuf::GetVpnInfoRequest& ServiceMessage::_internal_vpn_req() const {
  return *vpn_req_;
}
inline const ::tenon::service::protobuf::GetVpnInfoRequest& ServiceMessage::vpn_req() const {
  const ::tenon::service::protobuf::GetVpnInfoRequest* p = vpn_req_;
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.ServiceMessage.vpn_req)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::service::protobuf::GetVpnInfoRequest*>(
      &::tenon::service::protobuf::_GetVpnInfoRequest_default_instance_);
}
inline ::tenon::service::protobuf::GetVpnInfoRequest* ServiceMessage::release_vpn_req() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.ServiceMessage.vpn_req)
  clear_has_vpn_req();
  ::tenon::service::protobuf::GetVpnInfoRequest* temp = vpn_req_;
  vpn_req_ = NULL;
  return temp;
}
inline ::tenon::service::protobuf::GetVpnInfoRequest* ServiceMessage::mutable_vpn_req() {
  set_has_vpn_req();
  if (vpn_req_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::service::protobuf::GetVpnInfoRequest>(GetArenaNoVirtual());
    vpn_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.ServiceMessage.vpn_req)
  return vpn_req_;
}
inline void ServiceMessage::set_allocated_vpn_req(::tenon::service::protobuf::GetVpnInfoRequest* vpn_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vpn_req_;
  }
  if (vpn_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vpn_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vpn_req, submessage_arena);
    }
    set_has_vpn_req();
  } else {
    clear_has_vpn_req();
  }
  vpn_req_ = vpn_req;
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.ServiceMessage.vpn_req)
}

// optional .tenon.service.protobuf.GetVpnInfoResponse vpn_res = 2;
inline bool ServiceMessage::has_vpn_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceMessage::set_has_vpn_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceMessage::clear_has_vpn_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceMessage::clear_vpn_res() {
  if (vpn_res_ != NULL) vpn_res_->Clear();
  clear_has_vpn_res();
}
inline const ::tenon::service::protobuf::GetVpnInfoResponse& ServiceMessage::_internal_vpn_res() const {
  return *vpn_res_;
}
inline const ::tenon::service::protobuf::GetVpnInfoResponse& ServiceMessage::vpn_res() const {
  const ::tenon::service::protobuf::GetVpnInfoResponse* p = vpn_res_;
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.ServiceMessage.vpn_res)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::service::protobuf::GetVpnInfoResponse*>(
      &::tenon::service::protobuf::_GetVpnInfoResponse_default_instance_);
}
inline ::tenon::service::protobuf::GetVpnInfoResponse* ServiceMessage::release_vpn_res() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.ServiceMessage.vpn_res)
  clear_has_vpn_res();
  ::tenon::service::protobuf::GetVpnInfoResponse* temp = vpn_res_;
  vpn_res_ = NULL;
  return temp;
}
inline ::tenon::service::protobuf::GetVpnInfoResponse* ServiceMessage::mutable_vpn_res() {
  set_has_vpn_res();
  if (vpn_res_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::service::protobuf::GetVpnInfoResponse>(GetArenaNoVirtual());
    vpn_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.ServiceMessage.vpn_res)
  return vpn_res_;
}
inline void ServiceMessage::set_allocated_vpn_res(::tenon::service::protobuf::GetVpnInfoResponse* vpn_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vpn_res_;
  }
  if (vpn_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vpn_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vpn_res, submessage_arena);
    }
    set_has_vpn_res();
  } else {
    clear_has_vpn_res();
  }
  vpn_res_ = vpn_res;
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.ServiceMessage.vpn_res)
}

// optional .tenon.service.protobuf.VlanNodeHeartbeat vlan_heartbeat = 3;
inline bool ServiceMessage::has_vlan_heartbeat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceMessage::set_has_vlan_heartbeat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceMessage::clear_has_vlan_heartbeat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceMessage::clear_vlan_heartbeat() {
  if (vlan_heartbeat_ != NULL) vlan_heartbeat_->Clear();
  clear_has_vlan_heartbeat();
}
inline const ::tenon::service::protobuf::VlanNodeHeartbeat& ServiceMessage::_internal_vlan_heartbeat() const {
  return *vlan_heartbeat_;
}
inline const ::tenon::service::protobuf::VlanNodeHeartbeat& ServiceMessage::vlan_heartbeat() const {
  const ::tenon::service::protobuf::VlanNodeHeartbeat* p = vlan_heartbeat_;
  // @@protoc_insertion_point(field_get:tenon.service.protobuf.ServiceMessage.vlan_heartbeat)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::service::protobuf::VlanNodeHeartbeat*>(
      &::tenon::service::protobuf::_VlanNodeHeartbeat_default_instance_);
}
inline ::tenon::service::protobuf::VlanNodeHeartbeat* ServiceMessage::release_vlan_heartbeat() {
  // @@protoc_insertion_point(field_release:tenon.service.protobuf.ServiceMessage.vlan_heartbeat)
  clear_has_vlan_heartbeat();
  ::tenon::service::protobuf::VlanNodeHeartbeat* temp = vlan_heartbeat_;
  vlan_heartbeat_ = NULL;
  return temp;
}
inline ::tenon::service::protobuf::VlanNodeHeartbeat* ServiceMessage::mutable_vlan_heartbeat() {
  set_has_vlan_heartbeat();
  if (vlan_heartbeat_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::service::protobuf::VlanNodeHeartbeat>(GetArenaNoVirtual());
    vlan_heartbeat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.service.protobuf.ServiceMessage.vlan_heartbeat)
  return vlan_heartbeat_;
}
inline void ServiceMessage::set_allocated_vlan_heartbeat(::tenon::service::protobuf::VlanNodeHeartbeat* vlan_heartbeat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vlan_heartbeat_;
  }
  if (vlan_heartbeat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vlan_heartbeat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vlan_heartbeat, submessage_arena);
    }
    set_has_vlan_heartbeat();
  } else {
    clear_has_vlan_heartbeat();
  }
  vlan_heartbeat_ = vlan_heartbeat;
  // @@protoc_insertion_point(field_set_allocated:tenon.service.protobuf.ServiceMessage.vlan_heartbeat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace service
}  // namespace tenon

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_service_2eproto
