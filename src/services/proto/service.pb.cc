// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_service_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_service_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetVpnInfoRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_service_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetVpnInfoResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_service_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VlanNodeHeartbeat;
}  // namespace protobuf_service_2eproto
namespace tenon {
namespace service {
namespace protobuf {
class GetVpnInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVpnInfoRequest>
      _instance;
} _GetVpnInfoRequest_default_instance_;
class GetVpnInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVpnInfoResponse>
      _instance;
} _GetVpnInfoResponse_default_instance_;
class VlanNodeHeartbeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VlanNodeHeartbeat>
      _instance;
} _VlanNodeHeartbeat_default_instance_;
class ServiceMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceMessage>
      _instance;
} _ServiceMessage_default_instance_;
}  // namespace protobuf
}  // namespace service
}  // namespace tenon
namespace protobuf_service_2eproto {
static void InitDefaultsGetVpnInfoRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::service::protobuf::_GetVpnInfoRequest_default_instance_;
    new (ptr) ::tenon::service::protobuf::GetVpnInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::service::protobuf::GetVpnInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetVpnInfoRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetVpnInfoRequest}, {}};

static void InitDefaultsGetVpnInfoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::service::protobuf::_GetVpnInfoResponse_default_instance_;
    new (ptr) ::tenon::service::protobuf::GetVpnInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::service::protobuf::GetVpnInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetVpnInfoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetVpnInfoResponse}, {}};

static void InitDefaultsVlanNodeHeartbeat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::service::protobuf::_VlanNodeHeartbeat_default_instance_;
    new (ptr) ::tenon::service::protobuf::VlanNodeHeartbeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::service::protobuf::VlanNodeHeartbeat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VlanNodeHeartbeat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVlanNodeHeartbeat}, {}};

static void InitDefaultsServiceMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::service::protobuf::_ServiceMessage_default_instance_;
    new (ptr) ::tenon::service::protobuf::ServiceMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::service::protobuf::ServiceMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ServiceMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsServiceMessage}, {
      &protobuf_service_2eproto::scc_info_GetVpnInfoRequest.base,
      &protobuf_service_2eproto::scc_info_GetVpnInfoResponse.base,
      &protobuf_service_2eproto::scc_info_VlanNodeHeartbeat.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetVpnInfoRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetVpnInfoResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VlanNodeHeartbeat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServiceMessage.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoRequest, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoRequest, sign_challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoRequest, sign_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoRequest, heartbeat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoRequest, method_),
  0,
  1,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoResponse, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoResponse, svr_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoResponse, route_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoResponse, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoResponse, secnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::GetVpnInfoResponse, pubkey_),
  0,
  3,
  4,
  1,
  5,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::VlanNodeHeartbeat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::VlanNodeHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::VlanNodeHeartbeat, nat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::VlanNodeHeartbeat, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::VlanNodeHeartbeat, dht_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::VlanNodeHeartbeat, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::VlanNodeHeartbeat, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::VlanNodeHeartbeat, udp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::VlanNodeHeartbeat, tcp_port_),
  4,
  0,
  1,
  2,
  3,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::ServiceMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::ServiceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::ServiceMessage, vpn_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::ServiceMessage, vpn_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::service::protobuf::ServiceMessage, vlan_heartbeat_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::tenon::service::protobuf::GetVpnInfoRequest)},
  { 15, 26, sizeof(::tenon::service::protobuf::GetVpnInfoResponse)},
  { 32, 44, sizeof(::tenon::service::protobuf::VlanNodeHeartbeat)},
  { 51, 59, sizeof(::tenon::service::protobuf::ServiceMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::service::protobuf::_GetVpnInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::service::protobuf::_GetVpnInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::service::protobuf::_VlanNodeHeartbeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::service::protobuf::_ServiceMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "service.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rservice.proto\022\025lego.service.protobuf\"u"
      "\n\021GetVpnInfoRequest\022\016\n\006pubkey\030\001 \001(\014\022\026\n\016s"
      "ign_challenge\030\002 \001(\014\022\025\n\rsign_response\030\003 \001"
      "(\014\022\021\n\theartbeat\030\004 \001(\010\022\016\n\006method\030\005 \001(\014\"w\n"
      "\022GetVpnInfoResponse\022\n\n\002ip\030\001 \001(\014\022\020\n\010svr_p"
      "ort\030\002 \001(\r\022\022\n\nroute_port\030\003 \001(\r\022\017\n\007country"
      "\030\004 \001(\014\022\016\n\006secnum\030\005 \001(\005\022\016\n\006pubkey\030\006 \001(\014\"\222"
      "\001\n\021VlanNodeHeartbeat\022\020\n\010nat_type\030\001 \001(\005\022\017"
      "\n\007node_id\030\002 \001(\014\022\017\n\007dht_key\030\003 \001(\014\022\022\n\npubl"
      "ic_key\030\004 \001(\014\022\021\n\tpublic_ip\030\005 \001(\t\022\020\n\010udp_p"
      "ort\030\006 \001(\005\022\020\n\010tcp_port\030\007 \001(\005\"\311\001\n\016ServiceM"
      "essage\0229\n\007vpn_req\030\001 \001(\0132(.tenon.service.p"
      "rotobuf.GetVpnInfoRequest\022:\n\007vpn_res\030\002 \001"
      "(\0132).tenon.service.protobuf.GetVpnInfoRes"
      "ponse\022@\n\016vlan_heartbeat\030\003 \001(\0132(.tenon.ser"
      "vice.protobuf.VlanNodeHeartbeat"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 631);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_service_2eproto
namespace tenon {
namespace service {
namespace protobuf {

// ===================================================================

void GetVpnInfoRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVpnInfoRequest::kPubkeyFieldNumber;
const int GetVpnInfoRequest::kSignChallengeFieldNumber;
const int GetVpnInfoRequest::kSignResponseFieldNumber;
const int GetVpnInfoRequest::kHeartbeatFieldNumber;
const int GetVpnInfoRequest::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVpnInfoRequest::GetVpnInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_service_2eproto::scc_info_GetVpnInfoRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.service.protobuf.GetVpnInfoRequest)
}
GetVpnInfoRequest::GetVpnInfoRequest(const GetVpnInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkey()) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  sign_challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_challenge()) {
    sign_challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_challenge_);
  }
  sign_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_response()) {
    sign_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_response_);
  }
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_method()) {
    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  heartbeat_ = from.heartbeat_;
  // @@protoc_insertion_point(copy_constructor:tenon.service.protobuf.GetVpnInfoRequest)
}

void GetVpnInfoRequest::SharedCtor() {
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heartbeat_ = false;
}

GetVpnInfoRequest::~GetVpnInfoRequest() {
  // @@protoc_insertion_point(destructor:tenon.service.protobuf.GetVpnInfoRequest)
  SharedDtor();
}

void GetVpnInfoRequest::SharedDtor() {
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_challenge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetVpnInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetVpnInfoRequest::descriptor() {
  ::protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetVpnInfoRequest& GetVpnInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_service_2eproto::scc_info_GetVpnInfoRequest.base);
  return *internal_default_instance();
}


void GetVpnInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.service.protobuf.GetVpnInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      pubkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sign_challenge_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      sign_response_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      method_.ClearNonDefaultToEmptyNoArena();
    }
  }
  heartbeat_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetVpnInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.service.protobuf.GetVpnInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes pubkey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign_challenge = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign_response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool heartbeat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_heartbeat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &heartbeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes method = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_method()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.service.protobuf.GetVpnInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.service.protobuf.GetVpnInfoRequest)
  return false;
#undef DO_
}

void GetVpnInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.service.protobuf.GetVpnInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes pubkey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pubkey(), output);
  }

  // optional bytes sign_challenge = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sign_challenge(), output);
  }

  // optional bytes sign_response = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sign_response(), output);
  }

  // optional bool heartbeat = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->heartbeat(), output);
  }

  // optional bytes method = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->method(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.service.protobuf.GetVpnInfoRequest)
}

::google::protobuf::uint8* GetVpnInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.service.protobuf.GetVpnInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes pubkey = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pubkey(), target);
  }

  // optional bytes sign_challenge = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sign_challenge(), target);
  }

  // optional bytes sign_response = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sign_response(), target);
  }

  // optional bool heartbeat = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->heartbeat(), target);
  }

  // optional bytes method = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->method(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.service.protobuf.GetVpnInfoRequest)
  return target;
}

size_t GetVpnInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.service.protobuf.GetVpnInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes pubkey = 1;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional bytes sign_challenge = 2;
    if (has_sign_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_challenge());
    }

    // optional bytes sign_response = 3;
    if (has_sign_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_response());
    }

    // optional bytes method = 5;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->method());
    }

    // optional bool heartbeat = 4;
    if (has_heartbeat()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVpnInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.service.protobuf.GetVpnInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVpnInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVpnInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.service.protobuf.GetVpnInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.service.protobuf.GetVpnInfoRequest)
    MergeFrom(*source);
  }
}

void GetVpnInfoRequest::MergeFrom(const GetVpnInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.service.protobuf.GetVpnInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pubkey();
      pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sign_challenge();
      sign_challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_challenge_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sign_response();
      sign_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_response_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_method();
      method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
    }
    if (cached_has_bits & 0x00000010u) {
      heartbeat_ = from.heartbeat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetVpnInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.service.protobuf.GetVpnInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVpnInfoRequest::CopyFrom(const GetVpnInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.service.protobuf.GetVpnInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVpnInfoRequest::IsInitialized() const {
  return true;
}

void GetVpnInfoRequest::Swap(GetVpnInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVpnInfoRequest::InternalSwap(GetVpnInfoRequest* other) {
  using std::swap;
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_challenge_.Swap(&other->sign_challenge_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_response_.Swap(&other->sign_response_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_.Swap(&other->method_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(heartbeat_, other->heartbeat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetVpnInfoRequest::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetVpnInfoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVpnInfoResponse::kIpFieldNumber;
const int GetVpnInfoResponse::kSvrPortFieldNumber;
const int GetVpnInfoResponse::kRoutePortFieldNumber;
const int GetVpnInfoResponse::kCountryFieldNumber;
const int GetVpnInfoResponse::kSecnumFieldNumber;
const int GetVpnInfoResponse::kPubkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVpnInfoResponse::GetVpnInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_service_2eproto::scc_info_GetVpnInfoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.service.protobuf.GetVpnInfoResponse)
}
GetVpnInfoResponse::GetVpnInfoResponse(const GetVpnInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkey()) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  ::memcpy(&svr_port_, &from.svr_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&secnum_) -
    reinterpret_cast<char*>(&svr_port_)) + sizeof(secnum_));
  // @@protoc_insertion_point(copy_constructor:tenon.service.protobuf.GetVpnInfoResponse)
}

void GetVpnInfoResponse::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&svr_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secnum_) -
      reinterpret_cast<char*>(&svr_port_)) + sizeof(secnum_));
}

GetVpnInfoResponse::~GetVpnInfoResponse() {
  // @@protoc_insertion_point(destructor:tenon.service.protobuf.GetVpnInfoResponse)
  SharedDtor();
}

void GetVpnInfoResponse::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetVpnInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetVpnInfoResponse::descriptor() {
  ::protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetVpnInfoResponse& GetVpnInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_service_2eproto::scc_info_GetVpnInfoResponse.base);
  return *internal_default_instance();
}


void GetVpnInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.service.protobuf.GetVpnInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      country_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      pubkey_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&svr_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&secnum_) -
        reinterpret_cast<char*>(&svr_port_)) + sizeof(secnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetVpnInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.service.protobuf.GetVpnInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 svr_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_svr_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 route_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_route_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &route_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes country = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_country()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 secnum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_secnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pubkey = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.service.protobuf.GetVpnInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.service.protobuf.GetVpnInfoResponse)
  return false;
#undef DO_
}

void GetVpnInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.service.protobuf.GetVpnInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 svr_port = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svr_port(), output);
  }

  // optional uint32 route_port = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->route_port(), output);
  }

  // optional bytes country = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->country(), output);
  }

  // optional int32 secnum = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->secnum(), output);
  }

  // optional bytes pubkey = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->pubkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.service.protobuf.GetVpnInfoResponse)
}

::google::protobuf::uint8* GetVpnInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.service.protobuf.GetVpnInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // optional uint32 svr_port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svr_port(), target);
  }

  // optional uint32 route_port = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->route_port(), target);
  }

  // optional bytes country = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->country(), target);
  }

  // optional int32 secnum = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->secnum(), target);
  }

  // optional bytes pubkey = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->pubkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.service.protobuf.GetVpnInfoResponse)
  return target;
}

size_t GetVpnInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.service.protobuf.GetVpnInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional bytes country = 4;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->country());
    }

    // optional bytes pubkey = 6;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional uint32 svr_port = 2;
    if (has_svr_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_port());
    }

    // optional uint32 route_port = 3;
    if (has_route_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->route_port());
    }

    // optional int32 secnum = 5;
    if (has_secnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secnum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVpnInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.service.protobuf.GetVpnInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVpnInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVpnInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.service.protobuf.GetVpnInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.service.protobuf.GetVpnInfoResponse)
    MergeFrom(*source);
  }
}

void GetVpnInfoResponse::MergeFrom(const GetVpnInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.service.protobuf.GetVpnInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_pubkey();
      pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
    }
    if (cached_has_bits & 0x00000008u) {
      svr_port_ = from.svr_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      route_port_ = from.route_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      secnum_ = from.secnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetVpnInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.service.protobuf.GetVpnInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVpnInfoResponse::CopyFrom(const GetVpnInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.service.protobuf.GetVpnInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVpnInfoResponse::IsInitialized() const {
  return true;
}

void GetVpnInfoResponse::Swap(GetVpnInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVpnInfoResponse::InternalSwap(GetVpnInfoResponse* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(svr_port_, other->svr_port_);
  swap(route_port_, other->route_port_);
  swap(secnum_, other->secnum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetVpnInfoResponse::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VlanNodeHeartbeat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VlanNodeHeartbeat::kNatTypeFieldNumber;
const int VlanNodeHeartbeat::kNodeIdFieldNumber;
const int VlanNodeHeartbeat::kDhtKeyFieldNumber;
const int VlanNodeHeartbeat::kPublicKeyFieldNumber;
const int VlanNodeHeartbeat::kPublicIpFieldNumber;
const int VlanNodeHeartbeat::kUdpPortFieldNumber;
const int VlanNodeHeartbeat::kTcpPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VlanNodeHeartbeat::VlanNodeHeartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_service_2eproto::scc_info_VlanNodeHeartbeat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.service.protobuf.VlanNodeHeartbeat)
}
VlanNodeHeartbeat::VlanNodeHeartbeat(const VlanNodeHeartbeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_node_id()) {
    node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dht_key()) {
    dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dht_key_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_ip()) {
    public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
  }
  ::memcpy(&nat_type_, &from.nat_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_port_) -
    reinterpret_cast<char*>(&nat_type_)) + sizeof(tcp_port_));
  // @@protoc_insertion_point(copy_constructor:tenon.service.protobuf.VlanNodeHeartbeat)
}

void VlanNodeHeartbeat::SharedCtor() {
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nat_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_port_) -
      reinterpret_cast<char*>(&nat_type_)) + sizeof(tcp_port_));
}

VlanNodeHeartbeat::~VlanNodeHeartbeat() {
  // @@protoc_insertion_point(destructor:tenon.service.protobuf.VlanNodeHeartbeat)
  SharedDtor();
}

void VlanNodeHeartbeat::SharedDtor() {
  node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dht_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VlanNodeHeartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VlanNodeHeartbeat::descriptor() {
  ::protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VlanNodeHeartbeat& VlanNodeHeartbeat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_service_2eproto::scc_info_VlanNodeHeartbeat.base);
  return *internal_default_instance();
}


void VlanNodeHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.service.protobuf.VlanNodeHeartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      node_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dht_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      public_ip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&nat_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tcp_port_) -
        reinterpret_cast<char*>(&nat_type_)) + sizeof(tcp_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VlanNodeHeartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.service.protobuf.VlanNodeHeartbeat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nat_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_nat_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nat_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes dht_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dht_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes public_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string public_ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_ip().data(), static_cast<int>(this->public_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tenon.service.protobuf.VlanNodeHeartbeat.public_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 udp_port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_udp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tcp_port = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_tcp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.service.protobuf.VlanNodeHeartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.service.protobuf.VlanNodeHeartbeat)
  return false;
#undef DO_
}

void VlanNodeHeartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.service.protobuf.VlanNodeHeartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nat_type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nat_type(), output);
  }

  // optional bytes node_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->node_id(), output);
  }

  // optional bytes dht_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->dht_key(), output);
  }

  // optional bytes public_key = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->public_key(), output);
  }

  // optional string public_ip = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_ip().data(), static_cast<int>(this->public_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tenon.service.protobuf.VlanNodeHeartbeat.public_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->public_ip(), output);
  }

  // optional int32 udp_port = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->udp_port(), output);
  }

  // optional int32 tcp_port = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tcp_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.service.protobuf.VlanNodeHeartbeat)
}

::google::protobuf::uint8* VlanNodeHeartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.service.protobuf.VlanNodeHeartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nat_type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nat_type(), target);
  }

  // optional bytes node_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->node_id(), target);
  }

  // optional bytes dht_key = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->dht_key(), target);
  }

  // optional bytes public_key = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->public_key(), target);
  }

  // optional string public_ip = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_ip().data(), static_cast<int>(this->public_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tenon.service.protobuf.VlanNodeHeartbeat.public_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->public_ip(), target);
  }

  // optional int32 udp_port = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->udp_port(), target);
  }

  // optional int32 tcp_port = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tcp_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.service.protobuf.VlanNodeHeartbeat)
  return target;
}

size_t VlanNodeHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.service.protobuf.VlanNodeHeartbeat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes node_id = 2;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

    // optional bytes dht_key = 3;
    if (has_dht_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dht_key());
    }

    // optional bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

    // optional string public_ip = 5;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_ip());
    }

    // optional int32 nat_type = 1;
    if (has_nat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nat_type());
    }

    // optional int32 udp_port = 6;
    if (has_udp_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->udp_port());
    }

    // optional int32 tcp_port = 7;
    if (has_tcp_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tcp_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VlanNodeHeartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.service.protobuf.VlanNodeHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const VlanNodeHeartbeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VlanNodeHeartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.service.protobuf.VlanNodeHeartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.service.protobuf.VlanNodeHeartbeat)
    MergeFrom(*source);
  }
}

void VlanNodeHeartbeat::MergeFrom(const VlanNodeHeartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.service.protobuf.VlanNodeHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_node_id();
      node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dht_key();
      dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dht_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_public_ip();
      public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
    }
    if (cached_has_bits & 0x00000010u) {
      nat_type_ = from.nat_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      udp_port_ = from.udp_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      tcp_port_ = from.tcp_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VlanNodeHeartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.service.protobuf.VlanNodeHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VlanNodeHeartbeat::CopyFrom(const VlanNodeHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.service.protobuf.VlanNodeHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VlanNodeHeartbeat::IsInitialized() const {
  return true;
}

void VlanNodeHeartbeat::Swap(VlanNodeHeartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VlanNodeHeartbeat::InternalSwap(VlanNodeHeartbeat* other) {
  using std::swap;
  node_id_.Swap(&other->node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dht_key_.Swap(&other->dht_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_ip_.Swap(&other->public_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nat_type_, other->nat_type_);
  swap(udp_port_, other->udp_port_);
  swap(tcp_port_, other->tcp_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VlanNodeHeartbeat::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServiceMessage::InitAsDefaultInstance() {
  ::tenon::service::protobuf::_ServiceMessage_default_instance_._instance.get_mutable()->vpn_req_ = const_cast< ::tenon::service::protobuf::GetVpnInfoRequest*>(
      ::tenon::service::protobuf::GetVpnInfoRequest::internal_default_instance());
  ::tenon::service::protobuf::_ServiceMessage_default_instance_._instance.get_mutable()->vpn_res_ = const_cast< ::tenon::service::protobuf::GetVpnInfoResponse*>(
      ::tenon::service::protobuf::GetVpnInfoResponse::internal_default_instance());
  ::tenon::service::protobuf::_ServiceMessage_default_instance_._instance.get_mutable()->vlan_heartbeat_ = const_cast< ::tenon::service::protobuf::VlanNodeHeartbeat*>(
      ::tenon::service::protobuf::VlanNodeHeartbeat::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceMessage::kVpnReqFieldNumber;
const int ServiceMessage::kVpnResFieldNumber;
const int ServiceMessage::kVlanHeartbeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceMessage::ServiceMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_service_2eproto::scc_info_ServiceMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.service.protobuf.ServiceMessage)
}
ServiceMessage::ServiceMessage(const ServiceMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vpn_req()) {
    vpn_req_ = new ::tenon::service::protobuf::GetVpnInfoRequest(*from.vpn_req_);
  } else {
    vpn_req_ = NULL;
  }
  if (from.has_vpn_res()) {
    vpn_res_ = new ::tenon::service::protobuf::GetVpnInfoResponse(*from.vpn_res_);
  } else {
    vpn_res_ = NULL;
  }
  if (from.has_vlan_heartbeat()) {
    vlan_heartbeat_ = new ::tenon::service::protobuf::VlanNodeHeartbeat(*from.vlan_heartbeat_);
  } else {
    vlan_heartbeat_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tenon.service.protobuf.ServiceMessage)
}

void ServiceMessage::SharedCtor() {
  ::memset(&vpn_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vlan_heartbeat_) -
      reinterpret_cast<char*>(&vpn_req_)) + sizeof(vlan_heartbeat_));
}

ServiceMessage::~ServiceMessage() {
  // @@protoc_insertion_point(destructor:tenon.service.protobuf.ServiceMessage)
  SharedDtor();
}

void ServiceMessage::SharedDtor() {
  if (this != internal_default_instance()) delete vpn_req_;
  if (this != internal_default_instance()) delete vpn_res_;
  if (this != internal_default_instance()) delete vlan_heartbeat_;
}

void ServiceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServiceMessage::descriptor() {
  ::protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServiceMessage& ServiceMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_service_2eproto::scc_info_ServiceMessage.base);
  return *internal_default_instance();
}


void ServiceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.service.protobuf.ServiceMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vpn_req_ != NULL);
      vpn_req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vpn_res_ != NULL);
      vpn_res_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vlan_heartbeat_ != NULL);
      vlan_heartbeat_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServiceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.service.protobuf.ServiceMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tenon.service.protobuf.GetVpnInfoRequest vpn_req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vpn_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.service.protobuf.GetVpnInfoResponse vpn_res = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vpn_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.service.protobuf.VlanNodeHeartbeat vlan_heartbeat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vlan_heartbeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.service.protobuf.ServiceMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.service.protobuf.ServiceMessage)
  return false;
#undef DO_
}

void ServiceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.service.protobuf.ServiceMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.service.protobuf.GetVpnInfoRequest vpn_req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_vpn_req(), output);
  }

  // optional .tenon.service.protobuf.GetVpnInfoResponse vpn_res = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_vpn_res(), output);
  }

  // optional .tenon.service.protobuf.VlanNodeHeartbeat vlan_heartbeat = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_vlan_heartbeat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.service.protobuf.ServiceMessage)
}

::google::protobuf::uint8* ServiceMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.service.protobuf.ServiceMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.service.protobuf.GetVpnInfoRequest vpn_req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_vpn_req(), deterministic, target);
  }

  // optional .tenon.service.protobuf.GetVpnInfoResponse vpn_res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_vpn_res(), deterministic, target);
  }

  // optional .tenon.service.protobuf.VlanNodeHeartbeat vlan_heartbeat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_vlan_heartbeat(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.service.protobuf.ServiceMessage)
  return target;
}

size_t ServiceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.service.protobuf.ServiceMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .tenon.service.protobuf.GetVpnInfoRequest vpn_req = 1;
    if (has_vpn_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vpn_req_);
    }

    // optional .tenon.service.protobuf.GetVpnInfoResponse vpn_res = 2;
    if (has_vpn_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vpn_res_);
    }

    // optional .tenon.service.protobuf.VlanNodeHeartbeat vlan_heartbeat = 3;
    if (has_vlan_heartbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vlan_heartbeat_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.service.protobuf.ServiceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.service.protobuf.ServiceMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.service.protobuf.ServiceMessage)
    MergeFrom(*source);
  }
}

void ServiceMessage::MergeFrom(const ServiceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.service.protobuf.ServiceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_vpn_req()->::tenon::service::protobuf::GetVpnInfoRequest::MergeFrom(from.vpn_req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vpn_res()->::tenon::service::protobuf::GetVpnInfoResponse::MergeFrom(from.vpn_res());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_vlan_heartbeat()->::tenon::service::protobuf::VlanNodeHeartbeat::MergeFrom(from.vlan_heartbeat());
    }
  }
}

void ServiceMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.service.protobuf.ServiceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceMessage::CopyFrom(const ServiceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.service.protobuf.ServiceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMessage::IsInitialized() const {
  return true;
}

void ServiceMessage::Swap(ServiceMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceMessage::InternalSwap(ServiceMessage* other) {
  using std::swap;
  swap(vpn_req_, other->vpn_req_);
  swap(vpn_res_, other->vpn_res_);
  swap(vlan_heartbeat_, other->vlan_heartbeat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServiceMessage::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace service
}  // namespace tenon
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::service::protobuf::GetVpnInfoRequest* Arena::CreateMaybeMessage< ::tenon::service::protobuf::GetVpnInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::service::protobuf::GetVpnInfoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::service::protobuf::GetVpnInfoResponse* Arena::CreateMaybeMessage< ::tenon::service::protobuf::GetVpnInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::service::protobuf::GetVpnInfoResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::service::protobuf::VlanNodeHeartbeat* Arena::CreateMaybeMessage< ::tenon::service::protobuf::VlanNodeHeartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::service::protobuf::VlanNodeHeartbeat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::service::protobuf::ServiceMessage* Arena::CreateMaybeMessage< ::tenon::service::protobuf::ServiceMessage >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::service::protobuf::ServiceMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
