#include <gtest/gtest.h>

#include <iostream>
#include <chrono>

#define private public
#include "bft/bft_utils.h"
#include "dht/dht_key.h"
#include "network/network_utils.h"
#include "transport/transport_utils.h"
#include "bft/bft_manager.h"
#include "block/account_manager.h"
#include "security/crypto_utils.h"
#include "election/elect_dht.h"
#include "network/dht_manager.h"
#include "network/universal_manager.h"
#include "bft/tests/test_transport.h"
#include "bft/tx_pool.h"
#include "bft/gid_manager.h"
#include "common/random.h"
#include "contract/contract_utils.h"
#include "security/secp256k1.h"
#include "tvm/execution.h"
#include "tvm/tvm_utils.h"
#include "tvm/tenon_host.h"

namespace tenon {

namespace bft {

namespace test {

static const std::string ballot_str = common::Encode::HexDecode(std::string("6080604052348015620000125760006000fd5b50604051620014a0380380620014a0833981810160405281019062000038919062000299565b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160016000506000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000506000016000508190909055506000600090505b8151811015620001ca576002600050604051806040016040528084848151811015156200014c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000191681526020016000815260200150908060018154018082558091505060019003906000526020600020906002020160005b909190919091506000820151816000016000509060001916905560208201518160010160005090905550505b8080620001c19062000389565b915050620000f6565b505b506200046b566200046a565b6000620001ef620001e9846200030c565b620002e1565b90508083825260208201905082856020860282011115620002105760006000fd5b60005b8581101562000245578162000229888262000281565b8452602084019350602083019250505b60018101905062000213565b5050505b9392505050565b600082601f8301121515620002655760006000fd5b815162000277848260208601620001d8565b9150505b92915050565b60008151905062000292816200044c565b5b92915050565b600060208284031215620002ad5760006000fd5b600082015167ffffffffffffffff811115620002c95760006000fd5b620002d78482850162000250565b9150505b92915050565b6000620002ed62000301565b9050620002fb828262000352565b5b919050565b600060405190505b90565b600067ffffffffffffffff8211156200032a576200032962000409565b5b6020820290506020810190505b919050565b60008190505b919050565b60008190505b919050565b6200035d826200043a565b810181811067ffffffffffffffff821117156200037f576200037e62000409565b5b80604052505b5050565b6000620003968262000347565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620003cc57620003cb620003d8565b5b6001820190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b565b6000601f19601f83011690505b919050565b62000457816200033c565b81141515620004665760006000fd5b5b50565b5b611025806200047b6000396000f3fe60806040523480156100115760006000fd5b506004361061008d5760003560e01c8063609ff1bd1161005c578063609ff1bd1461011a5780639e7b8d6114610138578063a3ec138d14610154578063e2ba53f0146101875761008d565b80630121b93f14610093578063013cf08b146100af5780632e4176cf146100e05780635c19a95c146100fe5761008d565b60006000fd5b6100ad60048036038101906100a89190610afd565b6101a5565b005b6100c960048036038101906100c49190610afd565b610294565b6040516100d7929190610c54565b60405180910390f35b6100e86102d2565b6040516100f59190610c1c565b60405180910390f35b61011860048036038101906101139190610ad2565b6102f8565b005b6101226106f7565b60405161012f9190610d23565b60405180910390f35b610152600480360381019061014d9190610ad2565b6107f1565b005b61016e60048036038101906101699190610ad2565b6109cd565b60405161017e9493929190610d3f565b60405180910390f35b61018f610a33565b60405161019c9190610c38565b60405180910390f35b6000600160005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050905060018160010160006101000a81548160ff02191690831515021790555081816002016000508190909055508060000160005054600260005083815481101515610260577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b50600101600082828250546102869190610d97565b925050819090905550505b50565b600260005081815481106102a757600080fd5b906000526020600020906002020160005b915090508060000160005054908060010160005054905082565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090508060010160009054906101000a900460ff16151515610395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038c90610c7e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fd90610d02565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561058857600160005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915081503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a90610cc0565b60405180910390fd5b610407565b60018160010160006101000a81548160ff021916908315150217905550818160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090508060010160009054906101000a900460ff16156106ca57816000016000505460026000508260020160005054815481101515610696577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b50600101600082828250546106bc9190610d97565b9250508190909055506106f1565b816000016000505481600001600082828250546106e79190610d97565b9250508190909055505b50505b50565b60006000600090506000600090505b6002600050805490508110156107eb5781600260005082815481101515610756577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b506001016000505411156107d7576002600050818154811015156107b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b50600101600050549150815080925082505b5b80806107e390610e45565b915050610706565b50505b90565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087a90610c9f565b60405180910390fd5b600160005060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160009054906101000a900460ff1615151561091b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091290610ce1565b60405180910390fd5b6000600160005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001600050541415156109765760006000fd5b6001600160005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000506000016000508190909055505b50565b60016000506020528060005260406000206000915090508060000160005054908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160005054905084565b60006002600050610a486106f763ffffffff16565b815481101515610a81577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b5060000160005054905080505b9056610fee565b600081359050610ab581610fb8565b5b92915050565b600081359050610acb81610fd3565b5b92915050565b600060208284031215610ae55760006000fd5b6000610af384828501610aa6565b9150505b92915050565b600060208284031215610b105760006000fd5b6000610b1e84828501610abc565b9150505b92915050565b610b3181610dee565b82525b5050565b610b4181610e01565b82525b5050565b610b5181610e0e565b82525b5050565b6000610b65601283610d85565b9150610b7082610ec0565b6020820190505b919050565b6000610b89602883610d85565b9150610b9482610eea565b6040820190505b919050565b6000610bad601983610d85565b9150610bb882610f3a565b6020820190505b919050565b6000610bd1601883610d85565b9150610bdc82610f64565b6020820190505b919050565b6000610bf5601e83610d85565b9150610c0082610f8e565b6020820190505b919050565b610c1581610e3a565b82525b5050565b6000602082019050610c316000830184610b28565b5b92915050565b6000602082019050610c4d6000830184610b48565b5b92915050565b6000604082019050610c696000830185610b48565b610c766020830184610c0c565b5b9392505050565b60006020820190508181036000830152610c9781610b58565b90505b919050565b60006020820190508181036000830152610cb881610b7c565b90505b919050565b60006020820190508181036000830152610cd981610ba0565b90505b919050565b60006020820190508181036000830152610cfa81610bc4565b90505b919050565b60006020820190508181036000830152610d1b81610be8565b90505b919050565b6000602082019050610d386000830184610c0c565b5b92915050565b6000608082019050610d546000830187610c0c565b610d616020830186610b38565b610d6e6040830185610b28565b610d7b6060830184610c0c565b5b95945050505050565b60008282526020820190505b92915050565b6000610da282610e3a565b9150610dad83610e3a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610de257610de1610e8f565b5b82820190505b92915050565b6000610df982610e19565b90505b919050565b600081151590505b919050565b60008190505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b6000610e5082610e3a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e8357610e82610e8f565b5b6001820190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b7f596f7520616c726561647920766f7465642e000000000000000000000000000060008201525b50565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e00000000000000000000000000000000000000000000000060208201525b50565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e0000000000000060008201525b50565b7f54686520766f74657220616c726561647920766f7465642e000000000000000060008201525b50565b7f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e000060008201525b50565b610fc181610dee565b81141515610fcf5760006000fd5b5b50565b610fdc81610e3a565b81141515610fea5760006000fd5b5b50565bfea26469706673582212208a11da71baf451a53adabf2049084a2e24ceea212a4f9eae8a39afacdcc7453d64736f6c63430008030033") + "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8704348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8701348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8702");
static const std::string receive_pays = common::Encode::HexDecode("608060405233600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b61004c565b6106758061005b6000396000f3fe60806040523480156100115760006000fd5b50600436106100465760003560e01c806341c0e1b51461004c578063a90ae88714610056578063cfb519281461007257610046565b60006000fd5b6100546100a2565b005b610070600480360381019061006b9190610402565b61011a565b005b61008c600480360381019061008791906103be565b61029c565b604051610099919061048d565b60405180910390f35b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156100ff5760006000fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b565b6000601b905060007f3d584400dc77e383a2a2860d15fd181b1c36117d7b6c1e5d54e2f21d9491b66e60001b905060007f043a539fab3f2e42ba806da59b30e100077a7dba7439de3fce427eaa75dce5c460001b905060007ff559642966b18c5e58a82106d7cbb6dfaa449e1820dda477580b08bab68b93d560001b90506000600182868686604051600081526020016040526040516101bd94939291906104a9565b6020604051602081039080840390855afa1580156101e0573d600060003e3d6000fd5b505050602060405103519050600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156102495760006000fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc899081150290604051600060405180830381858888f19350505050158015610290573d600060003e3d6000fd5b5050505050505b505050565b600060008290506000815114156102ba57600060001b9150506102c3565b60208301519150505b9190505661063e565b60006102df6102da84610516565b6104ef565b9050828152602081018484840111156102f85760006000fd5b61030384828561059e565b505b9392505050565b600061031f61031a84610548565b6104ef565b9050828152602081018484840111156103385760006000fd5b61034384828561059e565b505b9392505050565b600082601f83011215156103605760006000fd5b81356103708482602086016102cc565b9150505b92915050565b600082601f830112151561038e5760006000fd5b813561039e84826020860161030c565b9150505b92915050565b6000813590506103b781610623565b5b92915050565b6000602082840312156103d15760006000fd5b600082013567ffffffffffffffff8111156103ec5760006000fd5b6103f88482850161037a565b9150505b92915050565b600060006000606084860312156104195760006000fd5b6000610427868287016103a8565b9350506020610438868287016103a8565b925050604084013567ffffffffffffffff8111156104565760006000fd5b6104628682870161034c565b9150505b9250925092565b6104768161057a565b82525b5050565b61048681610590565b82525b5050565b60006020820190506104a2600083018461046d565b5b92915050565b60006080820190506104be600083018761046d565b6104cb602083018661047d565b6104d8604083018561046d565b6104e5606083018461046d565b5b95945050505050565b60006104f961050b565b905061050582826105ae565b5b919050565b600060405190505b90565b600067ffffffffffffffff821115610531576105306105e0565b5b61053a82610611565b90506020810190505b919050565b600067ffffffffffffffff821115610563576105626105e0565b5b61056c82610611565b90506020810190505b919050565b60008190505b919050565b60008190505b919050565b600060ff821690505b919050565b828183376000838301525b505050565b6105b782610611565b810181811067ffffffffffffffff821117156105d6576105d56105e0565b5b80604052505b5050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b565b6000601f19601f83011690505b919050565b61062c81610585565b8114151561063a5760006000fd5b5b50565bfea264697066735822122068a2424ed233250a9825d9175d5ea434ac0c8db54df6e1420ee049b78e5df03864736f6c63430008030033");
static const std::string simple_auction = common::Encode::HexDecode(std::string("6080604052348015620000125760006000fd5b5060405162000ba538038062000ba58339818101604052810190620000389190620000de565b5b80600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550814262000088919062000122565b6001600050819090905550600060036000508190909055505b50506200022f566200022e565b600081519050620000bf81620001f2565b5b92915050565b600081519050620000d78162000210565b5b92915050565b6000600060408385031215620000f45760006000fd5b60006200010485828601620000c6565b92505060206200011785828601620000ae565b9150505b9250929050565b60006200012f82620001b6565b91506200013c83620001b6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620001745762000173620001c1565b5b82820190505b92915050565b60006200018d8262000195565b90505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b620001fd8162000180565b811415156200020c5760006000fd5b5b50565b6200021b81620001b6565b811415156200022a5760006000fd5b5b50565b5b610966806200023f6000396000f3fe6080604052600436106100745760003560e01c806338af3eed1161004e57806338af3eed146100c85780633ccfd60b146100f457806391f9015714610120578063d57bde791461014c57610074565b80631998aeef1461007a57806328e5f1c6146100845780632a24f46c146100b057610074565b60006000fd5b610082610178565b005b3480156100915760006000fd5b5061009a610328565b6040516100a79190610776565b60405180910390f35b3480156100bd5760006000fd5b506100c6610331565b005b3480156100d55760006000fd5b506100de61044e565b6040516100eb91906106b1565b60405180910390f35b3480156101015760006000fd5b5061010a610474565b60405161011791906106f7565b60405180910390f35b34801561012d5760006000fd5b506101366105b6565b6040516101439190610695565b60405180910390f35b3480156101595760006000fd5b506101626105dc565b60405161016f9190610776565b60405180910390f35b60016000505442111515156101c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b990610713565b60405180910390fd5b6003600050543411151561020b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020290610734565b60405180910390fd5b600060036000505414151561029f5760036000505460046000506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828282505461029591906107a4565b9250508190909055505b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503460036000508190909055507ff4757a49b326036464bec6fe419a4ae38c8a02ce3e68bf0809674f6aab8ad300333460405161031d9291906106cd565b60405180910390a15b565b60016000505481565b600560009054906101000a900460ff16151515610383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037a90610755565b60405180910390fd5b6001600560006101000a81548160ff0219169083151502179055507fdaec4582d5d9595688c8c98545fdd1c696d41c6aeaeb636737e84ed2f5c00eda600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003600050546040516103f69291906106cd565b60405180910390a13373ffffffffffffffffffffffffffffffffffffffff166108fc6003600050549081150290604051600060405180830381858888f1935050505015801561044a573d600060003e3d6000fd5b505b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006000600460005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054905060008111156105a8576000600460005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156105a75780600460005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005081909090555060009150506105b3565b5b60019150506105b356505b90565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360005054815661092f565b6105f28161080e565b82525b5050565b610602816107fb565b82525b5050565b61061281610821565b82525b5050565b6000610626601683610792565b91506106318261088b565b6020820190505b919050565b600061064a601e83610792565b9150610655826108b5565b6020820190505b919050565b600061066e602383610792565b9150610679826108df565b6040820190505b919050565b61068e8161084f565b82525b5050565b60006020820190506106aa60008301846105f9565b5b92915050565b60006020820190506106c660008301846105e9565b5b92915050565b60006040820190506106e260008301856105f9565b6106ef6020830184610685565b5b9392505050565b600060208201905061070c6000830184610609565b5b92915050565b6000602082019050818103600083015261072c81610619565b90505b919050565b6000602082019050818103600083015261074d8161063d565b90505b919050565b6000602082019050818103600083015261076e81610661565b90505b919050565b600060208201905061078b6000830184610685565b5b92915050565b60008282526020820190505b92915050565b60006107af8261084f565b91506107ba8361084f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156107ef576107ee61085a565b5b82820190505b92915050565b60006108068261082e565b90505b919050565b60006108198261082e565b90505b919050565b600081151590505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b7f41756374696f6e20616c726561647920656e6465642e0000000000000000000060008201525b50565b7f546865726520616c7265616479206973206120686967686572206269642e000060008201525b50565b7f61756374696f6e456e642068617320616c7265616479206265656e2063616c6c60008201527f65642e000000000000000000000000000000000000000000000000000000000060208201525b50565bfea2646970667358221220a202535e759ea5c6a7b981eebd4ed6e611017c9693600864c40c03f56e1846da64736f6c63430008030033") + "00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000d31f18f44c3b6c3d4f9e23ea7317805488cee731");
static const std::string blind_auction = common::Encode::HexDecode(std::string("") + "00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000007d0000000000000000000000000d31f18f44c3b6c3d4f9e23ea7317805488cee731");
static const std::string purchase = common::Encode::HexDecode(std::string("60806040525b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060023462000055919062000175565b60006000508190909055506000600260146101000a81548160ff02191690836003811115620000ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550346000600050546002620000c79190620001b0565b1415156200010c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001039062000140565b60405180910390fd5b5b620002aa56620002a9565b60006200012760158362000163565b915062000134826200027f565b6020820190505b919050565b600060208201905081810360008301526200015b8162000118565b90505b919050565b60008282526020820190505b92915050565b6000620001828262000212565b91506200018f8362000212565b9250821515620001a457620001a36200024e565b5b82820490505b92915050565b6000620001bd8262000212565b9150620001ca8362000212565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200020657620002056200021d565b5b82820290505b92915050565b60008190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b565b7f56616c75652068617320746f206265206576656e2e000000000000000000000060008201525b50565b5b610dd480620002ba6000396000f3fe60806040526004361061007f5760003560e01c806373fac6f01161004e57806373fac6f014610121578063c19d93fb14610139578063c7981b1b14610165578063d69606971461017d5761007f565b806308551a531461008557806335a063b4146100b15780633fa4f245146100c95780637150d8ae146100f55761007f565b60006000fd5b3480156100925760006000fd5b5061009b610187565b6040516100a89190610b1c565b60405180910390f35b3480156100be5760006000fd5b506100c76101ad565b005b3480156100d65760006000fd5b506100df6103f1565b6040516100ec9190610bb7565b60405180910390f35b3480156101025760006000fd5b5061010b6103fa565b6040516101189190610b1c565b60405180910390f35b34801561012e5760006000fd5b50610137610420565b005b3480156101465760006000fd5b5061014f610669565b60405161015c9190610b38565b60405180910390f35b3480156101725760006000fd5b5061017b61067c565b005b6101856108d1565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561023f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023690610b96565b60405180910390fd5b600080600381111561027a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600260149054906101000a900460ff1660038111156102c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141515610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fb90610b75565b60405180910390fd5b7f72c874aeff0b183a56e2b79c71b46e1aed4dee5e09862134b8821ba2fddbf8bf60405160405180910390a16003600260146101000a81548160ff0219169083600381111561037c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156103ea573d600060003e3d6000fd5b505b5b505b565b60006000505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a990610b54565b60405180910390fd5b60018060038111156104ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600260149054906101000a900460ff166003811115610535577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141515610577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056e90610b75565b60405180910390fd5b7fe89152acd703c9d8c7d28829d443260b411454d45394e7995815140c8cbcbcf760405160405180910390a16002600260146101000a81548160ff021916908360038111156105ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6000600050549081150290604051600060405180830381858888f19350505050158015610662573d600060003e3d6000fd5b505b5b505b565b600260149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561070e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070590610b96565b60405180910390fd5b6002806003811115610749577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600260149054906101000a900460ff166003811115610791577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415156107d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ca90610b75565b60405180910390fd5b7ffda69c32bcfdba840a167777906b173b607eb8b4d8853b97a80d26e613d858db60405160405180910390a16003600260146101000a81548160ff0219169083600381111561084b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600060005054600361089e9190610be5565b9081150290604051600060405180830381858888f193505050501580156108ca573d600060003e3d6000fd5b505b5b505b565b600080600381111561090c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600260149054906101000a900460ff166003811115610954577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141515610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098d90610b75565b60405180910390fd5b60006000505460026109a89190610be5565b34148015156109b75760006000fd5b7fd5d55c8a68912e9a110618df8d5e2e83b8d83211c57a8ddd1203df92885dc88160405160405180910390a133600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260146101000a81548160ff02191690836003811115610a70577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055505b5b505b5056610d9d565b610a8981610c40565b82525b5050565b610a9981610c93565b82525b5050565b6000610aad601983610bd3565b9150610ab882610d08565b6020820190505b919050565b6000610ad1600e83610bd3565b9150610adc82610d32565b6020820190505b919050565b6000610af5601a83610bd3565b9150610b0082610d5c565b6020820190505b919050565b610b1581610c88565b82525b5050565b6000602082019050610b316000830184610a80565b5b92915050565b6000602082019050610b4d6000830184610a90565b5b92915050565b60006020820190508181036000830152610b6d81610aa0565b90505b919050565b60006020820190508181036000830152610b8e81610ac4565b90505b919050565b60006020820190508181036000830152610baf81610ae8565b90505b919050565b6000602082019050610bcc6000830184610b0c565b5b92915050565b60008282526020820190505b92915050565b6000610bf082610c88565b9150610bfb83610c88565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c3457610c33610ca6565b5b82820290505b92915050565b6000610c4b82610c67565b90505b919050565b6000819050610c6182610d86565b5b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b6000610c9e82610c53565b90505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b565b7f4f6e6c792062757965722063616e2063616c6c20746869732e0000000000000060008201525b50565b7f496e76616c69642073746174652e00000000000000000000000000000000000060008201525b50565b7f4f6e6c792073656c6c65722063616e2063616c6c20746869732e00000000000060008201525b50565b600481101515610d9957610d98610cd7565b5b5b50565bfea2646970667358221220b13eff70db366e24f0315808bc17b82bfe6d373ac5d663e804e88420e1e2af3764736f6c63430008030033") + "");
static const std::string simple_payment_channel = common::Encode::HexDecode(std::string("608060405260405162000cc638038062000cc6833981810160405281019062000029919062000144565b5b30600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508042620000fb919062000188565b60026000508190909055505b5050620002955662000294565b600081519050620001258162000258565b5b92915050565b6000815190506200013d8162000276565b5b92915050565b60006000604083850312156200015a5760006000fd5b60006200016a8582860162000114565b92505060206200017d858286016200012c565b9150505b9250929050565b600062000195826200021c565b9150620001a2836200021c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620001da57620001d962000227565b5b82820190505b92915050565b6000620001f382620001fb565b90505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b6200026381620001e6565b81141515620002725760006000fd5b5b50565b62000281816200021c565b81141515620002905760006000fd5b5b50565b5b610a2180620002a56000396000f3fe60806040523480156100115760006000fd5b50600436106100825760003560e01c806366d003ac1161005c57806366d003ac146100cc57806367e404ce146100ea5780639714378c14610108578063d4dca69b1461012457610082565b80630e1da6c314610088578063415ffba7146100925780634665096d146100ae57610082565b60006000fd5b610090610142565b005b6100ac60048036038101906100a79190610640565b610194565b005b6100b66102c2565b6040516100c39190610803565b60405180910390f35b6100d46102cb565b6040516100e19190610777565b60405180910390f35b6100f26102f1565b6040516100ff9190610777565b60405180910390f35b610122600480360381019061011d9190610615565b610317565b005b61012c610398565b604051610139919061075b565b60405180910390f35b60026000505442101515156101575760006000fd5b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101f15760006000fd5b81600260005081909090555061020d82826103be63ffffffff16565b15156102195760006000fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610282573d600060003e3d6000fd5b50600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5050565b60026000505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103745760006000fd5b600260005054811115156103885760006000fd5b8060026000508190909055505b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060007fdce7816498efeb01170e62af6c6b04b5aaf83832e6331f4cfdd8db2edc473bbb60001b9050600061042130866040516020016104009291906107d9565b6040516020818303038152906040528051906020012061049463ffffffff16565b9050600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661046c82866104c963ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16149250505061048e5650505b92915050565b6000816040516020016104a79190610734565b6040516020818303038152906040528051906020012090506104c4565b919050565b60006000600060006104e08561054963ffffffff16565b925092509250600186848484604051600081526020016040526040516105099493929190610793565b6020604051602081039080840390855afa15801561052c573d600060003e3d6000fd5b505050602060405103519350505050610543565050505b92915050565b600060006000604184511415156105605760006000fd5b6020840151915060408401519050606084015160001a9250828282925092509250610586565b9193909250566109ea565b60006105a461059f84610846565b61081f565b9050828152602081018484840111156105bd5760006000fd5b6105c8848285610915565b505b9392505050565b600082601f83011215156105e55760006000fd5b81356105f5848260208601610591565b9150505b92915050565b60008135905061060e816109cf565b5b92915050565b6000602082840312156106285760006000fd5b6000610636848285016105ff565b9150505b92915050565b60006000604083850312156106555760006000fd5b6000610663858286016105ff565b925050602083013567ffffffffffffffff8111156106815760006000fd5b61068d858286016105d1565b9150505b9250929050565b6106a181610897565b82525b5050565b6106b181610884565b82525b5050565b6106c1816108aa565b82525b5050565b6106d96106d4826108aa565b610957565b82525b5050565b6106e9816108ef565b82525b5050565b60006106fd601c83610878565b9150610708826109a5565b601c820190505b919050565b61071d816108d6565b82525b5050565b61072d816108e1565b82525b5050565b600061073f826106f0565b915061074b82846106c8565b6020820191508190505b92915050565b600060208201905061077060008301846106a8565b5b92915050565b600060208201905061078c6000830184610698565b5b92915050565b60006080820190506107a860008301876106b8565b6107b56020830186610724565b6107c260408301856106b8565b6107cf60608301846106b8565b5b95945050505050565b60006040820190506107ee60008301856106e0565b6107fb6020830184610714565b5b9392505050565b60006020820190506108186000830184610714565b5b92915050565b600061082961083b565b90506108358282610925565b5b919050565b600060405190505b90565b600067ffffffffffffffff82111561086157610860610962565b5b61086a82610993565b90506020810190505b919050565b60008190505b92915050565b600061088f826108b5565b90505b919050565b60006108a2826108b5565b90505b919050565b60008190505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b600060ff821690505b919050565b60006108fa82610902565b90505b919050565b600061090d826108b5565b90505b919050565b828183376000838301525b505050565b61092e82610993565b810181811067ffffffffffffffff8211171561094d5761094c610962565b5b80604052505b5050565b60008190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b565b6000601f19601f83011690505b919050565b7f19457468657265756d205369676e6564204d6573736167653a0a33320000000060008201525b50565b6109d8816108d6565b811415156109e65760006000fd5b5b50565bfea2646970667358221220fc03ff6709710340badcd8689b1c985de83ff2c3a15931de9a062182a0e5c3c364736f6c63430008030033") + "000000000000000000000000dc09e1166271813aac21ff255960dcf39ccc000b0000000000000000000000000000000000000000000000000000000000000064");

static const uint32_t kRootNodeCount = 31u;
static std::set<uint32_t> invalid_root_node_vec;
static const uint32_t kConsensusNodeCount = 31u;
static std::set<uint32_t> invalid_consensus_node_vec;
static const char* kRootNodeIdEndFix = "2f72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851";
static const char* kConsensusNodeIdEndFix = "1f72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851";
static std::string test_from_key = "";

class TestMoreNodeTransaction : public testing::Test {
public:
    static void WriteDefaultLogConf(
        const std::string& log_conf_path,
        const std::string& log_path) {
        FILE* file = NULL;
        file = fopen(log_conf_path.c_str(), "w");
        if (file == NULL) {
            return;
        }

        std::string log_str = ("# log4cpp.properties\n"
            "log4cpp.rootCategory = WARN\n"
            "log4cpp.category.sub1 = WARN, programLog\n"
            "log4cpp.appender.rootAppender = ConsoleAppender\n"
            "log4cpp.appender.rootAppender.layout = PatternLayout\n"
            "log4cpp.appender.rootAppender.layout.ConversionPattern = %d [%p] %m%n\n"
            "log4cpp.appender.programLog = RollingFileAppender\n"
            "log4cpp.appender.programLog.fileName = ") + log_path + "\n" +
            std::string("log4cpp.appender.programLog.maxFileSize = 1073741824\n"
                "log4cpp.appender.programLog.maxBackupIndex = 1\n"
                "log4cpp.appender.programLog.layout = PatternLayout\n"
                "log4cpp.appender.programLog.layout.ConversionPattern = %d [%p] %m%n\n");
        fwrite(log_str.c_str(), log_str.size(), 1, file);
        fclose(file);
    }

    static void SetUpTestCase() {
        system("rm -rf ./core.* ./test_db");
        common::global_stop = true;
        db::Db::Instance()->Init("./test_db");
        std::string config_path_ = "./";
        std::string conf_path = config_path_ + "/tenon.conf";
        std::string log_conf_path = config_path_ + "/log4cpp.properties";
        std::string log_path = config_path_ + "/tenon.log";
        WriteDefaultLogConf(log_conf_path, log_path);
        log4cpp::PropertyConfigurator::configure(log_conf_path);

//         while (pool_index_map_.size() < common::kInvalidPoolIndex) {
//             security::PrivateKey prikey;
//             security::PublicKey pubkey(prikey);
//             std::string pubkey_str;
//             ASSERT_EQ(pubkey.Serialize(pubkey_str, false), security::kPublicKeyUncompressSize);
//             std::string address = security::Secp256k1::Instance()->ToAddressWithPublicKey(pubkey_str);
//             auto pool_index = common::GetPoolIndex(address);
//             auto iter = pool_index_map_.find(pool_index);
//             if (iter != pool_index_map_.end()) {
//                 continue;
//             }
// 
//             std::string prikey_str;
//             ASSERT_EQ(prikey.Serialize(prikey_str), security::kPrivateKeySize);
//             pool_index_map_.insert(std::make_pair(pool_index, prikey_str));
//         }
// 
//         for (auto iter = pool_index_map_.begin(); iter != pool_index_map_.end(); ++iter) {
//             std::cout << "pool_index_map_.insert(std::make_pair(" << iter->first << ", common::Encode::HexDecode(\"" << common::Encode::HexEncode(iter->second) << "\")));" << std::endl;
//         }

        pool_index_map_.insert(std::make_pair(0, common::Encode::HexDecode("15e931b6f91e6027f3f4180a00bd6bfec18d420ae931ddbfc0c64699e092ee7e")));
        pool_index_map_.insert(std::make_pair(1, common::Encode::HexDecode("47058a8e0b8be811beaff5750f91b31ff0e13046f6b0b79da92b0f1cddacd298")));
        pool_index_map_.insert(std::make_pair(2, common::Encode::HexDecode("d08f88afb32d047ad56b09f5d627345bc8d88da60b99287246c1c7278eb949ab")));
        pool_index_map_.insert(std::make_pair(3, common::Encode::HexDecode("ef67b909654365acb19650940988c8d5256a9941bf2c84c43bc1996c98fe52be")));
        pool_index_map_.insert(std::make_pair(4, common::Encode::HexDecode("b1bd97f2ba10b17939d00c3dab97dfe8d9cfc79421ae5cbed47b698ca005cb35")));
        pool_index_map_.insert(std::make_pair(5, common::Encode::HexDecode("62de298659450dc889c8b4ffc90e565b5f4b38ee063da95f7346ad99dcded287")));
        pool_index_map_.insert(std::make_pair(6, common::Encode::HexDecode("90b4966e5a798a03df418e758994be94e3b39f40d56dd07daf3658cd7a06f453")));
        pool_index_map_.insert(std::make_pair(7, common::Encode::HexDecode("ce2d915cad73da8f7ce1b4b4bf2fceaa48d6b05d37513bf1f63491ec39922acf")));
        pool_index_map_.insert(std::make_pair(8, common::Encode::HexDecode("39bbc61095fe34f9b1f1cbbc4393c1920e3eb057a06d58723b14a4ee2ed9b48a")));
        pool_index_map_.insert(std::make_pair(9, common::Encode::HexDecode("256aad249e4a2c87f8063a19bcdc2a50c15c317e2aa6c584258b122a87e322b7")));
        pool_index_map_.insert(std::make_pair(10, common::Encode::HexDecode("c9b29da356345a1a5ab4a3385de1b17661e32a04ff204caa775021fd21502c31")));
        pool_index_map_.insert(std::make_pair(11, common::Encode::HexDecode("086ac8f2dd747d314e2b9dcce4acf50a250d5c65587f65c3bd747f713a51fd7a")));
        pool_index_map_.insert(std::make_pair(12, common::Encode::HexDecode("bf46e27d5b88e963d8f7b3728f66d2ba6bae31ea2034fd6be39f8ff81256c93d")));
        pool_index_map_.insert(std::make_pair(13, common::Encode::HexDecode("9417aba6d8ddddd4aa521abc752d3728c0ab438c6850a9033a5fe461d0c03876")));
        pool_index_map_.insert(std::make_pair(14, common::Encode::HexDecode("27f10c4e39437be8eabf38e152a3e7624a89d09e16f243cbe42e86e513272157")));
        pool_index_map_.insert(std::make_pair(15, common::Encode::HexDecode("2e514e75f02cb852855109257625c39572787328fdd9ff2e5686a29b8734e5ba")));
        pool_index_map_.insert(std::make_pair(16, common::Encode::HexDecode("035e1a591ab8820f3c14680e43a3f2d2080a6badacc79571a278fec62ac81f9d")));
        pool_index_map_.insert(std::make_pair(17, common::Encode::HexDecode("d0b3003ead53f77fc8cec813a10ac14c33a9d5beecae6abfa0ecd0f75fa9f481")));
        pool_index_map_.insert(std::make_pair(18, common::Encode::HexDecode("1a10bf0725038375bedba147b0fed7b9dad7327b7eb165b7478db1b486b4215c")));
        pool_index_map_.insert(std::make_pair(19, common::Encode::HexDecode("33b5b4c8633fd1bb401c1b90d74892cb93df905d032158b546b2098c9115e5ce")));
        pool_index_map_.insert(std::make_pair(20, common::Encode::HexDecode("6fb7a235865570bdfd58d2fe9b6753c3feaa3b61f97e752cf53a6d968d3b9136")));
        pool_index_map_.insert(std::make_pair(21, common::Encode::HexDecode("05da2322820e529543a36d7bd9358f8ca2cf06a17aa2de7d24c2061c4bec3596")));
        pool_index_map_.insert(std::make_pair(22, common::Encode::HexDecode("6fa75789e4f84666e9cd7bae1fe14236c4d9f5b626675337003efd7ffdb5f47e")));
        pool_index_map_.insert(std::make_pair(23, common::Encode::HexDecode("e54298eba416073c6c9cc1485c8ae6394c125278981adcc1cd6238a671d68979")));
        pool_index_map_.insert(std::make_pair(24, common::Encode::HexDecode("af49e6f7ef00bee11cddc3e69d26494c0980c5e5bbeb0bea324be173e2df20e0")));
        pool_index_map_.insert(std::make_pair(25, common::Encode::HexDecode("99f98f75e1ac526ce32b2843bd693a51dc8db50aab75cbe56d0af8c94ae1723b")));
        pool_index_map_.insert(std::make_pair(26, common::Encode::HexDecode("252be258cd4abb8964b6c424ad1641d7f7482af45ca8b8aa2be81a045f08ca65")));
        pool_index_map_.insert(std::make_pair(27, common::Encode::HexDecode("d225c903f0552c6ebe0869ed97747032c2a45117afca6dac68871b7c5dd8ba4f")));
        pool_index_map_.insert(std::make_pair(28, common::Encode::HexDecode("c8438e4bb9768dd7a8f7dc3f2c4b3a7c7fe082040826ed9899ffa7300dbea3ea")));
        pool_index_map_.insert(std::make_pair(29, common::Encode::HexDecode("de8b240cc82f58d512ed970bfc363f2e38f8de2ffa258e0518024fc8c92ac7b6")));
        pool_index_map_.insert(std::make_pair(30, common::Encode::HexDecode("4dd6ea46f4ae1448023031a163d21f56d6b30870fd7f29528507036b88c2f95f")));
        pool_index_map_.insert(std::make_pair(31, common::Encode::HexDecode("fb1a48bc9fb646d3563ed950903edf7a154b5fe215dbee81083ea55b3050ccef")));
        pool_index_map_.insert(std::make_pair(32, common::Encode::HexDecode("7c995290d11ce7465c0948ffc831ec1e710560a2ec73386acd404754643faedf")));
        pool_index_map_.insert(std::make_pair(33, common::Encode::HexDecode("f3225c0225a10b22068c79fa0034e8ed80ccf29fa17bf9584a43bf38ee2cf5ac")));
        pool_index_map_.insert(std::make_pair(34, common::Encode::HexDecode("41bb0f79206d88f19707a93475acae0377ae87c5ba4ed8c9ddb88fdca057db7b")));
        pool_index_map_.insert(std::make_pair(35, common::Encode::HexDecode("a941c8a835775f70a65f3662605cab30a31cc7b257792fdedc86c550fa224f6d")));
        pool_index_map_.insert(std::make_pair(36, common::Encode::HexDecode("bd341a10c6677e8fbfb1e73ee299678debe3e151217010c6714ce14927525702")));
        pool_index_map_.insert(std::make_pair(37, common::Encode::HexDecode("80512731558d21405ea3fd85e002f60ecc0b16246eeb31dace113a11e77b4feb")));
        pool_index_map_.insert(std::make_pair(38, common::Encode::HexDecode("2d66024f1db2f688ba95f9c751f44af2d28f36b1b2216aaf4ba5d8e0407488de")));
        pool_index_map_.insert(std::make_pair(39, common::Encode::HexDecode("75dadc65bdfe2bd6144906d474a8a98bb7ef56ad04f387a6ca0282064a635f30")));
        pool_index_map_.insert(std::make_pair(40, common::Encode::HexDecode("3b5591fdfe7f7546502bcab3448477487646ba25b910c6908826f4550c7c39a5")));
        pool_index_map_.insert(std::make_pair(41, common::Encode::HexDecode("2b71575b8f8699313fdd23ba86c7ec5b5612d747e26e4f2526513bf099ae624d")));
        pool_index_map_.insert(std::make_pair(42, common::Encode::HexDecode("4cbbb59ec4d722517cba0755dce9dcdcf73152cec74c022987c20a943a1d1872")));
        pool_index_map_.insert(std::make_pair(43, common::Encode::HexDecode("2b9dd5abc2269df13a1def09e225562e7d7269ea30d523ebfa01c68282362493")));
        pool_index_map_.insert(std::make_pair(44, common::Encode::HexDecode("a2244fffdc51ac704de2cb1c194e7e0d74455134ab58ed69a487b36dd06a3aac")));
        pool_index_map_.insert(std::make_pair(45, common::Encode::HexDecode("e1366f43af3fb008871c392056ac5be54eb8313e918479bf155d1bf00668b51d")));
        pool_index_map_.insert(std::make_pair(46, common::Encode::HexDecode("347bde4a4a2bc931b72fe054c252837bf8c6a1414ae4499d1cf7275ec4a2ed58")));
        pool_index_map_.insert(std::make_pair(47, common::Encode::HexDecode("34c001b96898b5ad86671450f67dadb6971f393c6299f977861e0eb975e22c60")));
        pool_index_map_.insert(std::make_pair(48, common::Encode::HexDecode("8762cb571f7d0ed8250c710a229b9a037d208d04ac506e2c3a2c2c9587e7b734")));
        pool_index_map_.insert(std::make_pair(49, common::Encode::HexDecode("20049c355dea9fff1d3dddc3001a8e976c0c640815332f66c8cd2a59e4e0646a")));
        pool_index_map_.insert(std::make_pair(50, common::Encode::HexDecode("b594cdf70afd0d8edf68e57870d7720ded38e3b94a110e9f403a3557ea56c629")));
        pool_index_map_.insert(std::make_pair(51, common::Encode::HexDecode("18ca654cb6c57524f6ab7f13b4b12258db2d4b7926c052b6a6f5e189dd7b2fb6")));
        pool_index_map_.insert(std::make_pair(52, common::Encode::HexDecode("ad3323f214ad361ee1bce9fcfb14d2fd3cf7e8885e428d518dad5f01264aa378")));
        pool_index_map_.insert(std::make_pair(53, common::Encode::HexDecode("ad5ce8def6e6f1683cfa5065b91a56cb6d66b6d81b82176b6ce1d0d5bffed3f5")));
        pool_index_map_.insert(std::make_pair(54, common::Encode::HexDecode("0deea1895d524fd47e7efdb3bb5013f5a3f26f268b15b1a0a2cc9158952c635a")));
        pool_index_map_.insert(std::make_pair(55, common::Encode::HexDecode("5c810741354ae7f72e464794ec1714838ee20c1792579f1d2b6b6d7c2013b8dd")));
        pool_index_map_.insert(std::make_pair(56, common::Encode::HexDecode("372c60308055b397262a6ea157f2029281d132bfd13d0cc83a1cb64cfc7416c3")));
        pool_index_map_.insert(std::make_pair(57, common::Encode::HexDecode("01bb7c0cac6cf89eb3c716d56af8e4edd760c6b21be1dd74d46664f56502fab5")));
        pool_index_map_.insert(std::make_pair(58, common::Encode::HexDecode("c28e2397d9bf98a6b25644b94c6be8612248c326415cc86fc5d17d0561b5bbb6")));
        pool_index_map_.insert(std::make_pair(59, common::Encode::HexDecode("19a5ee48660dd510cb85a0bbf3baa2d23a12c23c25b3cbcf525bf96c501c1080")));
        pool_index_map_.insert(std::make_pair(60, common::Encode::HexDecode("af0792dae45b33618b9b91abb06c56d893c44ff9f8e2771202c732abfc14ec10")));
        pool_index_map_.insert(std::make_pair(61, common::Encode::HexDecode("ac73e3cd050fd0a48afe199f6c3eac235dbc3851a36f65e85aead1e76702b6d1")));
        pool_index_map_.insert(std::make_pair(62, common::Encode::HexDecode("fc70655542635cc321733717d9b18c30290cd7c00268f15e1646f1184cf7cb20")));
        pool_index_map_.insert(std::make_pair(63, common::Encode::HexDecode("9fa8c6b13c2c477459c9ca6888c9254ec2f28e1b5a26c1aee0d770448ddbcd0c")));
        pool_index_map_.insert(std::make_pair(64, common::Encode::HexDecode("c4ca62221b2aa5d8814f98756ed4821d51d0bdd2cc920a0239e8f70510e5c2b6")));
        pool_index_map_.insert(std::make_pair(65, common::Encode::HexDecode("4eeec7f44290ea1cc09a867d5cadddaa4737ac4a902d1628543d8c49bbbe50b9")));
        pool_index_map_.insert(std::make_pair(66, common::Encode::HexDecode("643484b9643a8db945385be2be2937eeff8a52aa66a61af9cdc5800d86560ef6")));
        pool_index_map_.insert(std::make_pair(67, common::Encode::HexDecode("9ab38ae89aa5386a242ab46a73e397523b6eca80e06ede82cdbe111c3ad7afd0")));
        pool_index_map_.insert(std::make_pair(68, common::Encode::HexDecode("e1a2100640d469b7f7a7007e17f73796a2e50c95891738c00f7b9b6b7ba26fc5")));
        pool_index_map_.insert(std::make_pair(69, common::Encode::HexDecode("fb07be9a3c668cbd0c3c4c37912feb42b92644d8096eb4b311f2cb52064ef2d4")));
        pool_index_map_.insert(std::make_pair(70, common::Encode::HexDecode("b94f475fbfa9f6287139061726c17d6aabf1ffb6c1d97b9e39ed4edcb1a2721d")));
        pool_index_map_.insert(std::make_pair(71, common::Encode::HexDecode("f6c6d0b901eb8548d2261b92f8fe1240f5924c82b0f73756586f2d6797d5a9ee")));
        pool_index_map_.insert(std::make_pair(72, common::Encode::HexDecode("fe7fc5b4f87e216cc8dbbc34043eccf73baa17af63deb7eec88650bba4482034")));
        pool_index_map_.insert(std::make_pair(73, common::Encode::HexDecode("32ff0baececa13afd145a6e00f6a5bccb1361dbca12152de6f9e7287c780f59b")));
        pool_index_map_.insert(std::make_pair(74, common::Encode::HexDecode("04d134eb5ac4b750f92d9d03929ac334d5314e53473fe2f9ed70890f0eef980b")));
        pool_index_map_.insert(std::make_pair(75, common::Encode::HexDecode("3654d4f0c332e939320fe5d2755be97ca22cb1bf0f728c18d29f70d32ab97006")));
        pool_index_map_.insert(std::make_pair(76, common::Encode::HexDecode("58382001ffca79c57c996e574ce7f6bb544e1b5ac0e17a6564277d60a347953d")));
        pool_index_map_.insert(std::make_pair(77, common::Encode::HexDecode("d56b0695e87733dad383a59b718ec2964294f509f87b89696282fcc18181ec1d")));
        pool_index_map_.insert(std::make_pair(78, common::Encode::HexDecode("b592c6bd1cd6b75ec8f8b2b5bfd3e6cb1575bea232be20003daf0e23f0f5468d")));
        pool_index_map_.insert(std::make_pair(79, common::Encode::HexDecode("1f52d430ae11506e16c9ed6197d5eb4773722f59d5d75b34335218b012659afa")));
        pool_index_map_.insert(std::make_pair(80, common::Encode::HexDecode("a6f8b540aa45b1d7550ff9a5dee9c4874f7c3c7d14b21b003772dc70310335fa")));
        pool_index_map_.insert(std::make_pair(81, common::Encode::HexDecode("d91e6796a997a9a2f03d2efe12cbaf72042cd12e75575c49fc8d24899b5b468f")));
        pool_index_map_.insert(std::make_pair(82, common::Encode::HexDecode("7a0f9263eb844def856d0b3a42e85bc8635bd26ff335933b60bbc904f99dc34f")));
        pool_index_map_.insert(std::make_pair(83, common::Encode::HexDecode("618fa49e186a16f37c3e1d1105b4e3d3286f473b813a715e1ad2858e0268fdf5")));
        pool_index_map_.insert(std::make_pair(84, common::Encode::HexDecode("813ac1ddeb5cec1802f3d45d9a1407cdd40856a60f7f3ed89736f0e78503c2a5")));
        pool_index_map_.insert(std::make_pair(85, common::Encode::HexDecode("8aa26551eec55ae912739c5bd50d3b50ec4ebd7d824d287cc320e45e9ab42d71")));
        pool_index_map_.insert(std::make_pair(86, common::Encode::HexDecode("4ed7844312a7d4a6eecd699a1aa852c550a6d7bed18ab7413852b0b595870812")));
        pool_index_map_.insert(std::make_pair(87, common::Encode::HexDecode("0e254bafd25fe8a5d1ff305c84535339bbd8754d6e8c329a801db7d1d930e880")));
        pool_index_map_.insert(std::make_pair(88, common::Encode::HexDecode("599a5faee2d77a5795f891b5fff9c2d87c7ac8aae35bd6cfafff0f9feac7409c")));
        pool_index_map_.insert(std::make_pair(89, common::Encode::HexDecode("d91e88bb1dcefcf6f2336865c1b1d16637cf11da2bb9bd8abb912a00bd138109")));
        pool_index_map_.insert(std::make_pair(90, common::Encode::HexDecode("fc93494eb527cff5f591e16448800fb6cd5ff01a8ae7e1259e2b5269b32c5863")));
        pool_index_map_.insert(std::make_pair(91, common::Encode::HexDecode("430a2f5191aa827210ffc76ab1350b31bd4e0bdddd75883059f93a6a9b1f2aa2")));
        pool_index_map_.insert(std::make_pair(92, common::Encode::HexDecode("e8108e7243d09852972147bbc716d147160252924b02a94323e6696c142f876d")));
        pool_index_map_.insert(std::make_pair(93, common::Encode::HexDecode("1504e450380743153fc433a3472b086173343b04f2c3f91097777b59a0847a24")));
        pool_index_map_.insert(std::make_pair(94, common::Encode::HexDecode("0253859e7c1a6dd020366e92ec9e2128c33a0158483fd63b3731d1fc28df7c15")));
        pool_index_map_.insert(std::make_pair(95, common::Encode::HexDecode("a3db40f9ba93416d24d3535486187237d31093fc8d7fbd5e92a9b62fd44d2724")));
        pool_index_map_.insert(std::make_pair(96, common::Encode::HexDecode("e33dc73f2b58e682800c5606a0f89b677012f12d12ce7505c92821b81470221d")));
        pool_index_map_.insert(std::make_pair(97, common::Encode::HexDecode("85e2c8a587d3d73e21a062c6ff339d7d3eb2ede340cbff811b98761e183f9817")));
        pool_index_map_.insert(std::make_pair(98, common::Encode::HexDecode("e6bb25b85197da2b22695eca608ae1c4dcfee7838d04be00b8948d7bb291bd6a")));
        pool_index_map_.insert(std::make_pair(99, common::Encode::HexDecode("c246005594ee407e36db264aa0cbf02b6605ffba28d5b98dc67fc7693b440194")));
        pool_index_map_.insert(std::make_pair(100, common::Encode::HexDecode("97fc3fba6811210cc6cd81a1249c6077c6745ade2605e6f12e0bbf8ddd6c89df")));
        pool_index_map_.insert(std::make_pair(101, common::Encode::HexDecode("66fd6838471ba5f0e2d72858016984b50eb737d4a06df0c66a0a98f903514849")));
        pool_index_map_.insert(std::make_pair(102, common::Encode::HexDecode("68f99eeb447d17f87aca37083fb9425f4af07ad0ae0f5743dcc4602f718c8f9e")));
        pool_index_map_.insert(std::make_pair(103, common::Encode::HexDecode("74d8c3bf8163b7036491aaf1e41f4b669289f316482522f7ff99c1aa55ffd02b")));
        pool_index_map_.insert(std::make_pair(104, common::Encode::HexDecode("d8f54e15dd5987d8e2dac58b474652e54b9730a08beef72234fe4a33fe720925")));
        pool_index_map_.insert(std::make_pair(105, common::Encode::HexDecode("80000abe8755288323b85de48f8bc50089788b52aea8b61df8076c0a5722f94b")));
        pool_index_map_.insert(std::make_pair(106, common::Encode::HexDecode("724a9de201f7b76d9aab1cf636ae4d28556f59dfb6481a7b35527b2d8cdc7f5d")));
        pool_index_map_.insert(std::make_pair(107, common::Encode::HexDecode("b65b3ff9715cbda366c1483c465ae86b16f00830d71958408ee1ebcea8ebb7dd")));
        pool_index_map_.insert(std::make_pair(108, common::Encode::HexDecode("5463f1c874586cc0cdb70a16c8ad2daf899d045b5ad3285a51918d05cabb4aa6")));
        pool_index_map_.insert(std::make_pair(109, common::Encode::HexDecode("dfaf083e952944ae5b6fa448ff4eadbb02cb0ea8291a7fe3064978f3a0b19576")));
        pool_index_map_.insert(std::make_pair(110, common::Encode::HexDecode("158a18f4d1d042e575d6e7b83f6e1b770115d99e43365fcee554132607d6c516")));
        pool_index_map_.insert(std::make_pair(111, common::Encode::HexDecode("036d5818f9ab8baf01e83011ac97b02a2198643f19ffc8f7733c69695c5d0340")));
        pool_index_map_.insert(std::make_pair(112, common::Encode::HexDecode("eedf58390835384b79a629a0ff2319dce658a2996559890d0f1ec4252d534198")));
        pool_index_map_.insert(std::make_pair(113, common::Encode::HexDecode("c2d7c8bea1f7a15e77f89757bd10a9ebe68a6a1b29e215229036f65197c8d92e")));
        pool_index_map_.insert(std::make_pair(114, common::Encode::HexDecode("e87d911d97a5d81172adc1e28f282c532232fa2513a10076e5b4ed1f94f28423")));
        pool_index_map_.insert(std::make_pair(115, common::Encode::HexDecode("885390534f33d2f14a7d2a2c1583c1c7c37565f5f9eb5b627eb2ad32766f35ad")));
        pool_index_map_.insert(std::make_pair(116, common::Encode::HexDecode("72260ce1a71de2c693a9524c99244efba80dca27d0fe3880150eba5e828ece99")));
        pool_index_map_.insert(std::make_pair(117, common::Encode::HexDecode("3e85bb512d4f741524002b3665f889fe26f4711ccad89aaaf3835aba7c698349")));
        pool_index_map_.insert(std::make_pair(118, common::Encode::HexDecode("0d2d469af1d847d98bb9149d95f58d8258ce0640ba25c3fdc03b6ea80dbf57a5")));
        pool_index_map_.insert(std::make_pair(119, common::Encode::HexDecode("53d2b81cb2c422ea8edf0ba23c384e2ca81f38aaafac5eb6b811b9884ee4e770")));
        pool_index_map_.insert(std::make_pair(120, common::Encode::HexDecode("9d73fcf9b3af295f7fcbbf4cb7a1cfe97256143ec7c474bf32d95793a2716a8f")));
        pool_index_map_.insert(std::make_pair(121, common::Encode::HexDecode("37735951a18ea690c2ed8fe956369e9deb0059d4f223525dc2fb969c4188f7ec")));
        pool_index_map_.insert(std::make_pair(122, common::Encode::HexDecode("38736772447ccf01ca2929f625e7f17f99b3f94ca4744441f9884bacb5225246")));
        pool_index_map_.insert(std::make_pair(123, common::Encode::HexDecode("abd5c635db9cb9167a168e9e5c18a1c6212bd9b40040ce7a8daf00b3d425a49b")));
        pool_index_map_.insert(std::make_pair(124, common::Encode::HexDecode("a40344401f7986e1a705cd4ca47bd9e92e5fcdda89770c0bb9f601f549e0d0ca")));
        pool_index_map_.insert(std::make_pair(125, common::Encode::HexDecode("fca3b7227c4bb869c3568cfcbabb927be63cd616d6f22c3b7176380c7bb52ba9")));
        pool_index_map_.insert(std::make_pair(126, common::Encode::HexDecode("81a998d3de3de38c8580246cbeca088633f57b2525d588c59bae468cfa72df7a")));
        pool_index_map_.insert(std::make_pair(127, common::Encode::HexDecode("ee7da3be9b34cd6b172df76cdd0e355f4df2f4a9f6b8eae0f6690e3b1702b197")));
        pool_index_map_.insert(std::make_pair(128, common::Encode::HexDecode("1a7c79f547bcb468fa8e731075cf8a456be3c8777adcb1b94bce14191aac6134")));
        pool_index_map_.insert(std::make_pair(129, common::Encode::HexDecode("85e5b8766f26238c090d7ad31e1d1d86aa149cd529f85e5683ec675d0ffc4fb2")));
        pool_index_map_.insert(std::make_pair(130, common::Encode::HexDecode("61441daa24ffdb52f39ac04a89f34ec5b4e344d94a51338923c6ce3a5fe8dc33")));
        pool_index_map_.insert(std::make_pair(131, common::Encode::HexDecode("eb8ae816b1f6d1a13fc52ff806fe4e13a8d2a47902d80f5ce5feade375989d81")));
        pool_index_map_.insert(std::make_pair(132, common::Encode::HexDecode("97861a4b7fc024839154dc4f8c6174b47fbcb49a522b08f852beafd9e658a291")));
        pool_index_map_.insert(std::make_pair(133, common::Encode::HexDecode("c82aea6d06cef2854d82a1e43204439c45859d61d5f2aea590c2fbdc96780831")));
        pool_index_map_.insert(std::make_pair(134, common::Encode::HexDecode("679cce9ffe29a90a9fa9536cfc2f9436268caedcbbdb648ff6f3244db8cbc95f")));
        pool_index_map_.insert(std::make_pair(135, common::Encode::HexDecode("7441ce2997999ab7fbaf766098e990bb1cc34608145a0ec43f2eb1b1b17b17e0")));
        pool_index_map_.insert(std::make_pair(136, common::Encode::HexDecode("7da22092d42ca49662913355328c1de39ff6f86f5594d35f240159d466fe953c")));
        pool_index_map_.insert(std::make_pair(137, common::Encode::HexDecode("ffdc9a1e3d20574bd3ab010e276664325d35165334f6fe61cf28b117f106a8b6")));
        pool_index_map_.insert(std::make_pair(138, common::Encode::HexDecode("fdd45aabeccbcc4eb571c1dc2e0848b9456378b1a2e569fce73d5c733f0ac6ab")));
        pool_index_map_.insert(std::make_pair(139, common::Encode::HexDecode("0f412181a2fef578f54ee5592fa9ff05d8028214ff2eab063221d77522534aed")));
        pool_index_map_.insert(std::make_pair(140, common::Encode::HexDecode("60a7fd3840d138e595bd7820de0e2316ae1d9c68ce926ecb47d8a289b275c67d")));
        pool_index_map_.insert(std::make_pair(141, common::Encode::HexDecode("8fddb8bf8883acea4a25544d2d36b668e79383841dce6443d4312f32d646b134")));
        pool_index_map_.insert(std::make_pair(142, common::Encode::HexDecode("813365532ba268896ea763e79bf5b4656defd79c689313f5dcc651e358c76c90")));
        pool_index_map_.insert(std::make_pair(143, common::Encode::HexDecode("3d75c16ad44b019b6b32b088070daa2e8aa30c5834ee2ef3e4ffd5b0c16e44b7")));
        pool_index_map_.insert(std::make_pair(144, common::Encode::HexDecode("0baf8a943c1064d90e7cea36486595133733335accf6cbbc3bcfdc9b4c8cbc5c")));
        pool_index_map_.insert(std::make_pair(145, common::Encode::HexDecode("b44d52ec4bd55629c1f12daac55eaf559325847c1293444ac482f49de0602962")));
        pool_index_map_.insert(std::make_pair(146, common::Encode::HexDecode("a2b689e2cf31f92549b6e58bd91e9e353e7b6d0d3628c420ddb15db77cbe5af0")));
        pool_index_map_.insert(std::make_pair(147, common::Encode::HexDecode("513d00bc4ef7d4d62150d72e2e6123e09d28ccd94b8ef0b52b1efe9f786de8af")));
        pool_index_map_.insert(std::make_pair(148, common::Encode::HexDecode("143808af8f11855622236c2eb4e642ebfeca9d2d56956482ac7a66b064f700a5")));
        pool_index_map_.insert(std::make_pair(149, common::Encode::HexDecode("2ec96ac9249a6a5352233d0b45b51c7365d2e3f26879e78dd1ff55cd8075dfee")));
        pool_index_map_.insert(std::make_pair(150, common::Encode::HexDecode("279b0cba1a501d1355266c49d5aae0ecf2bfc8764d5c31f957590cae5b76f7f0")));
        pool_index_map_.insert(std::make_pair(151, common::Encode::HexDecode("d294bedb1c13707164a165225a98556a40bbf54284c41390a718741ce4ea2032")));
        pool_index_map_.insert(std::make_pair(152, common::Encode::HexDecode("994950518d285eb7c5db7c249f96cf9ccbd5aeaaff1e4c941a1f9669de283f42")));
        pool_index_map_.insert(std::make_pair(153, common::Encode::HexDecode("a0f1db120629264d11b8f1b9100aac38613b350b861b05c1898d4a87354493c7")));
        pool_index_map_.insert(std::make_pair(154, common::Encode::HexDecode("a22357972ca5eba6a3e3659c1b5e45b313605038c995d7fd514f3ee56ea8607b")));
        pool_index_map_.insert(std::make_pair(155, common::Encode::HexDecode("21d577560c26a5937f81916cd92a575ccbb9e595bf1e2ba001bf761b95d43dbe")));
        pool_index_map_.insert(std::make_pair(156, common::Encode::HexDecode("b37d6b568fb7f59e191c2e8171caf07959009a2423aeb37b4018d4061b1ce859")));
        pool_index_map_.insert(std::make_pair(157, common::Encode::HexDecode("9c2d5030f3e7ab4458f3fa122744f6c45cb460e19baa6725bb0c2ea2339924bd")));
        pool_index_map_.insert(std::make_pair(158, common::Encode::HexDecode("545f88234909a1018a2e54db40ed1742b7b566db5e534fd9c150140e3e3bf75e")));
        pool_index_map_.insert(std::make_pair(159, common::Encode::HexDecode("febe2365aafaa49d2438fa43016ce40eb7f26c35f19d5ff519c9116725c9a569")));
        pool_index_map_.insert(std::make_pair(160, common::Encode::HexDecode("73977d6cd1c25dd50700992890dcf37c535899e650af4ab74fcc16920cb3ab95")));
        pool_index_map_.insert(std::make_pair(161, common::Encode::HexDecode("1a7c23c582830f518168b999e334178a6df95bcb677790daa0ce1e1ea2c18002")));
        pool_index_map_.insert(std::make_pair(162, common::Encode::HexDecode("92903318b6f9920720cbd86794d1d04ac235b4ad9828990b3a62ad1ee91c7b")));
        pool_index_map_.insert(std::make_pair(163, common::Encode::HexDecode("138dbf625b5d2c2bf34e7ec87ab4656cb623079f47c934c010c364940774ffbf")));
        pool_index_map_.insert(std::make_pair(164, common::Encode::HexDecode("3af376f7ce97e6a17e477b5168d0e8d4e4b6f5085b0b0320ae0a33194a498d55")));
        pool_index_map_.insert(std::make_pair(165, common::Encode::HexDecode("06ebde365fea76a7b283ccfcd542a6616feebf8a527726edfeab040a75eb755e")));
        pool_index_map_.insert(std::make_pair(166, common::Encode::HexDecode("20ceb20557f76b32f1478772b6b338c1f470d521157a4717f794436c391befc8")));
        pool_index_map_.insert(std::make_pair(167, common::Encode::HexDecode("9a6319cfbe1ac36a62e2515f1e7c92354bd4371af523a8c71e5c22674aaf54d9")));
        pool_index_map_.insert(std::make_pair(168, common::Encode::HexDecode("98e90f36e6ddd00add84a83444666dae474b2cca938cb274f513583960145ed2")));
        pool_index_map_.insert(std::make_pair(169, common::Encode::HexDecode("9385a502948ece346ea41b0dec22c39cb2132443bd0aad5ff9e0aa9546542a81")));
        pool_index_map_.insert(std::make_pair(170, common::Encode::HexDecode("863bb5c519bdae744cb2dc36ea7e1c81536e2f307476f4b2a1409766c17323b1")));
        pool_index_map_.insert(std::make_pair(171, common::Encode::HexDecode("08006141f5817ee2c4ca969a579a5241368dcb1c60e02fe2322787bc82bebc95")));
        pool_index_map_.insert(std::make_pair(172, common::Encode::HexDecode("92cbad3a7d76ede7f34f872b25bd3a80db746b6b5d9e9499e7895c1af1d2e3a0")));
        pool_index_map_.insert(std::make_pair(173, common::Encode::HexDecode("324fc6842e4d3686a28bf690ad770db64ed983dd7484e1a43b36469f2d721e12")));
        pool_index_map_.insert(std::make_pair(174, common::Encode::HexDecode("d54167effbdfccb85aebd03870a8cb29a1f68524d8c555bc176a949c46d097a4")));
        pool_index_map_.insert(std::make_pair(175, common::Encode::HexDecode("2f1019a2ec8300dbf5668a71b5b230fdf8008de2a323b3c4a505ac0c833ab8fc")));
        pool_index_map_.insert(std::make_pair(176, common::Encode::HexDecode("4ebb8ebb08e865a8e25876f98c99c8f21650cca266c8554139e0d8c4aff565ed")));
        pool_index_map_.insert(std::make_pair(177, common::Encode::HexDecode("5d5b80d1c0cfcec39ffb9a181c261ea77cf7acc3eacf5eaa4c78bb75048e2168")));
        pool_index_map_.insert(std::make_pair(178, common::Encode::HexDecode("9be80bad838a62f9eb6fc9598abdcb63c0c7340b975d50e3f76bca2de6114f17")));
        pool_index_map_.insert(std::make_pair(179, common::Encode::HexDecode("e9b60b37544cfae4581fde9682628e4de1f6b490337e60b4be20429310c91148")));
        pool_index_map_.insert(std::make_pair(180, common::Encode::HexDecode("310098a85310400c43c6757f1530c7fa199c241b8b4043343c927b57f9a1fce8")));
        pool_index_map_.insert(std::make_pair(181, common::Encode::HexDecode("e27bcc23b06a201c8a5b947b57f9ddd0791d61b42dda109c34ca11c7c3096c73")));
        pool_index_map_.insert(std::make_pair(182, common::Encode::HexDecode("c5c482422be0f907b368ac52015701a88dc17fb5d7b35ada02e3922d6358ba34")));
        pool_index_map_.insert(std::make_pair(183, common::Encode::HexDecode("caecf015a460846cf31de81215d76b1f72c3517daeaf00a51cb3f28a3d83cd08")));
        pool_index_map_.insert(std::make_pair(184, common::Encode::HexDecode("fcf882211eccf860b2579ac72fe344ba6cf221b432acd9648f31419e6472aa18")));
        pool_index_map_.insert(std::make_pair(185, common::Encode::HexDecode("d0d65302df20abe7cb4d9abe48b30cc931d3535a602ef197e32386cd67ed3265")));
        pool_index_map_.insert(std::make_pair(186, common::Encode::HexDecode("c4cd1edbd47b4243e2d1aab1cb2eda7a59cbd44f472e185585ec9a6409b2b4d4")));
        pool_index_map_.insert(std::make_pair(187, common::Encode::HexDecode("b34b5a2c9e76082b74e1df363404ff0e6e218490327ef6e5f0e1cf09c8b55b53")));
        pool_index_map_.insert(std::make_pair(188, common::Encode::HexDecode("6e834c496a19258235e85046dd5b78244285e6b92712ca22255a9dfc7e64a773")));
        pool_index_map_.insert(std::make_pair(189, common::Encode::HexDecode("215f4413bcfa964e740b44394498681efef411cd84977bf24a19623e6f0bb6c3")));
        pool_index_map_.insert(std::make_pair(190, common::Encode::HexDecode("f954af36f01e17b474e7d1df0f3e27bde3b60bf3ac8379dc4ee25c65139fdc91")));
        pool_index_map_.insert(std::make_pair(191, common::Encode::HexDecode("4b7a6af4ba9b2bd4e0e3028b8e4ac7aa4d2a6a6dd3d2da9ec1a7d102d7d29902")));
        pool_index_map_.insert(std::make_pair(192, common::Encode::HexDecode("2a5410c202e2166818a2a4a089e3b521dba647130849a81332f26ed533db68c1")));
        pool_index_map_.insert(std::make_pair(193, common::Encode::HexDecode("41e1e34b07b5bb071fb301ffcee5dadc6fb280e2c66e4e4adb864ca1d1571833")));
        pool_index_map_.insert(std::make_pair(194, common::Encode::HexDecode("a2e97e96d3f817b3157844a122db327dcefd7db15e7671b53395e8c5d736c9ad")));
        pool_index_map_.insert(std::make_pair(195, common::Encode::HexDecode("b4b8be050186c44d60379544af23e00beba3562e51a9d8be9f3c88614428ce2b")));
        pool_index_map_.insert(std::make_pair(196, common::Encode::HexDecode("078c33f6546fc8697a26c9b723b48ed2e4663d8b9b9a106284993b44ad7702")));
        pool_index_map_.insert(std::make_pair(197, common::Encode::HexDecode("ac714ba23774cc7c7349d6fa058bff44393c8d3ee894d4cf0269f239b4df3abe")));
        pool_index_map_.insert(std::make_pair(198, common::Encode::HexDecode("39dfcb499d2b7ef023ed1b41f7c038c7348adaae0e62fb87f11ea99effa3952e")));
        pool_index_map_.insert(std::make_pair(199, common::Encode::HexDecode("373ca30989c70464fa1bf2bd67a80f04284036797d61ddb9a11f73de03038446")));
        pool_index_map_.insert(std::make_pair(200, common::Encode::HexDecode("8fba5296be5ffb962eca11ef09ca6265cc15760af5d440f1a25b1b611138b298")));
        pool_index_map_.insert(std::make_pair(201, common::Encode::HexDecode("798c886bf4eed0d1f6e755d267a605cdbd6d454b5569c93c06b34dcd20d3fc7a")));
        pool_index_map_.insert(std::make_pair(202, common::Encode::HexDecode("ec46547d4d21b913b0b6d4a9ba02d7b851fb4bdb5e75540793a47719739bd78e")));
        pool_index_map_.insert(std::make_pair(203, common::Encode::HexDecode("426cd01e536ceaf6aec6b352a85f600d89ef3aa5bf1a9b7dea855d88c9f12b48")));
        pool_index_map_.insert(std::make_pair(204, common::Encode::HexDecode("83e9dd1d69dd98afc0289f77e33215d4375f610acd0db7f6ff0925582b190889")));
        pool_index_map_.insert(std::make_pair(205, common::Encode::HexDecode("f7f1efb1a6f0ec3f49ee9008438ec2136f0d7b7d51d75bc55d559cfeb1fd7011")));
        pool_index_map_.insert(std::make_pair(206, common::Encode::HexDecode("bd2fca7e16cfd583fee1dc8fc3b69c31dba2aa7211afc9a2d5715418d05eb016")));
        pool_index_map_.insert(std::make_pair(207, common::Encode::HexDecode("a6e9c165eb534dea311b99eae8fae381fb5af57ed8dd474cb9c4e502854016e5")));
        pool_index_map_.insert(std::make_pair(208, common::Encode::HexDecode("4b43c014c31b2ca1b488524ddb2de60c5d8992472331944bc53f27afa76b6512")));
        pool_index_map_.insert(std::make_pair(209, common::Encode::HexDecode("42f8077de021eb3baae428ece6292b0c5e8b7779c17d2367def012a347520c64")));
        pool_index_map_.insert(std::make_pair(210, common::Encode::HexDecode("9e23b14d06377a9ede9aac98f16d495c87b03264def0880c63ba5cb146f9473f")));
        pool_index_map_.insert(std::make_pair(211, common::Encode::HexDecode("c7787479aeeaab19646441c006443da65388a6355c3a21e3dc48049ad6449661")));
        pool_index_map_.insert(std::make_pair(212, common::Encode::HexDecode("db308c27344fae69382ebf6d216e18371a2c146651773cc67b14b770ba1a1d9d")));
        pool_index_map_.insert(std::make_pair(213, common::Encode::HexDecode("313e94817afe6985fa4eab4d5ab45abe2a96364f4baad43c8aa6a6f441a47a20")));
        pool_index_map_.insert(std::make_pair(214, common::Encode::HexDecode("544639d6a3208469bc3aae02acd1b6c73d7be0656b1be85fd402f2b2e49660a2")));
        pool_index_map_.insert(std::make_pair(215, common::Encode::HexDecode("d920990b509acac6d7313d056dd9340de502b4b7a784fd3015920a980cb8aa90")));
        pool_index_map_.insert(std::make_pair(216, common::Encode::HexDecode("7dae638a668029587e7e170ef0e562b5f60a2ef8e43dc859d334ac154a50257a")));
        pool_index_map_.insert(std::make_pair(217, common::Encode::HexDecode("a35db59292e6aa6beac6e08ef34abf685e46a250bb31e94cc73b2d232d4497c5")));
        pool_index_map_.insert(std::make_pair(218, common::Encode::HexDecode("2cedc1724db3021ddf9f6a0dca36f2374a2078dc3be29b5dde470f959bd065fd")));
        pool_index_map_.insert(std::make_pair(219, common::Encode::HexDecode("a65d28921e67976ccfab6acfa71092c79a9b61e93155a1bc75849855aa02153a")));
        pool_index_map_.insert(std::make_pair(220, common::Encode::HexDecode("d3444f6e874f17bfcdbcc3a74553de18b648a461030d20655fcea5e7be604b1a")));
        pool_index_map_.insert(std::make_pair(221, common::Encode::HexDecode("547c5c66cbfcf1d17536173502ba574eed63d59aa90a6c06e96fc472610f2d66")));
        pool_index_map_.insert(std::make_pair(222, common::Encode::HexDecode("a0731d785680ff831bc9e428b4a01e4f58db1fc569d4b14f6d66d4869ed9f864")));
        pool_index_map_.insert(std::make_pair(223, common::Encode::HexDecode("adaa675f8a0b82c40b75d0108ca7b4cfa0739da266adee143c1371402f646a9a")));
        pool_index_map_.insert(std::make_pair(224, common::Encode::HexDecode("ef0d28b87c6b686f0f1e0c2a0a6f7026a69d220374edfe389b2cce9b399b215c")));
        pool_index_map_.insert(std::make_pair(225, common::Encode::HexDecode("fd8f498cb2ded6a3050630dfa641b190b76ce59b4c25608c6d5b505ddea4827c")));
        pool_index_map_.insert(std::make_pair(226, common::Encode::HexDecode("1db3b65e3cff12be6964d8135b22022d08340fa7464eb88eae2bf39489d6efa0")));
        pool_index_map_.insert(std::make_pair(227, common::Encode::HexDecode("abee33fa20cb1f305016b9e1cfa8a3864c5a3436f55048bb3ce8c9c45cd08004")));
        pool_index_map_.insert(std::make_pair(228, common::Encode::HexDecode("365e11141936e2b7ae6bbca12ddcf0b6a83792ce146f36974a07d0b5d1f3d0dc")));
        pool_index_map_.insert(std::make_pair(229, common::Encode::HexDecode("ae8754bf5c7a8fecf4b80335d9ff85011dab7df260b62314a14e8c58c150273a")));
        pool_index_map_.insert(std::make_pair(230, common::Encode::HexDecode("f8e9a348250f15d5712ef3d1d55bbd1c0814ec9fc50e83ab1a288d22c5587e38")));
        pool_index_map_.insert(std::make_pair(231, common::Encode::HexDecode("b8dc4c1993541392ea8549dcc712c84b360a99efe5829cb8b27ec7070bf0ae8b")));
        pool_index_map_.insert(std::make_pair(232, common::Encode::HexDecode("dabdad072eb44afa69899bcc705df1cfe0eb77934c46063ac3d53b84a67f0404")));
        pool_index_map_.insert(std::make_pair(233, common::Encode::HexDecode("c0d2ec3a99b4c12fa400867da1ef325b1d9942691141e9bfde92138bddce594b")));
        pool_index_map_.insert(std::make_pair(234, common::Encode::HexDecode("f452d1de193124b55cf2d88155d119b67f3baf520cb7e46e4b02651ed8a3267a")));
        pool_index_map_.insert(std::make_pair(235, common::Encode::HexDecode("c312bdaf10e31a468f2c4f3677709aab714d6b0a86bc6d27cd2b9814d6c992ef")));
        pool_index_map_.insert(std::make_pair(236, common::Encode::HexDecode("1b21ec3b839640645bee5016e4acfb3935df43c1966b39ce12a6f2e37c0bebb7")));
        pool_index_map_.insert(std::make_pair(237, common::Encode::HexDecode("45c5ae1a622c72e9957172580eb4b18ca66416587345471c3234aa51942b573b")));
        pool_index_map_.insert(std::make_pair(238, common::Encode::HexDecode("440ae9c43cd74746d3a9171443dc0143ae7b8a5bb68918670e3b8e342db76132")));
        pool_index_map_.insert(std::make_pair(239, common::Encode::HexDecode("dcdff53a53cc70c03b85fd04b36e5a449d5a84890a77323325ca9464687fe14c")));
        pool_index_map_.insert(std::make_pair(240, common::Encode::HexDecode("341e9505c64c990242b920e3adf77634ff815d38056fe7ddc5c1114976902e78")));
        pool_index_map_.insert(std::make_pair(241, common::Encode::HexDecode("9436da3c8d423767e60963979104f2e640920c68d1fda99ceeefbd87917e0092")));
        pool_index_map_.insert(std::make_pair(242, common::Encode::HexDecode("e1fa6eea9be8dfced6b04bc8816f0616d7630071c8abfb944dffa53f7762b05b")));
        pool_index_map_.insert(std::make_pair(243, common::Encode::HexDecode("82f5bd0507d47d5e96a79d6dfdd70e3daf69fd8d361cb9c9799f115ef7d95966")));
        pool_index_map_.insert(std::make_pair(244, common::Encode::HexDecode("23bcbe0d3e6a35ce081c53e4b7f5a039f4ab054cca7abe5ac040968fd1c5ce58")));
        pool_index_map_.insert(std::make_pair(245, common::Encode::HexDecode("f229a4b0ec84327b90cf479767dc5781ec69c3bc207f97e45194340e9215260e")));
        pool_index_map_.insert(std::make_pair(246, common::Encode::HexDecode("c8cc29f590cbe30bea1a9999b740868460efe2c378a448811d5993f9cdb74fc1")));
        pool_index_map_.insert(std::make_pair(247, common::Encode::HexDecode("73d8d1e0dab820c72cc0e2e254ef96624fde373fd39bf6787e7261390f724e54")));
        pool_index_map_.insert(std::make_pair(248, common::Encode::HexDecode("b46c6cbbdb407daf7d1611f9ee416306c5c6098dfc83fe80d0fc8ff7a744a134")));
        pool_index_map_.insert(std::make_pair(249, common::Encode::HexDecode("78b7c1e4c571463ef72e70ef478f8534c5de576ce80f94a924807fcf3f9ac397")));
        pool_index_map_.insert(std::make_pair(250, common::Encode::HexDecode("6b41438696ebb429edf3aaf8ad907ad0696605f64acd9401115f4067d1737cd5")));
        pool_index_map_.insert(std::make_pair(251, common::Encode::HexDecode("2e3463eda6fb40355942e16d67c867392e6184171e14aed073aa68b4d36d7825")));
        pool_index_map_.insert(std::make_pair(252, common::Encode::HexDecode("81b6502516f876206e562bdefb8d7d1507b0bccffdc0f61c1b34ccf0bfd208c7")));
        pool_index_map_.insert(std::make_pair(253, common::Encode::HexDecode("3db21474a70303482c8c8c4395ff4c97120b69832bef162b21675ea5422627fc")));
        pool_index_map_.insert(std::make_pair(254, common::Encode::HexDecode("9dde2eaab26334ff348959a02bcebedee37de577792b82992e90f0a8136347ae")));
        pool_index_map_.insert(std::make_pair(255, common::Encode::HexDecode("593bee91f956047f7dfa1df3603dfdb701b5e5fb601e4836a00ebd7a65f48d4d")));
        test_from_key = pool_index_map_[0];

        InitEnv();
    }

    static void AddGenisisBlock(uint32_t type) {
        uint64_t genesis_account_balance = 21000000000llu * common::kTenonMiniTransportUnit / pool_index_map_.size();
        uint64_t all_balance = 0llu;
        for (auto iter = pool_index_map_.begin(); iter != pool_index_map_.end(); ++iter) {
            bft::protobuf::Block tenon_block;
            auto tx_list = tenon_block.mutable_tx_list();
            security::PrivateKey prikey(iter->second);
            security::PublicKey pubkey(prikey);
            std::string pubkey_str;
            ASSERT_EQ(pubkey.Serialize(pubkey_str, false), security::kPublicKeyUncompressSize);
            std::string address = security::Secp256k1::Instance()->ToAddressWithPublicKey(pubkey_str);
            auto tx_info = tx_list->Add();
            tx_info->set_version(common::kTransactionVersion);
            tx_info->set_gid(common::CreateGID(""));
            tx_info->set_from(address);
            tx_info->set_from_pubkey(pubkey_str);
            tx_info->set_from_sign("");
            tx_info->set_to("");
            tx_info->set_amount(genesis_account_balance);
            tx_info->set_balance(genesis_account_balance);
            tx_info->set_gas_limit(0);
            tx_info->set_type(type);
            tx_info->set_network_id(network::kConsensusShardBeginNetworkId);
            tenon_block.set_prehash("");
            tenon_block.set_version(common::kTransactionVersion);
            tenon_block.set_elect_ver(0);
            tenon_block.set_agg_pubkey("");
            tenon_block.set_agg_sign_challenge("");
            tenon_block.set_agg_sign_response("");
            tenon_block.set_pool_index(iter->first);
            tenon_block.set_height(0);
            tenon_block.set_network_id(common::GlobalInfo::Instance()->network_id());
            tenon_block.set_hash(GetBlockHash(tenon_block));
            ASSERT_EQ(BftManager::Instance()->AddGenisisBlock(tenon_block), kBftSuccess);
            std::string pool_hash;
            uint64_t pool_height = 0;
            uint64_t tm;
            int res = block::AccountManager::Instance()->GetBlockInfo(
                iter->first,
                &pool_height,
                &pool_hash,
                &tm);
            ASSERT_EQ(res, block::kBlockSuccess);
            ASSERT_EQ(pool_height, 0);
            ASSERT_EQ(pool_hash, GetBlockHash(tenon_block));
            auto account_ptr = block::AccountManager::Instance()->GetAcountInfo(address);
            ASSERT_FALSE(account_ptr == nullptr);
            uint64_t balance = 0;
            ASSERT_EQ(account_ptr->GetBalance(&balance), block::kBlockSuccess);
            ASSERT_EQ(balance, genesis_account_balance);
            all_balance += balance;
        }

        ASSERT_EQ(all_balance, 21000000000llu * common::kTenonMiniTransportUnit);
    }

    void CreateNewTransaction(
            const std::string& from_prikey,
            const std::string& to_prikey,
            uint64_t amount,
            uint64_t gas_limit,
            uint32_t tx_type,
            bool just_to_id,
            std::map<std::string, std::string>& attrs,
            transport::protobuf::Header& msg) {
        msg.set_src_dht_key("");
        uint32_t des_net_id = common::GlobalInfo::Instance()->network_id();
        dht::DhtKeyManager dht_key(des_net_id, 0);
        msg.set_des_dht_key(dht_key.StrKey());
        msg.set_priority(transport::kTransportPriorityHighest);
        msg.set_id(common::GlobalInfo::Instance()->MessageId());
        msg.set_type(common::kBftMessage);
        msg.set_client(false);
        msg.set_hop_count(0);
        auto broad_param = msg.mutable_broadcast();
        SetDefaultBroadcastParam(broad_param);
        bft::protobuf::BftMessage bft_msg;
        bft_msg.set_gid(common::CreateGID(""));
        bft_msg.set_rand(0);
        bft_msg.set_bft_step(bft::kBftInit);
        bft_msg.set_leader(false);
        bft_msg.set_net_id(des_net_id);
        security::PrivateKey from_private_key(from_prikey);
        security::PublicKey from_pubkey(from_private_key);
        std::string from_pubkey_str;
        ASSERT_EQ(from_pubkey.Serialize(from_pubkey_str, false), security::kPublicKeyUncompressSize);
        std::string id = security::Secp256k1::Instance()->ToAddressWithPublicKey(from_pubkey_str);
        if (common::GlobalInfo::Instance()->network_id() != network::kRootCongressNetworkId) {
            uint32_t from_net_id = 0;
            ASSERT_EQ(block::AccountManager::Instance()->GetAddressConsensusNetworkId(
                id,
                &from_net_id), block::kBlockSuccess);
            ASSERT_EQ(from_net_id, common::GlobalInfo::Instance()->network_id());
        }
        
        bft_msg.set_node_id(id);
        bft_msg.set_pubkey(from_pubkey_str);
        bft::protobuf::TxBft tx_bft;
        auto new_tx = tx_bft.mutable_new_tx();
        auto iter = attrs.find("contract_orignal_gid");
        if (iter == attrs.end()) {
            new_tx->set_gid(common::CreateGID(from_pubkey_str));
        } else {
            new_tx->set_gid(iter->second);
        }

        new_tx->set_from(id);
        new_tx->set_from_pubkey(from_pubkey_str);
        if (!to_prikey.empty() && !just_to_id) {
            security::PrivateKey to_private_key(to_prikey);
            security::PublicKey to_pubkey(to_private_key);
            std::string to_pubkey_str;
            ASSERT_EQ(to_pubkey.Serialize(to_pubkey_str, false), security::kPublicKeyUncompressSize);
            std::string to_id = security::Secp256k1::Instance()->ToAddressWithPublicKey(to_pubkey_str);
            new_tx->set_to(to_id);
        }

        if (just_to_id) {
            new_tx->set_to(to_prikey);
        }

        if (tx_type == common::kConsensusCreateContract) {
            ASSERT_TRUE(attrs.find(bft::kContractBytesCode) != attrs.end());
            std::string contract_addres = security::Secp256k1::Instance()->GetContractAddress(
                id,
                new_tx->gid(),
                attrs[bft::kContractBytesCode]);
            new_tx->set_to(contract_addres);
        }

        new_tx->set_amount(amount);
        new_tx->set_gas_limit(gas_limit);
        new_tx->set_type(tx_type);
        for (auto iter = attrs.begin(); iter != attrs.end(); ++iter) {
            auto attr = new_tx->add_attr();
            attr->set_key(iter->first);
            attr->set_value(iter->second);
        }

        auto hash128 = GetTxMessageHash(*new_tx);
        auto tx_data = tx_bft.SerializeAsString();
        bft_msg.set_data(tx_data);
        security::Signature sign;
        ASSERT_TRUE(security::Schnorr::Instance()->Sign(
            hash128,
            from_private_key,
            from_pubkey,
            sign));
        std::string sign_challenge_str;
        std::string sign_response_str;
        sign.Serialize(sign_challenge_str, sign_response_str);
        bft_msg.set_sign_challenge(sign_challenge_str);
        bft_msg.set_sign_response(sign_response_str);
        msg.set_data(bft_msg.SerializeAsString());
    }

    void CreateTransaction(
            uint32_t bft_step,
            const std::string& from_prikey,
            const std::string& to_prikey,
            bool to_add,
            transport::protobuf::Header& msg) {
        msg.set_src_dht_key("");
        uint32_t des_net_id = network::kConsensusShardBeginNetworkId;
        dht::DhtKeyManager dht_key(des_net_id, 0);
        msg.set_des_dht_key(dht_key.StrKey());
        msg.set_priority(transport::kTransportPriorityHighest);
        msg.set_id(common::GlobalInfo::Instance()->MessageId());
        msg.set_type(common::kBftMessage);
        msg.set_client(false);
        msg.set_hop_count(0);
        auto broad_param = msg.mutable_broadcast();
        SetDefaultBroadcastParam(broad_param);
        bft::protobuf::BftMessage bft_msg;
        bft_msg.set_gid(common::CreateGID(""));
        bft_msg.set_rand(0);
        bft_msg.set_bft_step(bft_step);
        bft_msg.set_leader(false);
        bft_msg.set_net_id(des_net_id);
        security::PrivateKey from_private_key(from_prikey);
        security::PublicKey from_pubkey(from_private_key);
        std::string from_pubkey_str;
        ASSERT_EQ(from_pubkey.Serialize(from_pubkey_str, false), security::kPublicKeyUncompressSize);
        std::string id = security::Secp256k1::Instance()->ToAddressWithPublicKey(from_pubkey_str);

        if (common::GlobalInfo::Instance()->network_id() != network::kRootCongressNetworkId) {
            uint32_t from_net_id = 0;
            ASSERT_EQ(block::AccountManager::Instance()->GetAddressConsensusNetworkId(
                id,
                &from_net_id), block::kBlockSuccess);
            ASSERT_EQ(from_net_id, common::GlobalInfo::Instance()->network_id());
        }

        bft_msg.set_node_id(id);
        bft_msg.set_pubkey(from_pubkey_str);
        bft::protobuf::TxBft tx_bft;
        auto to_tx = tx_bft.mutable_to_tx();
        auto block = to_tx->mutable_block();
        auto tx_info = block->mutable_tx_list()->Add();
        tx_info->set_gid(common::CreateGID(from_pubkey_str));
        tx_info->set_from(id);
        tx_info->set_from_pubkey(from_pubkey_str);
        tx_info->set_to_add(to_add);
        tx_info->set_status(kBftSuccess);
        tx_info->set_type(common::kConsensusTransaction);
        security::PrivateKey to_private_key(to_prikey);
        security::PublicKey to_pubkey(to_private_key);
        std::string to_pubkey_str;
        ASSERT_EQ(to_pubkey.Serialize(to_pubkey_str, false), security::kPublicKeyUncompressSize);
        std::string to_id = security::Secp256k1::Instance()->ToAddressWithPublicKey(to_pubkey_str);
        tx_info->set_to(to_id);
        tx_info->set_amount(10llu * common::kTenonMiniTransportUnit);
        tx_info->set_gas_limit(1000000);

        std::string pool_hash;
        uint64_t pool_height = 0;
        uint32_t pool_index = common::GetPoolIndex(id);
        uint64_t tm;
        int res = block::AccountManager::Instance()->GetBlockInfo(
            pool_index,
            &pool_height,
            &pool_hash,
            &tm);
        if (res != block::kBlockSuccess) {
            assert(false);
            return;
        }

        block->set_prehash(pool_hash);
        block->set_version(common::kTransactionVersion);
        block->set_elect_ver(common::GlobalInfo::Instance()->now_elect_version());
        block->set_network_id(common::GlobalInfo::Instance()->network_id());
        block->set_consistency_random(vss::VssManager::Instance()->EpochRandom());
        block->set_height(pool_height + 1);
        block->set_timestamp(common::TimeStampMsec());
        block->set_hash(GetBlockHash(*block));

        auto tx_data = tx_bft.SerializeAsString();
        bft_msg.set_data(tx_data);
        security::Signature sign;
        ASSERT_TRUE(security::Schnorr::Instance()->Sign(
            block->hash(),
            from_private_key,
            from_pubkey,
            sign));
        std::string sign_challenge_str;
        std::string sign_response_str;
        sign.Serialize(sign_challenge_str, sign_response_str);
        bft_msg.set_sign_challenge(sign_challenge_str);
        bft_msg.set_sign_response(sign_response_str);
        msg.set_data(bft_msg.SerializeAsString());
    }

    static void CreateElectionBlock(uint32_t network_id, std::vector<std::string>& pri_vec) {
        std::map<uint32_t, elect::MembersPtr> in_members;
        std::map<uint32_t, elect::MembersPtr> out_members;
        std::map<uint32_t, elect::NodeIndexMapPtr> in_index_members;
        std::map<uint32_t, uint32_t> begin_index_map_;
        for (uint32_t i = 0; i < pri_vec.size(); ++i) {
            auto net_id = network_id;
            auto iter = in_members.find(net_id);
            if (iter == in_members.end()) {
                in_members[net_id] = std::make_shared<elect::Members>();
                in_index_members[net_id] = std::make_shared<
                    std::unordered_map<std::string, uint32_t>>();
                begin_index_map_[net_id] = 0;
            }

            security::PrivateKey prikey(pri_vec[i]);
            security::PublicKey pubkey(prikey);
            std::string pubkey_str;
            ASSERT_EQ(pubkey.Serialize(pubkey_str, false), security::kPublicKeyUncompressSize);
            std::string id = security::Secp256k1::Instance()->ToAddressWithPublicKey(pubkey_str);
            security::CommitSecret secret;
            in_members[net_id]->push_back(std::make_shared<elect::BftMember>(
                net_id, id, pubkey_str, begin_index_map_[net_id], "", 0, ""));
            in_index_members[net_id]->insert(std::make_pair(id, begin_index_map_[net_id]));
            ++begin_index_map_[net_id];
        }

        for (auto iter = in_members.begin(); iter != in_members.end(); ++iter) {
            auto index_map_iter = in_index_members.find(iter->first);
            ASSERT_TRUE(index_map_iter != in_index_members.end());
            elect::MemberManager::Instance()->SetNetworkMember(
                iter->first,
                iter->second,
                index_map_iter->second);
            ASSERT_TRUE(elect::MemberManager::Instance()->network_members_[iter->first] != nullptr);
            ASSERT_TRUE(elect::MemberManager::Instance()->node_index_map_[iter->first] != nullptr);
        }
    }

    static void JoinNetwork(uint32_t network_id) {
        network::DhtManager::Instance()->UnRegisterDht(network_id);
        network::UniversalManager::Instance()->UnRegisterUniversal(network_id);
        dht::DhtKeyManager dht_key(
            network_id,
            common::GlobalInfo::Instance()->country(),
            common::GlobalInfo::Instance()->id());
        dht::NodePtr local_node = std::make_shared<dht::Node>(
            common::GlobalInfo::Instance()->id(),
            dht_key.StrKey(),
            dht::kNatTypeFullcone,
            false,
            common::GlobalInfo::Instance()->config_local_ip(),
            common::GlobalInfo::Instance()->config_local_port(),
            common::GlobalInfo::Instance()->config_local_ip(),
            common::GlobalInfo::Instance()->config_local_port(),
            security::Schnorr::Instance()->str_pubkey(),
            common::GlobalInfo::Instance()->node_tag());
        local_node->first_node = true;
        transport::TransportPtr transport;
        auto dht = std::make_shared<elect::ElectDht>(transport, local_node);
        dht->Init(nullptr, nullptr);
        auto base_dht = std::dynamic_pointer_cast<dht::BaseDht>(dht);
        network::DhtManager::Instance()->RegisterDht(network_id, base_dht);
        network::UniversalManager::Instance()->RegisterUniversal(network_id, base_dht);
    }

    static void InitEnv() {
        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kRootCongressNetworkId);
        {
            // root shard
            std::vector<std::string> pri_vec;
            pri_vec.push_back(common::Encode::HexDecode("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e"));
            for (uint32_t i = 1; i < kRootNodeCount; ++i) {
                char from_data[128];
                snprintf(from_data, sizeof(from_data), "%04d%s", i, kRootNodeIdEndFix);
                pri_vec.push_back(common::Encode::HexDecode(from_data));
            }

            CreateElectionBlock(network::kRootCongressNetworkId, pri_vec);
            ASSERT_TRUE(elect::MemberManager::Instance()->IsLeader(
                network::kRootCongressNetworkId,
                common::GlobalInfo::Instance()->id(),
                vss::VssManager::Instance()->EpochRandom()));
        }

        {
            // consensus shard
            std::vector<std::string> pri_vec;
            pri_vec.push_back(common::Encode::HexDecode("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e"));
            for (uint32_t i = 1; i < kConsensusNodeCount; ++i) {
                char from_data[128];
                snprintf(from_data, sizeof(from_data), "%04d%s", i, kConsensusNodeIdEndFix);
                pri_vec.push_back(common::Encode::HexDecode(from_data));
            }

            CreateElectionBlock(network::kConsensusShardBeginNetworkId, pri_vec);
        }

        auto transport_ptr = std::dynamic_pointer_cast<transport::Transport>(
            std::make_shared<transport::TestTransport>());
        transport::MultiThreadHandler::Instance()->Init(transport_ptr, transport_ptr);
        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kConsensusShardBeginNetworkId);
        AddGenisisBlock(common::kConsensusCreateGenesisAcount);
    }

    static void SetGloableInfo(const std::string& private_key, uint32_t network_id) {
        security::PrivateKey prikey(common::Encode::HexDecode(private_key));
        security::PublicKey pubkey(prikey);
        std::string pubkey_str;
        ASSERT_EQ(pubkey.Serialize(pubkey_str, false), security::kPublicKeyUncompressSize);
        std::string id = security::Secp256k1::Instance()->ToAddressWithPublicKey(pubkey_str);
        security::Schnorr::Instance()->set_prikey(std::make_shared<security::PrivateKey>(prikey));
        common::GlobalInfo::Instance()->set_id(id);
        common::GlobalInfo::Instance()->set_consensus_shard_count(1);
        common::GlobalInfo::Instance()->set_network_id(network_id);
        JoinNetwork(network::kRootCongressNetworkId);
        JoinNetwork(network::kUniversalNetworkId);
        JoinNetwork(network::kConsensusShardBeginNetworkId);
    }

    static std::string GetAccountIdByPrikey(const std::string& private_key) {
        security::PrivateKey prikey(private_key);
        security::PublicKey pubkey(prikey);
        std::string pubkey_str;
        EXPECT_EQ(pubkey.Serialize(pubkey_str, false), security::kPublicKeyUncompressSize);
        std::string id = security::Secp256k1::Instance()->ToAddressWithPublicKey(pubkey_str);
        return id;
    }

    static void RemoveAccountId(const std::string& id) {
        auto iter = block::AccountManager::Instance()->acc_map_.find(id);
        if (iter != block::AccountManager::Instance()->acc_map_.end()) {
            block::AccountManager::Instance()->acc_map_.erase(iter);
        }

        auto set_iter = block::DbAccountInfo::account_id_set_.find(id);
        if (set_iter != block::DbAccountInfo::account_id_set_.end()) {
            block::DbAccountInfo::account_id_set_.erase(set_iter);
        }

        std::string key = db::kGlobalDickKeyAccountIdExists + "_" + id;
        db::Db::Instance()->Delete(key);
    }

    static void AddConsensusBlocks() {

    }

    static void TearDownTestCase() {
    }

    virtual void SetUp() {
    }

    virtual void TearDown() {
    }

    void SetDefaultBroadcastParam(transport::protobuf::BroadcastParam* broad_param) {
        broad_param->set_layer_left(0);
        broad_param->set_layer_right(((std::numeric_limits<uint64_t>::max))());
        broad_param->set_ign_bloomfilter_hop(kBftBroadcastIgnBloomfilterHop);
        broad_param->set_stop_times(kBftBroadcastStopTimes);
        broad_param->set_hop_limit(kBftHopLimit);
        broad_param->set_hop_to_layer(kBftHopToLayer);
        broad_param->set_neighbor_count(kBftNeighborCount);
    }

    void AddNewTxToTxPool(const bft::protobuf::TxInfo& tx_info) {
        auto tx_ptr = std::make_shared<TxItem>(tx_info);
        GidManager::Instance()->NewGidTxValid(tx_ptr->tx.gid(), tx_ptr);
    }

    void ResetBftSecret(const std::string& bft_gid, uint32_t net_id, const std::string& id) {
        uint32_t member_index = elect::MemberManager::Instance()->GetMemberIndex(net_id, id);
        auto mem_ptr = elect::MemberManager::Instance()->GetMember(net_id, member_index);
        bft::BftManager::Instance()->bft_hash_map_[bft_gid]->secret_ = mem_ptr->secret;
        std::string sec_str;
        mem_ptr->secret.Serialize(sec_str);
    }

    void Transfer(
            const std::string& from_prikey,
            const std::string& to_prikey,
            uint64_t amount,
            uint64_t gas_limit,
            uint32_t tx_type,
            bool just_to_id,
            std::map<std::string, std::string>& attrs,
            transport::protobuf::Header* broadcast_msg) {
        transport::protobuf::Header msg;
        CreateNewTransaction(from_prikey, to_prikey, amount, gas_limit, tx_type, just_to_id, attrs, msg);
        bft::protobuf::BftMessage bft_msg;
        bft_msg.ParseFromString(msg.data());
        bft::protobuf::TxBft tx_bft;
        EXPECT_TRUE(tx_bft.ParseFromString(bft_msg.data()));
        
        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->HandleMessage(msg);
        usleep(bft::kBftStartDeltaTime);
        if (bft::BftManager::Instance()->StartBft("") != kBftSuccess) {
            return;
        }

        auto bft_gid = common::GlobalInfo::Instance()->gid_hash_ +
            std::to_string(common::GlobalInfo::Instance()->gid_idx_ - 1);
        auto iter = bft::BftManager::Instance()->bft_hash_map_.find(bft_gid);
        ASSERT_TRUE(iter != bft::BftManager::Instance()->bft_hash_map_.end());
        std::vector<transport::protobuf::Header> backup_msgs;
        for (uint32_t i = 1; i < kConsensusNodeCount; ++i) {
            auto leader_prepare_msg = bft::BftManager::Instance()->leader_prepare_msg_;
            {
                protobuf::BftMessage bft_msg;
                ASSERT_TRUE(bft_msg.ParseFromString(leader_prepare_msg.data()));
                ASSERT_EQ(bft_msg.gid(), bft_gid);
            }

            char from_data[128];
            snprintf(from_data, sizeof(from_data), "%04d%s", i, kConsensusNodeIdEndFix);
            SetGloableInfo(from_data, network::kConsensusShardBeginNetworkId);
            bft::BftManager::Instance()->HandleMessage(leader_prepare_msg);
            backup_msgs.push_back(bft::BftManager::Instance()->backup_prepare_msg_);
            {
                protobuf::BftMessage bft_msg;
                ASSERT_TRUE(bft_msg.ParseFromString(bft::BftManager::Instance()->backup_prepare_msg_.data()));
                ASSERT_TRUE(bft_msg.agree());
                ASSERT_EQ(bft_msg.gid(), bft_gid);
            }
        }
        
        // precommit
        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kConsensusShardBeginNetworkId);
        for (uint32_t i = 0; i < backup_msgs.size(); ++i) {
            auto back_msg = backup_msgs[i];
            bft::BftManager::Instance()->HandleMessage(back_msg);
            {
                protobuf::BftMessage bft_msg;
                auto back_msg = backup_msgs[i];
                ASSERT_TRUE(bft_msg.ParseFromString(back_msg.data()));
                ASSERT_EQ(bft_msg.gid(), bft_gid);
            }
        }
        backup_msgs.clear();

        for (uint32_t i = 1; i < kConsensusNodeCount; ++i) {
            char from_data[128];
            snprintf(from_data, sizeof(from_data), "%04d%s", i, kConsensusNodeIdEndFix);
            SetGloableInfo(from_data, network::kConsensusShardBeginNetworkId);
            ResetBftSecret(bft_gid, network::kConsensusShardBeginNetworkId, common::GlobalInfo::Instance()->id());
            auto leader_precommit_msg = bft::BftManager::Instance()->leader_precommit_msg_;
            bft::BftManager::Instance()->HandleMessage(leader_precommit_msg);
            backup_msgs.push_back(bft::BftManager::Instance()->backup_precommit_msg_);
            {
                protobuf::BftMessage bft_msg;
                ASSERT_TRUE(bft_msg.ParseFromString(bft::BftManager::Instance()->backup_precommit_msg_.data()));
                ASSERT_TRUE(bft_msg.agree());
                ASSERT_EQ(bft_msg.gid(), bft_gid);
            }
        }

        // commit
        uint32_t member_index = elect::MemberManager::Instance()->GetMemberIndex(network::kConsensusShardBeginNetworkId, common::GlobalInfo::Instance()->id());
        auto mem_ptr = elect::MemberManager::Instance()->GetMember(network::kConsensusShardBeginNetworkId, member_index);
        auto bft_ptr = bft::BftManager::Instance()->bft_hash_map_[bft_gid];

        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kConsensusShardBeginNetworkId);
        for (uint32_t i = 0; i < backup_msgs.size(); ++i) {
            bft::BftManager::Instance()->HandleMessage(backup_msgs[i]);
        }

        *broadcast_msg = bft::BftManager::Instance()->to_leader_broadcast_msg_;
        for (uint32_t i = 1; i < kConsensusNodeCount; ++i) {
            char from_data[128];
            snprintf(from_data, sizeof(from_data), "%04d%s", i, kConsensusNodeIdEndFix);
            SetGloableInfo(from_data, network::kConsensusShardBeginNetworkId);
            auto leader_commit_msg = bft::BftManager::Instance()->leader_commit_msg_;
            bft::BftManager::Instance()->bft_hash_map_[bft_gid] = bft_ptr;
            bft::BftManager::Instance()->HandleMessage(leader_commit_msg);
        }
    }

    void CreateNewAccount(
            const std::string& from_prikey,
            const std::string& to_prikey,
            transport::protobuf::Header& msg,
            transport::protobuf::Header* broadcast_msg) {
        bft::protobuf::BftMessage bft_msg;
        bft_msg.ParseFromString(msg.data());
        bft::protobuf::TxBft tx_bft;
        EXPECT_TRUE(tx_bft.ParseFromString(bft_msg.data()));

        // prepare
        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kRootCongressNetworkId);
        bft::BftManager::Instance()->HandleMessage(msg);
        usleep(bft::kBftStartDeltaTime);
        EXPECT_EQ(bft::BftManager::Instance()->StartBft(""), kBftSuccess);

        auto bft_gid = common::GlobalInfo::Instance()->gid_hash_ +
            std::to_string(common::GlobalInfo::Instance()->gid_idx_ - 1);
        auto iter = bft::BftManager::Instance()->bft_hash_map_.find(bft_gid);
        ASSERT_TRUE(iter != bft::BftManager::Instance()->bft_hash_map_.end());
        std::vector<transport::protobuf::Header> backup_msgs;
        for (uint32_t i = 1; i < kRootNodeCount; ++i) {
            char from_data[128];
            snprintf(from_data, sizeof(from_data), "%04d%s", i, kRootNodeIdEndFix);
            auto leader_prepare_msg = bft::BftManager::Instance()->leader_prepare_msg_;
            SetGloableInfo(from_data, network::kRootCongressNetworkId);
            bft::BftManager::Instance()->HandleMessage(leader_prepare_msg);
            AddNewTxToTxPool(tx_bft.to_tx().block().tx_list(0));
            backup_msgs.push_back(bft::BftManager::Instance()->backup_prepare_msg_);
            {
                protobuf::BftMessage bft_msg;
                ASSERT_TRUE(bft_msg.ParseFromString(bft::BftManager::Instance()->backup_prepare_msg_.data()));
                ASSERT_TRUE(bft_msg.agree());
            }
        }

        // precommit
        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kRootCongressNetworkId);
        for (auto iter = backup_msgs.begin(); iter != backup_msgs.end(); ++iter) {
            bft::BftManager::Instance()->HandleMessage(*iter);
        }
        backup_msgs.clear();

        for (uint32_t i = 1; i < kRootNodeCount; ++i) {
            char from_data[128];
            snprintf(from_data, sizeof(from_data), "%04d%s", i, kRootNodeIdEndFix);
            auto leader_precommit_msg = bft::BftManager::Instance()->leader_precommit_msg_;
            SetGloableInfo(from_data, network::kRootCongressNetworkId);
            ResetBftSecret(bft_gid, network::kRootCongressNetworkId, common::GlobalInfo::Instance()->id());
            bft::BftManager::Instance()->HandleMessage(leader_precommit_msg);
            AddNewTxToTxPool(tx_bft.to_tx().block().tx_list(0));
            backup_msgs.push_back(bft::BftManager::Instance()->backup_precommit_msg_);
            {
                protobuf::BftMessage bft_msg;
                ASSERT_TRUE(bft_msg.ParseFromString(bft::BftManager::Instance()->backup_precommit_msg_.data()));
                ASSERT_TRUE(bft_msg.agree());
            }
        }

        // commit
        uint32_t member_index = elect::MemberManager::Instance()->GetMemberIndex(
            network::kRootCongressNetworkId,
            common::GlobalInfo::Instance()->id());
        auto mem_ptr = elect::MemberManager::Instance()->GetMember(network::kRootCongressNetworkId, member_index);
        auto bft_ptr = bft::BftManager::Instance()->bft_hash_map_[bft_gid];

        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kRootCongressNetworkId);
        for (auto iter = backup_msgs.begin(); iter != backup_msgs.end(); ++iter) {
            bft::BftManager::Instance()->HandleMessage(*iter);
        }
        backup_msgs.clear();
        *broadcast_msg = bft::BftManager::Instance()->root_leader_broadcast_msg_;

        for (uint32_t i = 1; i < kRootNodeCount; ++i) {
            char from_data[128];
            snprintf(from_data, sizeof(from_data), "%04d%s", i, kRootNodeIdEndFix);
            auto leader_commit_msg = bft::BftManager::Instance()->leader_commit_msg_;
            SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485161e", network::kRootCongressNetworkId);
            bft::BftManager::Instance()->bft_hash_map_[bft_gid] = bft_ptr;
            bft::BftManager::Instance()->HandleMessage(leader_commit_msg);
        }

        // check broadcast msg
        auto leader_broadcast_msg = bft::BftManager::Instance()->root_leader_broadcast_msg_;
        ASSERT_EQ(leader_broadcast_msg.type(), common::kBftMessage);
        protobuf::BftMessage bft_msg_t;
        ASSERT_TRUE(bft_msg_t.ParseFromString(leader_broadcast_msg.data()));
        bft::protobuf::TxBft tx_bft_t;
        ASSERT_TRUE(tx_bft_t.ParseFromString(bft_msg_t.data()));
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).amount(), tx_bft_t.to_tx().block().tx_list(0).amount());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).from(), tx_bft_t.to_tx().block().tx_list(0).from());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).to(), tx_bft_t.to_tx().block().tx_list(0).to());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).from_pubkey(), tx_bft_t.to_tx().block().tx_list(0).from_pubkey());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).from_sign(), tx_bft_t.to_tx().block().tx_list(0).from_sign());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).gid(), tx_bft_t.to_tx().block().tx_list(0).gid());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).attr_size(), tx_bft_t.to_tx().block().tx_list(0).attr_size());

        // hash128(gid + from + to + amount + type + attrs(k:v))
        tx_bft_t.mutable_to_tx()->mutable_block()->mutable_tx_list(0)->set_type(tx_bft.to_tx().block().tx_list(0).type());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).type(), tx_bft_t.to_tx().block().tx_list(0).type());
        ASSERT_EQ(GetTxMessageHash(tx_bft.to_tx().block().tx_list(0)), GetTxMessageHash(tx_bft_t.to_tx().block().tx_list(0)));
    }

    void NewAccountDestNetworkTransfer(
            bool is_from_root,
            uint32_t tx_type,
            bool just_to_id,
            transport::protobuf::Header& root_leader_msg,
            const std::string& from_prikey,
            const std::string& to_prikey,
            std::map<std::string, std::string>& attrs,
            transport::protobuf::Header* leader_broadcast_msg) {
        // root create new account and add to consensus network
        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->HandleMessage(root_leader_msg);
        if (tx_type == common::kConsensusCreateContract) {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(root_leader_msg.data()));
            protobuf::TxBft tx_bft;
            ASSERT_TRUE(tx_bft.ParseFromString(bft_msg.data()));
            auto src_block = tx_bft.to_tx().block();
            auto& tx_list = tx_bft.to_tx().block().tx_list();
            std::string contract_address;
            std::string tx_bytes_code;
            for (int32_t i = 0; i < tx_bft.to_tx().block().tx_list(0).attr_size(); ++i) {
                if (tx_bft.to_tx().block().tx_list(0).attr(i).key() == bft::kContractBytesCode) {
                    contract_address = security::Secp256k1::Instance()->GetContractAddress(
                        tx_bft.to_tx().block().tx_list(0).from(),
                        tx_bft.to_tx().block().tx_list(0).gid(),
                        tx_bft.to_tx().block().tx_list(0).attr(i).value());
                    tx_bytes_code = tx_bft.to_tx().block().tx_list(0).attr(i).value();
                }
            }

            ASSERT_EQ(contract_address, tx_bft.to_tx().block().tx_list(0).to());
            auto contract_addr_info = block::AccountManager::Instance()->GetAcountInfo(contract_address);
            ASSERT_TRUE(contract_addr_info != nullptr);
            uint32_t address_type = block::kNormalAddress;
            std::string bytes_code;
            std::string owner;
            ASSERT_EQ(contract_addr_info->GetAddressType(&address_type), block::kBlockSuccess);
            ASSERT_EQ(address_type, block::kContractAddress);
            attrs["res_contract_addr"] = contract_address;
        }

        usleep(bft::kBftStartDeltaTime);
        ASSERT_EQ(bft::BftManager::Instance()->StartBft(""), kBftSuccess);

        auto bft_gid = common::GlobalInfo::Instance()->gid_hash_ +
            std::to_string(common::GlobalInfo::Instance()->gid_idx_ - 1);
        auto iter = bft::BftManager::Instance()->bft_hash_map_.find(bft_gid);
        ASSERT_TRUE(iter != bft::BftManager::Instance()->bft_hash_map_.end());

        std::vector<transport::protobuf::Header> backup_msgs;
        for (uint32_t i = 1; i < kConsensusNodeCount; ++i) {
            auto leader_prepare_msg = bft::BftManager::Instance()->leader_prepare_msg_;
            {
                protobuf::BftMessage bft_msg;
                ASSERT_TRUE(bft_msg.ParseFromString(leader_prepare_msg.data()));
                ASSERT_EQ(bft_msg.gid(), bft_gid);
            }

            char from_data[128];
            snprintf(from_data, sizeof(from_data), "%04d%s", i, kConsensusNodeIdEndFix);
            SetGloableInfo(from_data, network::kConsensusShardBeginNetworkId);
            bft::BftManager::Instance()->HandleMessage(leader_prepare_msg);
            backup_msgs.push_back(bft::BftManager::Instance()->backup_prepare_msg_);
            {
                protobuf::BftMessage bft_msg;
                ASSERT_TRUE(bft_msg.ParseFromString(bft::BftManager::Instance()->backup_prepare_msg_.data()));
                ASSERT_TRUE(bft_msg.agree());
                ASSERT_EQ(bft_msg.gid(), bft_gid);
            }
        }
        
        // precommit
        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kConsensusShardBeginNetworkId);
        for (uint32_t i = 0; i < backup_msgs.size(); ++i) {
            bft::BftManager::Instance()->HandleMessage(backup_msgs[i]);
        }

        backup_msgs.clear();
        for (uint32_t i = 1; i < kConsensusNodeCount; ++i) {
            auto leader_precommit_msg = bft::BftManager::Instance()->leader_precommit_msg_;
            ASSERT_TRUE(leader_precommit_msg.has_data());

            {
                protobuf::BftMessage bft_msg;
                ASSERT_TRUE(bft_msg.ParseFromString(leader_precommit_msg.data()));
                ASSERT_EQ(bft_msg.gid(), bft_gid);
            }

            char from_data[128];
            snprintf(from_data, sizeof(from_data), "%04d%s", i, kConsensusNodeIdEndFix);
            SetGloableInfo(from_data, network::kConsensusShardBeginNetworkId);
            ResetBftSecret(bft_gid, network::kConsensusShardBeginNetworkId, common::GlobalInfo::Instance()->id());
            bft::BftManager::Instance()->HandleMessage(leader_precommit_msg);
            backup_msgs.push_back(bft::BftManager::Instance()->backup_precommit_msg_);
            {
                protobuf::BftMessage bft_msg;
                ASSERT_TRUE(bft_msg.ParseFromString(bft::BftManager::Instance()->backup_precommit_msg_.data()));
                ASSERT_TRUE(bft_msg.agree());
                ASSERT_EQ(bft_msg.gid(), bft_gid);
            }
        }

        // commit
        std::string to_id;
        if (just_to_id && !to_prikey.empty()) {
            to_id = to_prikey;
        } else if (tx_type == common::kConsensusCreateContract) {
            to_id = attrs["res_contract_addr"];
        } else {
            to_id = GetIdByPrikey(to_prikey);
        }

        uint64_t src_balance = 0;
        {
            auto to_acc_info = block::AccountManager::Instance()->GetAcountInfo(to_id);
            ASSERT_TRUE(to_acc_info != nullptr);
            src_balance = to_acc_info->balance_;
        }

        uint32_t member_index = elect::MemberManager::Instance()->GetMemberIndex(network::kConsensusShardBeginNetworkId, common::GlobalInfo::Instance()->id());
        auto mem_ptr = elect::MemberManager::Instance()->GetMember(network::kConsensusShardBeginNetworkId, member_index);
        auto bft_ptr = bft::BftManager::Instance()->bft_hash_map_[bft_gid];

        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kConsensusShardBeginNetworkId);
        for (uint32_t i = 0; i < backup_msgs.size(); ++i) {
            bft::BftManager::Instance()->HandleMessage(backup_msgs[i]);
        }

        *leader_broadcast_msg = bft::BftManager::Instance()->to_leader_broadcast_msg_;
        for (uint32_t i = 1; i < kConsensusNodeCount; ++i) {
            auto leader_commit_msg = bft::BftManager::Instance()->leader_commit_msg_;
            ASSERT_TRUE(leader_commit_msg.has_data());
            {
                protobuf::BftMessage bft_msg;
                ASSERT_TRUE(bft_msg.ParseFromString(leader_commit_msg.data()));
                ASSERT_EQ(bft_msg.gid(), bft_gid);
            }

            {
                auto to_acc_info = block::AccountManager::Instance()->GetAcountInfo(to_id);
                db::DbWriteBach db_batch;
                to_acc_info->SetBalance(src_balance, db_batch);
                db::Db::Instance()->Put(db_batch);
            }

            char from_data[128];
            snprintf(from_data, sizeof(from_data), "%04d%s", i, kConsensusNodeIdEndFix);
            SetGloableInfo(from_data, network::kConsensusShardBeginNetworkId);
            bft::BftManager::Instance()->bft_hash_map_[bft_gid] = bft_ptr;
            bft::BftManager::Instance()->HandleMessage(leader_commit_msg);
        }
    }

    std::string GetIdByPrikey(const std::string& private_key) {
        security::PrivateKey prikey(private_key);
        security::PublicKey pubkey(prikey);
        std::string pubkey_str;
        EXPECT_EQ(pubkey.Serialize(pubkey_str, false), security::kPublicKeyUncompressSize);
        std::string id = security::Secp256k1::Instance()->ToAddressWithPublicKey(pubkey_str);
        return id;
    }

    void Transaction(
            const std::string& from_prikey,
            const std::string& to_prikey,
            uint64_t amount,
            uint64_t gas_limit,
            uint32_t tx_type,
            bool call_to,
            bool just_to_id,
            std::map<std::string, std::string>& attrs) {
        transport::protobuf::Header broadcast_msg;
        Transfer(from_prikey, to_prikey, amount, gas_limit, tx_type, just_to_id, attrs, &broadcast_msg);
        if (call_to) {
            bft::protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(broadcast_msg.data()));
            ASSERT_TRUE(broadcast_msg.IsInitialized());
            uint32_t des_network_id = dht::DhtKeyManager::DhtKeyGetNetId(broadcast_msg.des_dht_key());
            if (des_network_id == network::kRootCongressNetworkId) {
                transport::protobuf::Header to_root_broadcast_msg;
                CreateNewAccountWithInvalidNode(from_prikey, to_prikey, broadcast_msg, &to_root_broadcast_msg);
                ASSERT_TRUE(to_root_broadcast_msg.IsInitialized());
                transport::protobuf::Header tmp_broadcast_msg;
                NewAccountDestNetworkTransfer(true, tx_type, just_to_id, to_root_broadcast_msg, from_prikey, to_prikey, attrs, &tmp_broadcast_msg);
            } else {
                transport::protobuf::Header tmp_broadcast_msg;
                NewAccountDestNetworkTransfer(false, tx_type, just_to_id, broadcast_msg, from_prikey, to_prikey, attrs, &tmp_broadcast_msg);
            }
        }
    }

    uint64_t GetBalanceByPrikey(const std::string& prikey) {
        auto account_info = block::AccountManager::Instance()->GetAcountInfo(GetIdByPrikey(prikey));
        if (account_info == nullptr) {
            return common::kInvalidUint64;
        }

        return account_info->balance_;
    }

    void InitOfflineTransferContract(
            std::string* contract_address,
            const std::string& bytes_code,
            uint64_t owner_balance,
            uint64_t contract_balance,
            uint64_t caller_balance,
            uint64_t constructor_amount) {
        {
            std::string from_prikey = common::Encode::HexDecode(
                common::Encode::HexEncode(test_from_key));
            std::string to_prikey = common::Encode::HexDecode(
                "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709");
            uint64_t init_balance = GetBalanceByPrikey(from_prikey);
            uint64_t to_balance = GetBalanceByPrikey(to_prikey);
            ASSERT_EQ(to_balance, common::kInvalidUint64);
            uint64_t all_amount = 0;
            uint64_t amount = owner_balance;
            uint64_t all_gas = 0;
            all_amount += amount;
            all_gas += bft::kTransferGas;
            std::map<std::string, std::string> attrs;
            Transaction(
                from_prikey,
                to_prikey,
                amount,
                all_gas + 1,
                common::kConsensusTransaction,
                true,
                false,
                attrs);
            auto from_balance = GetBalanceByPrikey(from_prikey);
            to_balance = GetBalanceByPrikey(to_prikey);
            ASSERT_EQ(from_balance, init_balance - all_gas * common::GlobalInfo::Instance()->gas_price() - all_amount);
            ASSERT_EQ(to_balance, all_amount);
        }

        // create contract
        {
            std::string from_prikey = common::Encode::HexDecode(
                "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709");
            uint64_t init_balance = GetBalanceByPrikey(from_prikey);
            uint64_t all_amount = 0;
            uint64_t amount = constructor_amount;
            uint64_t all_gas = 0;
            all_gas += bft::kTransferGas + bft::kCallContractDefaultUseGas;
            std::map<std::string, std::string> attrs;
            if (!contract_address->empty()) {
                attrs["contract_orignal_gid"] = *contract_address;
            }

            attrs.insert(std::make_pair(kContractBytesCode, bytes_code));
            all_gas += (kContractBytesCode.size() + attrs[kContractBytesCode].size()) *
                bft::kKeyValueStorageEachBytes;
            all_gas += 2024;
            Transaction(
                from_prikey,
                "",
                amount,
                all_gas + 10000000llu,
                common::kConsensusCreateContract,
                true,
                false,
                attrs);
            uint64_t from_balance = GetBalanceByPrikey(from_prikey);
//             EXPECT_EQ(from_balance, init_balance - (all_gas - bft::kCallContractDefaultUseGas)  * common::GlobalInfo::Instance()->gas_price() - all_amount);
            *contract_address = attrs["res_contract_addr"];
        }

        // transfer to contract address
        {
            std::string from_prikey = common::Encode::HexDecode(
                common::Encode::HexEncode(test_from_key));
            std::string to_prikey = *contract_address;
            uint64_t init_balance = GetBalanceByPrikey(from_prikey);
            uint64_t all_amount = 0;
            uint64_t amount = contract_balance;
            uint64_t all_gas = 0;
            all_amount += amount;
            all_gas += bft::kTransferGas;
            std::map<std::string, std::string> attrs;
            Transaction(from_prikey, to_prikey, amount, all_gas + 1, common::kConsensusTransaction, true, true, attrs);
            auto from_balance = GetBalanceByPrikey(from_prikey);
            auto contract_info = block::AccountManager::Instance()->GetAcountInfo(*contract_address);
            ASSERT_TRUE(contract_info != nullptr);
            uint64_t to_balance;
            ASSERT_EQ(contract_info->GetBalance(&to_balance), block::kBlockSuccess);
            ASSERT_EQ(from_balance, init_balance - all_gas * common::GlobalInfo::Instance()->gas_price() - all_amount);
            ASSERT_EQ(to_balance, all_amount);
        }

        // create contract caller
        {
            std::string from_prikey = common::Encode::HexDecode(
                common::Encode::HexEncode(test_from_key));
            std::string to_prikey = common::Encode::HexDecode(
                "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700");
            uint64_t init_balance = GetBalanceByPrikey(from_prikey);
            uint64_t to_balance = GetBalanceByPrikey(to_prikey);
            ASSERT_EQ(to_balance, common::kInvalidUint64);
            uint64_t all_amount = 0;
            uint64_t amount = caller_balance;
            uint64_t all_gas = 0;
            all_amount += amount;
            all_gas += bft::kTransferGas;
            std::map<std::string, std::string> attrs;
            Transaction(
                from_prikey,
                to_prikey,
                amount,
                all_gas + 1,
                common::kConsensusTransaction,
                true,
                false,
                attrs);
            auto from_balance = GetBalanceByPrikey(from_prikey);
            to_balance = GetBalanceByPrikey(to_prikey);
            ASSERT_EQ(from_balance, init_balance - all_gas * common::GlobalInfo::Instance()->gas_price() - all_amount);
            ASSERT_EQ(to_balance, all_amount);
        }
    }

    void CreateNewAccountWithInvalidNode(
            const std::string& from_prikey,
            const std::string& to_prikey,
            transport::protobuf::Header& msg,
            transport::protobuf::Header* broadcast_msg) {
        bft::protobuf::BftMessage bft_msg;
        bft_msg.ParseFromString(msg.data());
        bft::protobuf::TxBft tx_bft;
        EXPECT_TRUE(tx_bft.ParseFromString(bft_msg.data()));

        // prepare
        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kRootCongressNetworkId);
        bft::BftManager::Instance()->HandleMessage(msg);
        usleep(bft::kBftStartDeltaTime);
        EXPECT_EQ(bft::BftManager::Instance()->StartBft(""), kBftSuccess);
        auto bft_gid = common::GlobalInfo::Instance()->gid_hash_ +
            std::to_string(common::GlobalInfo::Instance()->gid_idx_ - 1);
        auto iter = bft::BftManager::Instance()->bft_hash_map_.find(bft_gid);
        auto leader_sec = iter->second->secret_;
        iter->second->backup_prepare_response_[0]->secret = leader_sec;
        ASSERT_TRUE(iter != bft::BftManager::Instance()->bft_hash_map_.end());
        std::vector<transport::protobuf::Header> backup_msgs;
        for (uint32_t i = 1; i < kRootNodeCount; ++i) {
            if (invalid_root_node_vec.find(i) != invalid_root_node_vec.end()) {
                if (rand() % 3 < 2) {
                    continue;
                }
            }

            char from_data[128];
            snprintf(from_data, sizeof(from_data), "%04d%s", i, kRootNodeIdEndFix);
            auto leader_prepare_msg = bft::BftManager::Instance()->leader_prepare_msg_;
            SetGloableInfo(from_data, network::kRootCongressNetworkId);
            ResetBftSecret(bft_gid, network::kRootCongressNetworkId, common::GlobalInfo::Instance()->id());
            bft::BftManager::Instance()->HandleMessage(leader_prepare_msg);
            AddNewTxToTxPool(tx_bft.to_tx().block().tx_list(0));
            backup_msgs.push_back(bft::BftManager::Instance()->backup_prepare_msg_);
            {
                protobuf::BftMessage bft_msg;
                ASSERT_TRUE(bft_msg.ParseFromString(bft::BftManager::Instance()->backup_prepare_msg_.data()));
                ASSERT_TRUE(bft_msg.agree());
                ASSERT_EQ(bft_msg.gid(), bft_gid);
            }
        }

        // precommit
        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kRootCongressNetworkId);
        bft::BftManager::Instance()->bft_hash_map_[bft_gid]->secret_ = leader_sec;
        bft::BftManager::Instance()->bft_hash_map_[bft_gid]->backup_prepare_response_[0]->secret = leader_sec;
        uint32_t prepare_count = 0;
        for (auto iter = backup_msgs.begin(); iter != backup_msgs.end(); ++iter) {
            ++prepare_count;
            if (prepare_count >= backup_msgs.size()) {
                auto bft_ptr = bft::BftManager::Instance()->bft_hash_map_.begin()->second;
                bft_ptr->prepare_timeout_ = std::chrono::steady_clock::now();
            }
            bft::BftManager::Instance()->HandleMessage(*iter);
        }
        backup_msgs.clear();
    backup_reprecommit_goto_tag:
        for (uint32_t i = 1; i < kRootNodeCount; ++i) {
            if (invalid_root_node_vec.find(i) != invalid_root_node_vec.end()) {
                continue;
            }

            char from_data[128];
            snprintf(from_data, sizeof(from_data), "%04d%s", i, kRootNodeIdEndFix);
            auto leader_precommit_msg = bft::BftManager::Instance()->leader_precommit_msg_;
            SetGloableInfo(from_data, network::kRootCongressNetworkId);
            if (i != 7) {
                ResetBftSecret(bft_gid, network::kRootCongressNetworkId, common::GlobalInfo::Instance()->id());
            }

            bft::BftManager::Instance()->HandleMessage(leader_precommit_msg);
            AddNewTxToTxPool(tx_bft.to_tx().block().tx_list(0));
            backup_msgs.push_back(bft::BftManager::Instance()->backup_precommit_msg_);
            {
                protobuf::BftMessage bft_msg;
                ASSERT_TRUE(bft_msg.ParseFromString(bft::BftManager::Instance()->backup_precommit_msg_.data()));
                ASSERT_TRUE(bft_msg.agree());
            }
        }

        // commit
        uint32_t member_index = elect::MemberManager::Instance()->GetMemberIndex(
            network::kRootCongressNetworkId,
            common::GlobalInfo::Instance()->id());
        auto mem_ptr = elect::MemberManager::Instance()->GetMember(network::kRootCongressNetworkId, member_index);
        auto bft_ptr = bft::BftManager::Instance()->bft_hash_map_[bft_gid];
        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kRootCongressNetworkId);
        bft::BftManager::Instance()->bft_hash_map_[bft_gid]->secret_ = leader_sec;
        bft_ptr->backup_prepare_response_[0]->secret = leader_sec;
        uint32_t handled_count = 0;
        for (auto iter = backup_msgs.begin(); iter != backup_msgs.end(); ++iter) {
            ++handled_count;
            auto bft_ptr = bft::BftManager::Instance()->bft_hash_map_.begin()->second;
            bft::BftManager::Instance()->HandleMessage(*iter);
            if (bft::BftManager::Instance()->bft_hash_map_.empty()) {
                break;
            }

            if (handled_count >= backup_msgs.size()) {
                bft_ptr->precommit_timeout_ = std::chrono::steady_clock::now();
                int res = bft_ptr->CheckTimeout();
                if (res == kTimeoutCallReChallenge) {
                    bft::BftManager::Instance()->LeaderReChallenge(bft_ptr);
                }
                backup_msgs.clear();
                goto backup_reprecommit_goto_tag;
            }
        }

        backup_msgs.clear();
        *broadcast_msg = bft::BftManager::Instance()->root_leader_broadcast_msg_;
        for (uint32_t i = 1; i < kRootNodeCount; ++i) {
            if (invalid_root_node_vec.find(i) != invalid_root_node_vec.end()) {
                continue;
            }

            char from_data[128];
            snprintf(from_data, sizeof(from_data), "%04d%s", i, kRootNodeIdEndFix);
            auto leader_commit_msg = bft::BftManager::Instance()->leader_commit_msg_;
            SetGloableInfo(from_data, network::kRootCongressNetworkId);
            bft::BftManager::Instance()->bft_hash_map_[bft_gid] = bft_ptr;
            bft::BftManager::Instance()->HandleMessage(leader_commit_msg);
        }

        // check broadcast msg
        auto leader_broadcast_msg = bft::BftManager::Instance()->root_leader_broadcast_msg_;
        ASSERT_EQ(leader_broadcast_msg.type(), common::kBftMessage);
        protobuf::BftMessage bft_msg_t;
        ASSERT_TRUE(bft_msg_t.ParseFromString(leader_broadcast_msg.data()));
        bft::protobuf::TxBft tx_bft_t;
        ASSERT_TRUE(tx_bft_t.ParseFromString(bft_msg_t.data()));
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).amount(), tx_bft_t.to_tx().block().tx_list(0).amount());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).from(), tx_bft_t.to_tx().block().tx_list(0).from());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).to(), tx_bft_t.to_tx().block().tx_list(0).to());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).from_pubkey(), tx_bft_t.to_tx().block().tx_list(0).from_pubkey());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).from_sign(), tx_bft_t.to_tx().block().tx_list(0).from_sign());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).gid(), tx_bft_t.to_tx().block().tx_list(0).gid());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).attr_size(), tx_bft_t.to_tx().block().tx_list(0).attr_size());

        // hash128(gid + from + to + amount + type + attrs(k:v))
        tx_bft_t.mutable_to_tx()->mutable_block()->mutable_tx_list(0)->set_type(tx_bft.to_tx().block().tx_list(0).type());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).type(), tx_bft_t.to_tx().block().tx_list(0).type());
        ASSERT_EQ(GetTxMessageHash(tx_bft.to_tx().block().tx_list(0)), GetTxMessageHash(tx_bft_t.to_tx().block().tx_list(0)));
    }

    void ResetInvalidNodes(float invalid_root_node_rate, float invalid_consensus_node_rate) {
        invalid_root_node_vec.clear();
        invalid_consensus_node_vec.clear();
        uint32_t root_invalid_count = (uint32_t)((float)kRootNodeCount * invalid_root_node_rate);
        while (invalid_root_node_vec.size() < (root_invalid_count - 1)) {
            invalid_root_node_vec.insert(rand() % kRootNodeCount);
        }

        uint32_t cons_invalid_count = (uint32_t)((float)kConsensusNodeCount * invalid_consensus_node_rate);
        while (invalid_consensus_node_vec.size() < (cons_invalid_count - 1)) {
            invalid_consensus_node_vec.insert(rand() % kConsensusNodeCount);
        }
    }

private:
    static std::map<uint32_t, std::string> pool_index_map_;
    std::unordered_set<std::string> created_gids_;
};

std::map<uint32_t, std::string> TestMoreNodeTransaction::pool_index_map_;
TEST_F(TestMoreNodeTransaction, RootCreateNewAccount) {
    ResetInvalidNodes(0.2, 0.2);
    std::string from_prikey = common::Encode::HexDecode(
        common::Encode::HexEncode(test_from_key));
    // create 1000 address
    for (int32_t i = 0; i < 10; ++i)
    {
        char data[128];
        snprintf(data, sizeof(data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", i);
        std::string to_prikey = common::Encode::HexDecode(data);
        uint64_t init_balance = GetBalanceByPrikey(from_prikey);
        uint64_t to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(to_balance, common::kInvalidUint64);
        uint64_t all_amount = 0;
        uint64_t amount = 1000000llu * common::kTenonMiniTransportUnit;
        uint64_t all_gas = 0;
        all_amount += amount;
        all_gas += bft::kTransferGas;
        std::map<std::string, std::string> attrs;
        Transaction(
            from_prikey, to_prikey, amount, 1000000,
            common::kConsensusTransaction, true, false, attrs);
        auto from_balance = GetBalanceByPrikey(from_prikey);
        to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(from_balance, init_balance - all_amount - all_gas * common::GlobalInfo::Instance()->gas_price());
        ASSERT_EQ(to_balance, all_amount);
    }

    for (int32_t i = 0; i < 2; ++i) {
        uint32_t rand_from = rand() % 10;
        uint32_t rand_to = rand() % 10;
        if (rand_from == rand_to) {
            continue;
        }

        char from_data[128];
        snprintf(from_data, sizeof(from_data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", rand_from);
        char to_data[128];
        snprintf(to_data, sizeof(to_data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", rand_to);
        std::string from_prikey = common::Encode::HexDecode(from_data);
        std::string to_prikey = common::Encode::HexDecode(to_data);
        uint64_t init_balance = GetBalanceByPrikey(from_prikey);
        uint64_t init_to_balance = GetBalanceByPrikey(to_prikey);
        uint64_t all_amount = 0;
        uint64_t amount = (rand() % 10000) * common::kTenonMiniTransportUnit + 1;
        uint64_t all_gas = 0;
        all_amount += amount;
        all_gas += bft::kTransferGas;
        std::map<std::string, std::string> attrs;
        Transaction(
            from_prikey, to_prikey, amount, 1000000,
            common::kConsensusTransaction, true, false, attrs);
        auto from_balance = GetBalanceByPrikey(from_prikey);
        uint64_t to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(from_balance, init_balance - all_amount - all_gas * common::GlobalInfo::Instance()->gas_price());
        ASSERT_EQ(to_balance, init_to_balance + all_amount);
    }
}

TEST_F(TestMoreNodeTransaction, SomeNodeInvalid) {
    ResetInvalidNodes(0.2, 0.2);
    std::string from_prikey = common::Encode::HexDecode(
        common::Encode::HexEncode(test_from_key));
    // create 1000 address
    for (int32_t i = 0; i < 10; ++i)
    {
        char data[128];
        snprintf(data, sizeof(data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", i);
        std::string to_prikey = common::Encode::HexDecode(data);
        uint64_t init_balance = GetBalanceByPrikey(from_prikey);
        uint64_t to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(to_balance, common::kInvalidUint64);
        uint64_t all_amount = 0;
        uint64_t amount = 1000000llu * common::kTenonMiniTransportUnit;
        uint64_t all_gas = 0;
        all_amount += amount;
        all_gas += bft::kTransferGas;
        std::map<std::string, std::string> attrs;
        Transaction(
            from_prikey, to_prikey, amount, 1000000,
            common::kConsensusTransaction, true, false, attrs);
        auto from_balance = GetBalanceByPrikey(from_prikey);
        to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(from_balance, init_balance - all_amount - all_gas * common::GlobalInfo::Instance()->gas_price());
        ASSERT_EQ(to_balance, all_amount);
    }

    for (int32_t i = 0; i < 2; ++i) {
        uint32_t rand_from = rand() % 10;
        uint32_t rand_to = rand() % 10;
        if (rand_from == rand_to) {
            continue;
        }

        char from_data[128];
        snprintf(from_data, sizeof(from_data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", rand_from);
        char to_data[128];
        snprintf(to_data, sizeof(to_data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", rand_to);
        std::string from_prikey = common::Encode::HexDecode(from_data);
        std::string to_prikey = common::Encode::HexDecode(to_data);
        uint64_t init_balance = GetBalanceByPrikey(from_prikey);
        uint64_t init_to_balance = GetBalanceByPrikey(to_prikey);
        uint64_t all_amount = 0;
        uint64_t amount = (rand() % 10000) * common::kTenonMiniTransportUnit + 1;
        uint64_t all_gas = 0;
        all_amount += amount;
        all_gas += bft::kTransferGas;
        std::map<std::string, std::string> attrs;
        Transaction(
            from_prikey, to_prikey, amount, 1000000,
            common::kConsensusTransaction, true, false, attrs);
        auto from_balance = GetBalanceByPrikey(from_prikey);
        uint64_t to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(from_balance, init_balance - all_amount - all_gas * common::GlobalInfo::Instance()->gas_price());
        ASSERT_EQ(to_balance, init_to_balance + all_amount);
    }
}

TEST_F(TestMoreNodeTransaction, SomeNodeInvalid1) {
    ResetInvalidNodes(0.1, 0.1);
    std::string from_prikey = common::Encode::HexDecode(
        common::Encode::HexEncode(test_from_key));
    // create 1000 address
    for (int32_t i = 0; i < 10; ++i)
    {
        char data[128];
        snprintf(data, sizeof(data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", i);
        std::string to_prikey = common::Encode::HexDecode(data);
        uint64_t init_balance = GetBalanceByPrikey(from_prikey);
        uint64_t to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(to_balance, common::kInvalidUint64);
        uint64_t all_amount = 0;
        uint64_t amount = 1000000llu * common::kTenonMiniTransportUnit;
        uint64_t all_gas = 0;
        all_amount += amount;
        all_gas += bft::kTransferGas;
        std::map<std::string, std::string> attrs;
        Transaction(
            from_prikey, to_prikey, amount, 1000000,
            common::kConsensusTransaction, true, false, attrs);
        auto from_balance = GetBalanceByPrikey(from_prikey);
        to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(from_balance, init_balance - all_amount - all_gas * common::GlobalInfo::Instance()->gas_price());
        ASSERT_EQ(to_balance, all_amount);
    }

    for (int32_t i = 0; i < 2; ++i) {
        uint32_t rand_from = rand() % 10;
        uint32_t rand_to = rand() % 10;
        if (rand_from == rand_to) {
            continue;
        }

        char from_data[128];
        snprintf(from_data, sizeof(from_data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", rand_from);
        char to_data[128];
        snprintf(to_data, sizeof(to_data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", rand_to);
        std::string from_prikey = common::Encode::HexDecode(from_data);
        std::string to_prikey = common::Encode::HexDecode(to_data);
        uint64_t init_balance = GetBalanceByPrikey(from_prikey);
        uint64_t init_to_balance = GetBalanceByPrikey(to_prikey);
        uint64_t all_amount = 0;
        uint64_t amount = (rand() % 10000) * common::kTenonMiniTransportUnit + 1;
        uint64_t all_gas = 0;
        all_amount += amount;
        all_gas += bft::kTransferGas;
        std::map<std::string, std::string> attrs;
        Transaction(
            from_prikey, to_prikey, amount, 1000000,
            common::kConsensusTransaction, true, false, attrs);
        auto from_balance = GetBalanceByPrikey(from_prikey);
        uint64_t to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(from_balance, init_balance - all_amount - all_gas * common::GlobalInfo::Instance()->gas_price());
        ASSERT_EQ(to_balance, init_to_balance + all_amount);
    }
}

TEST_F(TestMoreNodeTransaction, SomeNodeInvalid2) {
    ResetInvalidNodes(0.3, 0.3);
    std::string from_prikey = common::Encode::HexDecode(
        common::Encode::HexEncode(test_from_key));
    // create 1000 address
    for (int32_t i = 0; i < 10; ++i)
    {
        char data[128];
        snprintf(data, sizeof(data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", i);
        std::string to_prikey = common::Encode::HexDecode(data);
        uint64_t init_balance = GetBalanceByPrikey(from_prikey);
        uint64_t to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(to_balance, common::kInvalidUint64);
        uint64_t all_amount = 0;
        uint64_t amount = 1000000llu * common::kTenonMiniTransportUnit;
        uint64_t all_gas = 0;
        all_amount += amount;
        all_gas += bft::kTransferGas;
        std::map<std::string, std::string> attrs;
        Transaction(
            from_prikey, to_prikey, amount, 1000000,
            common::kConsensusTransaction, true, false, attrs);
        auto from_balance = GetBalanceByPrikey(from_prikey);
        to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(from_balance, init_balance - all_amount - all_gas * common::GlobalInfo::Instance()->gas_price());
        ASSERT_EQ(to_balance, all_amount);
    }

    for (int32_t i = 0; i < 2; ++i) {
        uint32_t rand_from = rand() % 10;
        uint32_t rand_to = rand() % 10;
        if (rand_from == rand_to) {
            continue;
        }

        char from_data[128];
        snprintf(from_data, sizeof(from_data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", rand_from);
        char to_data[128];
        snprintf(to_data, sizeof(to_data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", rand_to);
        std::string from_prikey = common::Encode::HexDecode(from_data);
        std::string to_prikey = common::Encode::HexDecode(to_data);
        uint64_t init_balance = GetBalanceByPrikey(from_prikey);
        uint64_t init_to_balance = GetBalanceByPrikey(to_prikey);
        uint64_t all_amount = 0;
        uint64_t amount = (rand() % 10000) * common::kTenonMiniTransportUnit + 1;
        uint64_t all_gas = 0;
        all_amount += amount;
        all_gas += bft::kTransferGas;
        std::map<std::string, std::string> attrs;
        Transaction(
            from_prikey, to_prikey, amount, 1000000,
            common::kConsensusTransaction, true, false, attrs);
        auto from_balance = GetBalanceByPrikey(from_prikey);
        uint64_t to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(from_balance, init_balance - all_amount - all_gas * common::GlobalInfo::Instance()->gas_price());
        ASSERT_EQ(to_balance, init_to_balance + all_amount);
    }
}

TEST_F(TestMoreNodeTransaction, SomeNodeInvalid3) {
    ResetInvalidNodes(0.33, 0.33);
    std::string from_prikey = common::Encode::HexDecode(
        common::Encode::HexEncode(test_from_key));
    // create 1000 address
    for (int32_t i = 0; i < 10; ++i)
    {
        char data[128];
        snprintf(data, sizeof(data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", i);
        std::string to_prikey = common::Encode::HexDecode(data);
        uint64_t init_balance = GetBalanceByPrikey(from_prikey);
        uint64_t to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(to_balance, common::kInvalidUint64);
        uint64_t all_amount = 0;
        uint64_t amount = 1000000llu * common::kTenonMiniTransportUnit;
        uint64_t all_gas = 0;
        all_amount += amount;
        all_gas += bft::kTransferGas;
        std::map<std::string, std::string> attrs;
        Transaction(
            from_prikey, to_prikey, amount, 1000000,
            common::kConsensusTransaction, true, false, attrs);
        auto from_balance = GetBalanceByPrikey(from_prikey);
        to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(from_balance, init_balance - all_amount - all_gas * common::GlobalInfo::Instance()->gas_price());
        ASSERT_EQ(to_balance, all_amount);
    }

    for (int32_t i = 0; i < 2; ++i) {
        uint32_t rand_from = rand() % 10;
        uint32_t rand_to = rand() % 10;
        if (rand_from == rand_to) {
            continue;
        }

        char from_data[128];
        snprintf(from_data, sizeof(from_data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", rand_from);
        char to_data[128];
        snprintf(to_data, sizeof(to_data), "%03df72f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b4851", rand_to);
        std::string from_prikey = common::Encode::HexDecode(from_data);
        std::string to_prikey = common::Encode::HexDecode(to_data);
        uint64_t init_balance = GetBalanceByPrikey(from_prikey);
        uint64_t init_to_balance = GetBalanceByPrikey(to_prikey);
        uint64_t all_amount = 0;
        uint64_t amount = (rand() % 10000) * common::kTenonMiniTransportUnit + 1;
        uint64_t all_gas = 0;
        all_amount += amount;
        all_gas += bft::kTransferGas;
        std::map<std::string, std::string> attrs;
        Transaction(
            from_prikey, to_prikey, amount, 1000000,
            common::kConsensusTransaction, true, false, attrs);
        auto from_balance = GetBalanceByPrikey(from_prikey);
        uint64_t to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(from_balance, init_balance - all_amount - all_gas * common::GlobalInfo::Instance()->gas_price());
        ASSERT_EQ(to_balance, init_to_balance + all_amount);
    }
}
}  // namespace test

}  // namespace bft

}  // namespace tenon
