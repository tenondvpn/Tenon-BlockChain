#include <gtest/gtest.h>

#include <iostream>
#include <chrono>

#define private public
#include "bft/bft_utils.h"
#include "dht/dht_key.h"
#include "network/network_utils.h"
#include "transport/transport_utils.h"
#include "bft/bft_manager.h"
#include "block/account_manager.h"
#include "security/crypto_utils.h"
#include "election/elect_dht.h"
#include "network/dht_manager.h"
#include "network/universal_manager.h"
#include "bft/tests/test_transport.h"
#include "bft/tx_pool.h"
#include "bft/gid_manager.h"
#include "common/random.h"
#include "contract/contract_utils.h"
#include "security/secp256k1.h"
#include "tvm/execution.h"
#include "tvm/tvm_utils.h"
#include "tvm/tenon_host.h"

namespace tenon {

namespace bft {

namespace test {

static const std::string ballot_str = common::Encode::HexDecode(std::string("6080604052348015620000125760006000fd5b50604051620014a0380380620014a0833981810160405281019062000038919062000299565b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160016000506000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000506000016000508190909055506000600090505b8151811015620001ca576002600050604051806040016040528084848151811015156200014c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000191681526020016000815260200150908060018154018082558091505060019003906000526020600020906002020160005b909190919091506000820151816000016000509060001916905560208201518160010160005090905550505b8080620001c19062000389565b915050620000f6565b505b506200046b566200046a565b6000620001ef620001e9846200030c565b620002e1565b90508083825260208201905082856020860282011115620002105760006000fd5b60005b8581101562000245578162000229888262000281565b8452602084019350602083019250505b60018101905062000213565b5050505b9392505050565b600082601f8301121515620002655760006000fd5b815162000277848260208601620001d8565b9150505b92915050565b60008151905062000292816200044c565b5b92915050565b600060208284031215620002ad5760006000fd5b600082015167ffffffffffffffff811115620002c95760006000fd5b620002d78482850162000250565b9150505b92915050565b6000620002ed62000301565b9050620002fb828262000352565b5b919050565b600060405190505b90565b600067ffffffffffffffff8211156200032a576200032962000409565b5b6020820290506020810190505b919050565b60008190505b919050565b60008190505b919050565b6200035d826200043a565b810181811067ffffffffffffffff821117156200037f576200037e62000409565b5b80604052505b5050565b6000620003968262000347565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620003cc57620003cb620003d8565b5b6001820190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b565b6000601f19601f83011690505b919050565b62000457816200033c565b81141515620004665760006000fd5b5b50565b5b611025806200047b6000396000f3fe60806040523480156100115760006000fd5b506004361061008d5760003560e01c8063609ff1bd1161005c578063609ff1bd1461011a5780639e7b8d6114610138578063a3ec138d14610154578063e2ba53f0146101875761008d565b80630121b93f14610093578063013cf08b146100af5780632e4176cf146100e05780635c19a95c146100fe5761008d565b60006000fd5b6100ad60048036038101906100a89190610afd565b6101a5565b005b6100c960048036038101906100c49190610afd565b610294565b6040516100d7929190610c54565b60405180910390f35b6100e86102d2565b6040516100f59190610c1c565b60405180910390f35b61011860048036038101906101139190610ad2565b6102f8565b005b6101226106f7565b60405161012f9190610d23565b60405180910390f35b610152600480360381019061014d9190610ad2565b6107f1565b005b61016e60048036038101906101699190610ad2565b6109cd565b60405161017e9493929190610d3f565b60405180910390f35b61018f610a33565b60405161019c9190610c38565b60405180910390f35b6000600160005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050905060018160010160006101000a81548160ff02191690831515021790555081816002016000508190909055508060000160005054600260005083815481101515610260577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b50600101600082828250546102869190610d97565b925050819090905550505b50565b600260005081815481106102a757600080fd5b906000526020600020906002020160005b915090508060000160005054908060010160005054905082565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090508060010160009054906101000a900460ff16151515610395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038c90610c7e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fd90610d02565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561058857600160005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915081503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a90610cc0565b60405180910390fd5b610407565b60018160010160006101000a81548160ff021916908315150217905550818160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090508060010160009054906101000a900460ff16156106ca57816000016000505460026000508260020160005054815481101515610696577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b50600101600082828250546106bc9190610d97565b9250508190909055506106f1565b816000016000505481600001600082828250546106e79190610d97565b9250508190909055505b50505b50565b60006000600090506000600090505b6002600050805490508110156107eb5781600260005082815481101515610756577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b506001016000505411156107d7576002600050818154811015156107b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b50600101600050549150815080925082505b5b80806107e390610e45565b915050610706565b50505b90565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087a90610c9f565b60405180910390fd5b600160005060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160009054906101000a900460ff1615151561091b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091290610ce1565b60405180910390fd5b6000600160005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001600050541415156109765760006000fd5b6001600160005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000506000016000508190909055505b50565b60016000506020528060005260406000206000915090508060000160005054908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160005054905084565b60006002600050610a486106f763ffffffff16565b815481101515610a81577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160005b5060000160005054905080505b9056610fee565b600081359050610ab581610fb8565b5b92915050565b600081359050610acb81610fd3565b5b92915050565b600060208284031215610ae55760006000fd5b6000610af384828501610aa6565b9150505b92915050565b600060208284031215610b105760006000fd5b6000610b1e84828501610abc565b9150505b92915050565b610b3181610dee565b82525b5050565b610b4181610e01565b82525b5050565b610b5181610e0e565b82525b5050565b6000610b65601283610d85565b9150610b7082610ec0565b6020820190505b919050565b6000610b89602883610d85565b9150610b9482610eea565b6040820190505b919050565b6000610bad601983610d85565b9150610bb882610f3a565b6020820190505b919050565b6000610bd1601883610d85565b9150610bdc82610f64565b6020820190505b919050565b6000610bf5601e83610d85565b9150610c0082610f8e565b6020820190505b919050565b610c1581610e3a565b82525b5050565b6000602082019050610c316000830184610b28565b5b92915050565b6000602082019050610c4d6000830184610b48565b5b92915050565b6000604082019050610c696000830185610b48565b610c766020830184610c0c565b5b9392505050565b60006020820190508181036000830152610c9781610b58565b90505b919050565b60006020820190508181036000830152610cb881610b7c565b90505b919050565b60006020820190508181036000830152610cd981610ba0565b90505b919050565b60006020820190508181036000830152610cfa81610bc4565b90505b919050565b60006020820190508181036000830152610d1b81610be8565b90505b919050565b6000602082019050610d386000830184610c0c565b5b92915050565b6000608082019050610d546000830187610c0c565b610d616020830186610b38565b610d6e6040830185610b28565b610d7b6060830184610c0c565b5b95945050505050565b60008282526020820190505b92915050565b6000610da282610e3a565b9150610dad83610e3a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610de257610de1610e8f565b5b82820190505b92915050565b6000610df982610e19565b90505b919050565b600081151590505b919050565b60008190505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b6000610e5082610e3a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e8357610e82610e8f565b5b6001820190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b7f596f7520616c726561647920766f7465642e000000000000000000000000000060008201525b50565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e00000000000000000000000000000000000000000000000060208201525b50565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e0000000000000060008201525b50565b7f54686520766f74657220616c726561647920766f7465642e000000000000000060008201525b50565b7f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e000060008201525b50565b610fc181610dee565b81141515610fcf5760006000fd5b5b50565b610fdc81610e3a565b81141515610fea5760006000fd5b5b50565bfea26469706673582212208a11da71baf451a53adabf2049084a2e24ceea212a4f9eae8a39afacdcc7453d64736f6c63430008030033") + "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8704348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8701348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8702");
static const std::string receive_pays = common::Encode::HexDecode("608060405233600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b61004c565b6106758061005b6000396000f3fe60806040523480156100115760006000fd5b50600436106100465760003560e01c806341c0e1b51461004c578063a90ae88714610056578063cfb519281461007257610046565b60006000fd5b6100546100a2565b005b610070600480360381019061006b9190610402565b61011a565b005b61008c600480360381019061008791906103be565b61029c565b604051610099919061048d565b60405180910390f35b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156100ff5760006000fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b565b6000601b905060007f3d584400dc77e383a2a2860d15fd181b1c36117d7b6c1e5d54e2f21d9491b66e60001b905060007f043a539fab3f2e42ba806da59b30e100077a7dba7439de3fce427eaa75dce5c460001b905060007ff559642966b18c5e58a82106d7cbb6dfaa449e1820dda477580b08bab68b93d560001b90506000600182868686604051600081526020016040526040516101bd94939291906104a9565b6020604051602081039080840390855afa1580156101e0573d600060003e3d6000fd5b505050602060405103519050600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156102495760006000fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc899081150290604051600060405180830381858888f19350505050158015610290573d600060003e3d6000fd5b5050505050505b505050565b600060008290506000815114156102ba57600060001b9150506102c3565b60208301519150505b9190505661063e565b60006102df6102da84610516565b6104ef565b9050828152602081018484840111156102f85760006000fd5b61030384828561059e565b505b9392505050565b600061031f61031a84610548565b6104ef565b9050828152602081018484840111156103385760006000fd5b61034384828561059e565b505b9392505050565b600082601f83011215156103605760006000fd5b81356103708482602086016102cc565b9150505b92915050565b600082601f830112151561038e5760006000fd5b813561039e84826020860161030c565b9150505b92915050565b6000813590506103b781610623565b5b92915050565b6000602082840312156103d15760006000fd5b600082013567ffffffffffffffff8111156103ec5760006000fd5b6103f88482850161037a565b9150505b92915050565b600060006000606084860312156104195760006000fd5b6000610427868287016103a8565b9350506020610438868287016103a8565b925050604084013567ffffffffffffffff8111156104565760006000fd5b6104628682870161034c565b9150505b9250925092565b6104768161057a565b82525b5050565b61048681610590565b82525b5050565b60006020820190506104a2600083018461046d565b5b92915050565b60006080820190506104be600083018761046d565b6104cb602083018661047d565b6104d8604083018561046d565b6104e5606083018461046d565b5b95945050505050565b60006104f961050b565b905061050582826105ae565b5b919050565b600060405190505b90565b600067ffffffffffffffff821115610531576105306105e0565b5b61053a82610611565b90506020810190505b919050565b600067ffffffffffffffff821115610563576105626105e0565b5b61056c82610611565b90506020810190505b919050565b60008190505b919050565b60008190505b919050565b600060ff821690505b919050565b828183376000838301525b505050565b6105b782610611565b810181811067ffffffffffffffff821117156105d6576105d56105e0565b5b80604052505b5050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b565b6000601f19601f83011690505b919050565b61062c81610585565b8114151561063a5760006000fd5b5b50565bfea264697066735822122068a2424ed233250a9825d9175d5ea434ac0c8db54df6e1420ee049b78e5df03864736f6c63430008030033");
static const std::string simple_auction = common::Encode::HexDecode(std::string("6080604052348015620000125760006000fd5b5060405162000ba538038062000ba58339818101604052810190620000389190620000de565b5b80600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550814262000088919062000122565b6001600050819090905550600060036000508190909055505b50506200022f566200022e565b600081519050620000bf81620001f2565b5b92915050565b600081519050620000d78162000210565b5b92915050565b6000600060408385031215620000f45760006000fd5b60006200010485828601620000c6565b92505060206200011785828601620000ae565b9150505b9250929050565b60006200012f82620001b6565b91506200013c83620001b6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620001745762000173620001c1565b5b82820190505b92915050565b60006200018d8262000195565b90505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b620001fd8162000180565b811415156200020c5760006000fd5b5b50565b6200021b81620001b6565b811415156200022a5760006000fd5b5b50565b5b610966806200023f6000396000f3fe6080604052600436106100745760003560e01c806338af3eed1161004e57806338af3eed146100c85780633ccfd60b146100f457806391f9015714610120578063d57bde791461014c57610074565b80631998aeef1461007a57806328e5f1c6146100845780632a24f46c146100b057610074565b60006000fd5b610082610178565b005b3480156100915760006000fd5b5061009a610328565b6040516100a79190610776565b60405180910390f35b3480156100bd5760006000fd5b506100c6610331565b005b3480156100d55760006000fd5b506100de61044e565b6040516100eb91906106b1565b60405180910390f35b3480156101015760006000fd5b5061010a610474565b60405161011791906106f7565b60405180910390f35b34801561012d5760006000fd5b506101366105b6565b6040516101439190610695565b60405180910390f35b3480156101595760006000fd5b506101626105dc565b60405161016f9190610776565b60405180910390f35b60016000505442111515156101c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b990610713565b60405180910390fd5b6003600050543411151561020b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020290610734565b60405180910390fd5b600060036000505414151561029f5760036000505460046000506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828282505461029591906107a4565b9250508190909055505b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503460036000508190909055507ff4757a49b326036464bec6fe419a4ae38c8a02ce3e68bf0809674f6aab8ad300333460405161031d9291906106cd565b60405180910390a15b565b60016000505481565b600560009054906101000a900460ff16151515610383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037a90610755565b60405180910390fd5b6001600560006101000a81548160ff0219169083151502179055507fdaec4582d5d9595688c8c98545fdd1c696d41c6aeaeb636737e84ed2f5c00eda600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003600050546040516103f69291906106cd565b60405180910390a13373ffffffffffffffffffffffffffffffffffffffff166108fc6003600050549081150290604051600060405180830381858888f1935050505015801561044a573d600060003e3d6000fd5b505b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006000600460005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054905060008111156105a8576000600460005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156105a75780600460005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005081909090555060009150506105b3565b5b60019150506105b356505b90565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360005054815661092f565b6105f28161080e565b82525b5050565b610602816107fb565b82525b5050565b61061281610821565b82525b5050565b6000610626601683610792565b91506106318261088b565b6020820190505b919050565b600061064a601e83610792565b9150610655826108b5565b6020820190505b919050565b600061066e602383610792565b9150610679826108df565b6040820190505b919050565b61068e8161084f565b82525b5050565b60006020820190506106aa60008301846105f9565b5b92915050565b60006020820190506106c660008301846105e9565b5b92915050565b60006040820190506106e260008301856105f9565b6106ef6020830184610685565b5b9392505050565b600060208201905061070c6000830184610609565b5b92915050565b6000602082019050818103600083015261072c81610619565b90505b919050565b6000602082019050818103600083015261074d8161063d565b90505b919050565b6000602082019050818103600083015261076e81610661565b90505b919050565b600060208201905061078b6000830184610685565b5b92915050565b60008282526020820190505b92915050565b60006107af8261084f565b91506107ba8361084f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156107ef576107ee61085a565b5b82820190505b92915050565b60006108068261082e565b90505b919050565b60006108198261082e565b90505b919050565b600081151590505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b7f41756374696f6e20616c726561647920656e6465642e0000000000000000000060008201525b50565b7f546865726520616c7265616479206973206120686967686572206269642e000060008201525b50565b7f61756374696f6e456e642068617320616c7265616479206265656e2063616c6c60008201527f65642e000000000000000000000000000000000000000000000000000000000060208201525b50565bfea2646970667358221220a202535e759ea5c6a7b981eebd4ed6e611017c9693600864c40c03f56e1846da64736f6c63430008030033") + "00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000d31f18f44c3b6c3d4f9e23ea7317805488cee731");
static const std::string blind_auction = common::Encode::HexDecode(std::string("") + "00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000007d0000000000000000000000000d31f18f44c3b6c3d4f9e23ea7317805488cee731");
static const std::string purchase = common::Encode::HexDecode(std::string("60806040525b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060023462000055919062000175565b60006000508190909055506000600260146101000a81548160ff02191690836003811115620000ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550346000600050546002620000c79190620001b0565b1415156200010c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001039062000140565b60405180910390fd5b5b620002aa56620002a9565b60006200012760158362000163565b915062000134826200027f565b6020820190505b919050565b600060208201905081810360008301526200015b8162000118565b90505b919050565b60008282526020820190505b92915050565b6000620001828262000212565b91506200018f8362000212565b9250821515620001a457620001a36200024e565b5b82820490505b92915050565b6000620001bd8262000212565b9150620001ca8362000212565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200020657620002056200021d565b5b82820290505b92915050565b60008190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b565b7f56616c75652068617320746f206265206576656e2e000000000000000000000060008201525b50565b5b610dd480620002ba6000396000f3fe60806040526004361061007f5760003560e01c806373fac6f01161004e57806373fac6f014610121578063c19d93fb14610139578063c7981b1b14610165578063d69606971461017d5761007f565b806308551a531461008557806335a063b4146100b15780633fa4f245146100c95780637150d8ae146100f55761007f565b60006000fd5b3480156100925760006000fd5b5061009b610187565b6040516100a89190610b1c565b60405180910390f35b3480156100be5760006000fd5b506100c76101ad565b005b3480156100d65760006000fd5b506100df6103f1565b6040516100ec9190610bb7565b60405180910390f35b3480156101025760006000fd5b5061010b6103fa565b6040516101189190610b1c565b60405180910390f35b34801561012e5760006000fd5b50610137610420565b005b3480156101465760006000fd5b5061014f610669565b60405161015c9190610b38565b60405180910390f35b3480156101725760006000fd5b5061017b61067c565b005b6101856108d1565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561023f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023690610b96565b60405180910390fd5b600080600381111561027a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600260149054906101000a900460ff1660038111156102c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141515610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fb90610b75565b60405180910390fd5b7f72c874aeff0b183a56e2b79c71b46e1aed4dee5e09862134b8821ba2fddbf8bf60405160405180910390a16003600260146101000a81548160ff0219169083600381111561037c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156103ea573d600060003e3d6000fd5b505b5b505b565b60006000505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a990610b54565b60405180910390fd5b60018060038111156104ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600260149054906101000a900460ff166003811115610535577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141515610577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056e90610b75565b60405180910390fd5b7fe89152acd703c9d8c7d28829d443260b411454d45394e7995815140c8cbcbcf760405160405180910390a16002600260146101000a81548160ff021916908360038111156105ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6000600050549081150290604051600060405180830381858888f19350505050158015610662573d600060003e3d6000fd5b505b5b505b565b600260149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561070e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070590610b96565b60405180910390fd5b6002806003811115610749577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600260149054906101000a900460ff166003811115610791577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415156107d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ca90610b75565b60405180910390fd5b7ffda69c32bcfdba840a167777906b173b607eb8b4d8853b97a80d26e613d858db60405160405180910390a16003600260146101000a81548160ff0219169083600381111561084b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600060005054600361089e9190610be5565b9081150290604051600060405180830381858888f193505050501580156108ca573d600060003e3d6000fd5b505b5b505b565b600080600381111561090c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600260149054906101000a900460ff166003811115610954577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141515610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098d90610b75565b60405180910390fd5b60006000505460026109a89190610be5565b34148015156109b75760006000fd5b7fd5d55c8a68912e9a110618df8d5e2e83b8d83211c57a8ddd1203df92885dc88160405160405180910390a133600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260146101000a81548160ff02191690836003811115610a70577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055505b5b505b5056610d9d565b610a8981610c40565b82525b5050565b610a9981610c93565b82525b5050565b6000610aad601983610bd3565b9150610ab882610d08565b6020820190505b919050565b6000610ad1600e83610bd3565b9150610adc82610d32565b6020820190505b919050565b6000610af5601a83610bd3565b9150610b0082610d5c565b6020820190505b919050565b610b1581610c88565b82525b5050565b6000602082019050610b316000830184610a80565b5b92915050565b6000602082019050610b4d6000830184610a90565b5b92915050565b60006020820190508181036000830152610b6d81610aa0565b90505b919050565b60006020820190508181036000830152610b8e81610ac4565b90505b919050565b60006020820190508181036000830152610baf81610ae8565b90505b919050565b6000602082019050610bcc6000830184610b0c565b5b92915050565b60008282526020820190505b92915050565b6000610bf082610c88565b9150610bfb83610c88565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c3457610c33610ca6565b5b82820290505b92915050565b6000610c4b82610c67565b90505b919050565b6000819050610c6182610d86565b5b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b6000610c9e82610c53565b90505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b565b7f4f6e6c792062757965722063616e2063616c6c20746869732e0000000000000060008201525b50565b7f496e76616c69642073746174652e00000000000000000000000000000000000060008201525b50565b7f4f6e6c792073656c6c65722063616e2063616c6c20746869732e00000000000060008201525b50565b600481101515610d9957610d98610cd7565b5b5b50565bfea2646970667358221220b13eff70db366e24f0315808bc17b82bfe6d373ac5d663e804e88420e1e2af3764736f6c63430008030033") + "");
static const std::string simple_payment_channel = common::Encode::HexDecode(std::string("608060405260405162000cc638038062000cc6833981810160405281019062000029919062000144565b5b30600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508042620000fb919062000188565b60026000508190909055505b5050620002955662000294565b600081519050620001258162000258565b5b92915050565b6000815190506200013d8162000276565b5b92915050565b60006000604083850312156200015a5760006000fd5b60006200016a8582860162000114565b92505060206200017d858286016200012c565b9150505b9250929050565b600062000195826200021c565b9150620001a2836200021c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620001da57620001d962000227565b5b82820190505b92915050565b6000620001f382620001fb565b90505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b6200026381620001e6565b81141515620002725760006000fd5b5b50565b62000281816200021c565b81141515620002905760006000fd5b5b50565b5b610a2180620002a56000396000f3fe60806040523480156100115760006000fd5b50600436106100825760003560e01c806366d003ac1161005c57806366d003ac146100cc57806367e404ce146100ea5780639714378c14610108578063d4dca69b1461012457610082565b80630e1da6c314610088578063415ffba7146100925780634665096d146100ae57610082565b60006000fd5b610090610142565b005b6100ac60048036038101906100a79190610640565b610194565b005b6100b66102c2565b6040516100c39190610803565b60405180910390f35b6100d46102cb565b6040516100e19190610777565b60405180910390f35b6100f26102f1565b6040516100ff9190610777565b60405180910390f35b610122600480360381019061011d9190610615565b610317565b005b61012c610398565b604051610139919061075b565b60405180910390f35b60026000505442101515156101575760006000fd5b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101f15760006000fd5b81600260005081909090555061020d82826103be63ffffffff16565b15156102195760006000fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610282573d600060003e3d6000fd5b50600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5050565b60026000505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103745760006000fd5b600260005054811115156103885760006000fd5b8060026000508190909055505b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060007fdce7816498efeb01170e62af6c6b04b5aaf83832e6331f4cfdd8db2edc473bbb60001b9050600061042130866040516020016104009291906107d9565b6040516020818303038152906040528051906020012061049463ffffffff16565b9050600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661046c82866104c963ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16149250505061048e5650505b92915050565b6000816040516020016104a79190610734565b6040516020818303038152906040528051906020012090506104c4565b919050565b60006000600060006104e08561054963ffffffff16565b925092509250600186848484604051600081526020016040526040516105099493929190610793565b6020604051602081039080840390855afa15801561052c573d600060003e3d6000fd5b505050602060405103519350505050610543565050505b92915050565b600060006000604184511415156105605760006000fd5b6020840151915060408401519050606084015160001a9250828282925092509250610586565b9193909250566109ea565b60006105a461059f84610846565b61081f565b9050828152602081018484840111156105bd5760006000fd5b6105c8848285610915565b505b9392505050565b600082601f83011215156105e55760006000fd5b81356105f5848260208601610591565b9150505b92915050565b60008135905061060e816109cf565b5b92915050565b6000602082840312156106285760006000fd5b6000610636848285016105ff565b9150505b92915050565b60006000604083850312156106555760006000fd5b6000610663858286016105ff565b925050602083013567ffffffffffffffff8111156106815760006000fd5b61068d858286016105d1565b9150505b9250929050565b6106a181610897565b82525b5050565b6106b181610884565b82525b5050565b6106c1816108aa565b82525b5050565b6106d96106d4826108aa565b610957565b82525b5050565b6106e9816108ef565b82525b5050565b60006106fd601c83610878565b9150610708826109a5565b601c820190505b919050565b61071d816108d6565b82525b5050565b61072d816108e1565b82525b5050565b600061073f826106f0565b915061074b82846106c8565b6020820191508190505b92915050565b600060208201905061077060008301846106a8565b5b92915050565b600060208201905061078c6000830184610698565b5b92915050565b60006080820190506107a860008301876106b8565b6107b56020830186610724565b6107c260408301856106b8565b6107cf60608301846106b8565b5b95945050505050565b60006040820190506107ee60008301856106e0565b6107fb6020830184610714565b5b9392505050565b60006020820190506108186000830184610714565b5b92915050565b600061082961083b565b90506108358282610925565b5b919050565b600060405190505b90565b600067ffffffffffffffff82111561086157610860610962565b5b61086a82610993565b90506020810190505b919050565b60008190505b92915050565b600061088f826108b5565b90505b919050565b60006108a2826108b5565b90505b919050565b60008190505b919050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60008190505b919050565b600060ff821690505b919050565b60006108fa82610902565b90505b919050565b600061090d826108b5565b90505b919050565b828183376000838301525b505050565b61092e82610993565b810181811067ffffffffffffffff8211171561094d5761094c610962565b5b80604052505b5050565b60008190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b565b6000601f19601f83011690505b919050565b7f19457468657265756d205369676e6564204d6573736167653a0a33320000000060008201525b50565b6109d8816108d6565b811415156109e65760006000fd5b5b50565bfea2646970667358221220fc03ff6709710340badcd8689b1c985de83ff2c3a15931de9a062182a0e5c3c364736f6c63430008030033") + "000000000000000000000000dc09e1166271813aac21ff255960dcf39ccc000b0000000000000000000000000000000000000000000000000000000000000064");

class TestBftManagerForFailCase : public testing::Test {
public:
    static void WriteDefaultLogConf(
        const std::string& log_conf_path,
        const std::string& log_path) {
        FILE* file = NULL;
        file = fopen(log_conf_path.c_str(), "w");
        if (file == NULL) {
            return;
        }
        std::string log_str = ("# log4cpp.properties\n"
            "log4cpp.rootCategory = WARN\n"
            "log4cpp.category.sub1 = WARN, programLog\n"
            "log4cpp.appender.rootAppender = ConsoleAppender\n"
            "log4cpp.appender.rootAppender.layout = PatternLayout\n"
            "log4cpp.appender.rootAppender.layout.ConversionPattern = %d [%p] %m%n\n"
            "log4cpp.appender.programLog = RollingFileAppender\n"
            "log4cpp.appender.programLog.fileName = ") + log_path + "\n" +
            std::string("log4cpp.appender.programLog.maxFileSize = 1073741824\n"
                "log4cpp.appender.programLog.maxBackupIndex = 1\n"
                "log4cpp.appender.programLog.layout = PatternLayout\n"
                "log4cpp.appender.programLog.layout.ConversionPattern = %d [%p] %m%n\n");
        fwrite(log_str.c_str(), log_str.size(), 1, file);
        fclose(file);
    }

    static void SetUpTestCase() {
        system("rm -rf ./core.* ./test_db");
        common::global_stop = true;
        db::Db::Instance()->Init("./test_db");
        std::string config_path_ = "./";
        std::string conf_path = config_path_ + "/tenon.conf";
        std::string log_conf_path = config_path_ + "/log4cpp.properties";
        std::string log_path = config_path_ + "/tenon.log";
        WriteDefaultLogConf(log_conf_path, log_path);
        log4cpp::PropertyConfigurator::configure(log_conf_path);

//         while (pool_index_map_.size() < common::kImmutablePoolSize) {
//             security::PrivateKey prikey;
//             security::PublicKey pubkey(prikey);
//             std::string pubkey_str;
//             ASSERT_EQ(pubkey.Serialize(pubkey_str, false), security::kPublicKeyUncompressSize);
//             std::string address = security::Secp256k1::Instance()->ToAddressWithPublicKey(pubkey_str);
//             auto pool_index = common::GetPoolIndex(address);
//             auto iter = pool_index_map_.find(pool_index);
//             if (iter != pool_index_map_.end()) {
//                 continue;
//             }
// 
//             std::string prikey_str;
//             ASSERT_EQ(prikey.Serialize(prikey_str), security::kPrivateKeySize);
//             pool_index_map_.insert(std::make_pair(pool_index, prikey_str));
//         }
// 
//         for (auto iter = pool_index_map_.begin(); iter != pool_index_map_.end(); ++iter) {
//             std::cout << "pool_index_map_.insert(std::make_pair(" << iter->first << ", common::Encode::HexDecode(\"" << common::Encode::HexEncode(iter->second) << "\")));" << std::endl;
//         }

        pool_index_map_.insert(std::make_pair(0, common::Encode::HexDecode("b6aaadbe30d002d7c532b95901949540f9213e740467461d540d9f3cc3efb4b6")));
        pool_index_map_.insert(std::make_pair(1, common::Encode::HexDecode("294ad6b66799796d822107b4dcb7a6a9c0c2fd743fddf93512ac921a0731d2de")));
        pool_index_map_.insert(std::make_pair(2, common::Encode::HexDecode("a834ef78741f8bc3f6263612c31c50a05ccdaf7add038849e709aee76c0e1151")));
        pool_index_map_.insert(std::make_pair(3, common::Encode::HexDecode("323b875d52948910330d81de19fc3d894232a333368819c2c12b6433151067ca")));
        pool_index_map_.insert(std::make_pair(4, common::Encode::HexDecode("0fedd74ffc1e65816f006eeeefa0497cb766eb9c1d238264cfd006f34152245d")));
        pool_index_map_.insert(std::make_pair(5, common::Encode::HexDecode("e5cd559f521e9d8fc6f07253b866ac79ca13c6ac02d50aff44509312e41a6f47")));
        pool_index_map_.insert(std::make_pair(6, common::Encode::HexDecode("d0a056e99a11564f75a6af4bb5cd06c1b373efdf6e64f04c42e64f94db2f80e4")));
        pool_index_map_.insert(std::make_pair(7, common::Encode::HexDecode("cbf17ab377d51731003f9ed093e02125e6c4ac78b5cc2d7f2bb0ca9deebdf6cd")));
        pool_index_map_.insert(std::make_pair(8, common::Encode::HexDecode("010cfd6f7f88f6be077b62c10c3f8f79277843a9e289eb5fc3fc65c8755f8f51")));
        pool_index_map_.insert(std::make_pair(9, common::Encode::HexDecode("f5ba6ea0edfb33f9f1e44e434872fbf9e6f403c88d5d37ddf57235d573fd4c7a")));
        pool_index_map_.insert(std::make_pair(10, common::Encode::HexDecode("c627c5ac57e89516c677f6731c15b345087db9ff552a20fb40cffc44234aa8ce")));
        pool_index_map_.insert(std::make_pair(11, common::Encode::HexDecode("81db11fd404ae99c333a50c3140a29e4fc267e0519276cf63b89efe7ba7a1e40")));
        pool_index_map_.insert(std::make_pair(12, common::Encode::HexDecode("5640c58362fc5858474bb9f686d70cd685e3c2fb26f033dca2c7fc4b64679500")));
        pool_index_map_.insert(std::make_pair(13, common::Encode::HexDecode("8379d77981871f5439b98f811ae9c22670ae2e7d872b11ed20a576019be4a270")));
        pool_index_map_.insert(std::make_pair(14, common::Encode::HexDecode("f55797602d3b5955f3f9d99ffb1b8ed39c7a345472127b6db4dc8ef0b8893928")));
        pool_index_map_.insert(std::make_pair(15, common::Encode::HexDecode("ee303c6dfb067fc8dd0c19e4aeaf7901cb1393e123bfca57cfd43e9f30462873")));
        pool_index_map_.insert(std::make_pair(16, common::Encode::HexDecode("dd672dd8d64c56e22ad2696708a56d36c20cfdce546a0e8291fd7b721ca83dfe")));
        pool_index_map_.insert(std::make_pair(17, common::Encode::HexDecode("db759a1db3cb82d9a8668c569516a2e725265d93449bdfffcaefa4b25b5e726f")));
        pool_index_map_.insert(std::make_pair(18, common::Encode::HexDecode("08d717b745a8593f69beccbbc1ac05584bde045c4c5f57c14ee3140161f9543d")));
        pool_index_map_.insert(std::make_pair(19, common::Encode::HexDecode("713acc06c1a292f8902975f0538f4b7f50388b303154d6a95ead7d91386e5c68")));
        pool_index_map_.insert(std::make_pair(20, common::Encode::HexDecode("0a25fcd049cf67b52e6a44bad7b98b3f02a6ccc572190649691e141b6bc37aff")));
        pool_index_map_.insert(std::make_pair(21, common::Encode::HexDecode("a0b22507aff97e5e47a051436b3acf749f2cd052e7d4d2017281e2a1f873a653")));
        pool_index_map_.insert(std::make_pair(22, common::Encode::HexDecode("520005390b419a60a53fb62405644507f0d6c3e2862dd8acd5662c8d42088585")));
        pool_index_map_.insert(std::make_pair(23, common::Encode::HexDecode("e2690365aa06865f11e4a18e37b04c7839175276dc11e86b7da0a478387c2842")));
        pool_index_map_.insert(std::make_pair(24, common::Encode::HexDecode("eb592e3fb7838de0a33effa3462dab0d52376c911bedaa68d513548d5c367bad")));
        pool_index_map_.insert(std::make_pair(25, common::Encode::HexDecode("c61d917451c041c6d45c62f2306734bd8259aa4d33fb16c6b4d39db6cec02ab6")));
        pool_index_map_.insert(std::make_pair(26, common::Encode::HexDecode("6da5f6787dbb88eb83b08d52e9514f9688c09af89bb5aab9f1a8b49e70382954")));
        pool_index_map_.insert(std::make_pair(27, common::Encode::HexDecode("b5a93a83f93113b677a18713015dd349a6efec561ae2f101ea8a538de1323765")));
        pool_index_map_.insert(std::make_pair(28, common::Encode::HexDecode("b998de215ae5f7c23fcd7b8e55974a466c6b5e29019d45a95a5035c2512f7fff")));
        pool_index_map_.insert(std::make_pair(29, common::Encode::HexDecode("d4dab7c1c2acd53e03a9601a2ff65a17d7038da41ae836d4e27b8c5981cedf0a")));
        pool_index_map_.insert(std::make_pair(30, common::Encode::HexDecode("0392fefaaf0a5ae974f411c73d1e4d2d065080c77b267baf89142de958745f08")));
        pool_index_map_.insert(std::make_pair(31, common::Encode::HexDecode("ff605ad605d73204a97492be36a9e7ccd1c9532f330b906feb16f55b3cdbd261")));
        pool_index_map_.insert(std::make_pair(32, common::Encode::HexDecode("a7eae03fb5903ed80c1376ff173bcc884d607c7fe780dd726a3993f1015f1028")));
        pool_index_map_.insert(std::make_pair(33, common::Encode::HexDecode("76482bf9e7d69d1e4f460731c79993a8bee579c51a225127fb5044f2c923ca5f")));
        pool_index_map_.insert(std::make_pair(34, common::Encode::HexDecode("2743547f69cfca2692ba7b0e0e3396a96b3330235e544e27abf96b57344daaf1")));
        pool_index_map_.insert(std::make_pair(35, common::Encode::HexDecode("a70604f5432da3deaf1c89439f0671c684a03a168ee96bdf11b93eb47343752b")));
        pool_index_map_.insert(std::make_pair(36, common::Encode::HexDecode("6984a610cc6b55817b373f4602c56db07bfc243afa36d7424685348c4fbcdc45")));
        pool_index_map_.insert(std::make_pair(37, common::Encode::HexDecode("68a4580ad70fbc56c6d0f1b410f1c2ba8b2826306a57d3bcd3e6763e0ba29e76")));
        pool_index_map_.insert(std::make_pair(38, common::Encode::HexDecode("90dc94f6820d17c6c1027451bd141912dd3a4d41f683b99f8676b2f62925aeb7")));
        pool_index_map_.insert(std::make_pair(39, common::Encode::HexDecode("93ade5f5b072cb712cfee8cba8917bc3067f5bfd74e8b781f2f5171eb9c6fca9")));
        pool_index_map_.insert(std::make_pair(40, common::Encode::HexDecode("8e4171b50da6d0b8ede12d9506499748579524767ed8e96960ddcb22e87b3a96")));
        pool_index_map_.insert(std::make_pair(41, common::Encode::HexDecode("3fe4f6b512b84469b15f91cc68f817e8924f3d698361124f2915bf992524cbcb")));
        pool_index_map_.insert(std::make_pair(42, common::Encode::HexDecode("9c0c35a98b8d5ff63000ee875fbf91d0828ccb95bd9a5fd2e8c929f1900289b2")));
        pool_index_map_.insert(std::make_pair(43, common::Encode::HexDecode("f87c3e4b3ea584b1f944b82dd4a6904b54cb46fcd3f8cd7baa0c14843f7ea7bf")));
        pool_index_map_.insert(std::make_pair(44, common::Encode::HexDecode("ddac94b039a6ae659ad8e51ad43e4b720d1238f5cd01cae4d2639e2177744725")));
        pool_index_map_.insert(std::make_pair(45, common::Encode::HexDecode("e5cb18fe22135f6f8d96c3271f6570cc59462292a25c3b792418377a37edc115")));
        pool_index_map_.insert(std::make_pair(46, common::Encode::HexDecode("2bbe593aa80c7dfe587530446e7abc03b1bf12dfb2606ea74b47fb529cab92e5")));
        pool_index_map_.insert(std::make_pair(47, common::Encode::HexDecode("6dc3f90ab471e37382b712aa1ff445d043ce801f6161b7b0e362616e05febd07")));
        pool_index_map_.insert(std::make_pair(48, common::Encode::HexDecode("5df6d4ef4b4308f7bdd8c99444714ec52217c2a568a64716e6e109e612b8c598")));
        pool_index_map_.insert(std::make_pair(49, common::Encode::HexDecode("a5056891b513f2df869d00b90019dfdd74a51b10dd15afdc2c879c2351bead65")));
        pool_index_map_.insert(std::make_pair(50, common::Encode::HexDecode("225abeb86f7dbc2dc02bdfc826513f6277510c856b8ca5b21535655ffccfc5e5")));
        pool_index_map_.insert(std::make_pair(51, common::Encode::HexDecode("f1d181e02753f0a8da022095d4d74473227e939f6b50ce600b40801f0d5766b4")));
        pool_index_map_.insert(std::make_pair(52, common::Encode::HexDecode("6e0c1236c2dbdccc6d26d4399c7fca88f9265165e1bbd5568e168eaa26760caa")));
        pool_index_map_.insert(std::make_pair(53, common::Encode::HexDecode("b818aeefa8253549f42e7105dd946faba81ccf60c1ace50734825e925f6f348c")));
        pool_index_map_.insert(std::make_pair(54, common::Encode::HexDecode("a0931639f512a991c46055808752b65b51fa003673503356e10046ac8e57e328")));
        pool_index_map_.insert(std::make_pair(55, common::Encode::HexDecode("f484c02dabc8a0ec3d0e1b75cb1f7cd0e81d17ac29712a5a18b6a689fd1afb93")));
        pool_index_map_.insert(std::make_pair(56, common::Encode::HexDecode("624c5422ec2776f892d56718258c50f29b577135b259c727b29bfb6dafcea7e5")));
        pool_index_map_.insert(std::make_pair(57, common::Encode::HexDecode("4a8184505b56d11effb9cc4a8edce9abef35ce0482a5e2ba43dcf79d57a9f4a0")));
        pool_index_map_.insert(std::make_pair(58, common::Encode::HexDecode("cf3555535837b78d8a944b90a415b8d8492aba1289ec962fb4b3a22e78e2e135")));
        pool_index_map_.insert(std::make_pair(59, common::Encode::HexDecode("c92503f9647df7340500b323233036c30d96b6f01747cdf4eb996f5d7358c518")));
        pool_index_map_.insert(std::make_pair(60, common::Encode::HexDecode("a86857de21eb88f0e3b8a164ddf8b6cc570c509efff21143d3ee282a920c769d")));
        pool_index_map_.insert(std::make_pair(61, common::Encode::HexDecode("78dcd96f41e69dbc7bfdd98c95c951686908ad70896c34fe66543669b4b1d80f")));
        pool_index_map_.insert(std::make_pair(62, common::Encode::HexDecode("267bc076e3860457da661168ca4758141f048af1bcc449a91fd6dea8673e30db")));
        pool_index_map_.insert(std::make_pair(63, common::Encode::HexDecode("9c59e2c30ad1a10336e2e55f4186a8856f7107f84df3f8f89a13dda311da9568")));

        InitEnv();
    }

    static void AddGenisisBlock(uint32_t type) {
        uint64_t genesis_account_balance = 21000000000llu * common::kTenonMiniTransportUnit / pool_index_map_.size();
        uint64_t all_balance = 0llu;
        for (auto iter = pool_index_map_.begin(); iter != pool_index_map_.end(); ++iter) {
            bft::protobuf::Block tenon_block;
            auto tx_list = tenon_block.mutable_tx_list();
            security::PrivateKey prikey(iter->second);
            security::PublicKey pubkey(prikey);
            std::string pubkey_str;
            ASSERT_EQ(pubkey.Serialize(pubkey_str, false), security::kPublicKeyUncompressSize);
            std::string address = security::Secp256k1::Instance()->ToAddressWithPublicKey(pubkey_str);
            auto tx_info = tx_list->Add();
            tx_info->set_version(common::kTransactionVersion);
            tx_info->set_gid(common::CreateGID(""));
            tx_info->set_from(address);
            tx_info->set_from_pubkey(pubkey_str);
            tx_info->set_from_sign("");
            tx_info->set_to("");
            tx_info->set_amount(genesis_account_balance);
            tx_info->set_balance(genesis_account_balance);
            tx_info->set_gas_limit(0);
            tx_info->set_type(type);
            tx_info->set_network_id(network::kConsensusShardBeginNetworkId);
            tenon_block.set_prehash("");
            tenon_block.set_version(common::kTransactionVersion);
            tenon_block.set_elect_ver(0);
            tenon_block.set_agg_pubkey("");
            tenon_block.set_agg_sign_challenge("");
            tenon_block.set_agg_sign_response("");
            tenon_block.set_pool_index(iter->first);
            tenon_block.set_height(0);
            tenon_block.set_network_id(common::GlobalInfo::Instance()->network_id());
            tenon_block.set_hash(GetBlockHash(tenon_block));
            ASSERT_EQ(BftManager::Instance()->AddGenisisBlock(tenon_block), kBftSuccess);
            std::string pool_hash;
            uint64_t pool_height = 0;
            uint64_t tm;
            uint32_t last_pool_idx = common::kImmutablePoolSize;
            int res = block::AccountManager::Instance()->GetBlockInfo(
                iter->first,
                &pool_height,
                &pool_hash,
                &tm,
                &last_pool_idx);
            ASSERT_EQ(res, block::kBlockSuccess);
            ASSERT_EQ(pool_height, 0);
            ASSERT_EQ(pool_hash, GetBlockHash(tenon_block));
            auto account_ptr = block::AccountManager::Instance()->GetAcountInfo(address);
            ASSERT_FALSE(account_ptr == nullptr);
            uint64_t balance = 0;
            ASSERT_EQ(account_ptr->GetBalance(&balance), block::kBlockSuccess);
            ASSERT_EQ(balance, genesis_account_balance);
            all_balance += balance;
        }

        ASSERT_EQ(all_balance, 21000000000llu * common::kTenonMiniTransportUnit);
    }

    void CreateNewTransaction(
            const std::string& from_prikey,
            const std::string& to_prikey,
            uint64_t amount,
            uint64_t gas_limit,
            uint32_t tx_type,
            bool just_to_id,
            std::map<std::string, std::string>& attrs,
            transport::protobuf::Header& msg) {
        msg.set_src_dht_key("");
        uint32_t des_net_id = common::GlobalInfo::Instance()->network_id();
        dht::DhtKeyManager dht_key(des_net_id, 0);
        msg.set_des_dht_key(dht_key.StrKey());
        msg.set_priority(transport::kTransportPriorityHighest);
        msg.set_id(common::GlobalInfo::Instance()->MessageId());
        msg.set_type(common::kBftMessage);
        msg.set_client(false);
        msg.set_hop_count(0);
        auto broad_param = msg.mutable_broadcast();
        SetDefaultBroadcastParam(broad_param);
        bft::protobuf::BftMessage bft_msg;
        bft_msg.set_gid(common::CreateGID(""));
        bft_msg.set_rand(0);
        bft_msg.set_bft_step(bft::kBftInit);
        bft_msg.set_leader(false);
        bft_msg.set_net_id(des_net_id);
        security::PrivateKey from_private_key(from_prikey);
        security::PublicKey from_pubkey(from_private_key);
        std::string from_pubkey_str;
        ASSERT_EQ(from_pubkey.Serialize(from_pubkey_str, false), security::kPublicKeyUncompressSize);
        std::string id = security::Secp256k1::Instance()->ToAddressWithPublicKey(from_pubkey_str);
        if (common::GlobalInfo::Instance()->network_id() != network::kRootCongressNetworkId) {
            uint32_t from_net_id = 0;
            ASSERT_EQ(block::AccountManager::Instance()->GetAddressConsensusNetworkId(
                id,
                &from_net_id), block::kBlockSuccess);
            ASSERT_EQ(from_net_id, common::GlobalInfo::Instance()->network_id());
        }
        
        bft_msg.set_node_id(id);
        bft_msg.set_pubkey(from_pubkey_str);
        bft::protobuf::TxBft tx_bft;
        auto new_tx = tx_bft.mutable_new_tx();
        auto iter = attrs.find("contract_orignal_gid");
        if (iter == attrs.end()) {
            new_tx->set_gid(common::CreateGID(from_pubkey_str));
        } else {
            new_tx->set_gid(iter->second);
        }

        new_tx->set_from(id);
        new_tx->set_from_pubkey(from_pubkey_str);
        if (!to_prikey.empty() && !just_to_id) {
            security::PrivateKey to_private_key(to_prikey);
            security::PublicKey to_pubkey(to_private_key);
            std::string to_pubkey_str;
            ASSERT_EQ(to_pubkey.Serialize(to_pubkey_str, false), security::kPublicKeyUncompressSize);
            std::string to_id = security::Secp256k1::Instance()->ToAddressWithPublicKey(to_pubkey_str);
            new_tx->set_to(to_id);
        }

        if (just_to_id) {
            new_tx->set_to(to_prikey);
        }

        if (tx_type == common::kConsensusCreateContract) {
            ASSERT_TRUE(attrs.find(bft::kContractBytesCode) != attrs.end());
            std::string contract_addres = security::Secp256k1::Instance()->GetContractAddress(
                id,
                new_tx->gid(),
                attrs[bft::kContractBytesCode]);
            new_tx->set_to(contract_addres);
        }

        new_tx->set_amount(amount);
        new_tx->set_gas_limit(gas_limit);
        new_tx->set_type(tx_type);
        for (auto iter = attrs.begin(); iter != attrs.end(); ++iter) {
            auto attr = new_tx->add_attr();
            attr->set_key(iter->first);
            attr->set_value(iter->second);
        }

        auto hash128 = GetTxMessageHash(*new_tx);
        auto tx_data = tx_bft.SerializeAsString();
        bft_msg.set_data(tx_data);
        security::Signature sign;
        ASSERT_TRUE(security::Schnorr::Instance()->Sign(
            hash128,
            from_private_key,
            from_pubkey,
            sign));
        std::string sign_challenge_str;
        std::string sign_response_str;
        sign.Serialize(sign_challenge_str, sign_response_str);
        bft_msg.set_sign_challenge(sign_challenge_str);
        bft_msg.set_sign_response(sign_response_str);
        msg.set_data(bft_msg.SerializeAsString());
    }

    void CreateTransaction(
            uint32_t bft_step,
            const std::string& from_prikey,
            const std::string& to_prikey,
            bool to_add,
            transport::protobuf::Header& msg) {
        msg.set_src_dht_key("");
        uint32_t des_net_id = network::kConsensusShardBeginNetworkId;
        dht::DhtKeyManager dht_key(des_net_id, 0);
        msg.set_des_dht_key(dht_key.StrKey());
        msg.set_priority(transport::kTransportPriorityHighest);
        msg.set_id(common::GlobalInfo::Instance()->MessageId());
        msg.set_type(common::kBftMessage);
        msg.set_client(false);
        msg.set_hop_count(0);
        auto broad_param = msg.mutable_broadcast();
        SetDefaultBroadcastParam(broad_param);
        bft::protobuf::BftMessage bft_msg;
        bft_msg.set_gid(common::CreateGID(""));
        bft_msg.set_rand(0);
        bft_msg.set_bft_step(bft_step);
        bft_msg.set_leader(false);
        bft_msg.set_net_id(des_net_id);
        security::PrivateKey from_private_key(from_prikey);
        security::PublicKey from_pubkey(from_private_key);
        std::string from_pubkey_str;
        ASSERT_EQ(from_pubkey.Serialize(from_pubkey_str, false), security::kPublicKeyUncompressSize);
        std::string id = security::Secp256k1::Instance()->ToAddressWithPublicKey(from_pubkey_str);

        if (common::GlobalInfo::Instance()->network_id() != network::kRootCongressNetworkId) {
            uint32_t from_net_id = 0;
            ASSERT_EQ(block::AccountManager::Instance()->GetAddressConsensusNetworkId(
                id,
                &from_net_id), block::kBlockSuccess);
            ASSERT_EQ(from_net_id, common::GlobalInfo::Instance()->network_id());
        }

        bft_msg.set_node_id(id);
        bft_msg.set_pubkey(from_pubkey_str);
        bft::protobuf::TxBft tx_bft;
        auto to_tx = tx_bft.mutable_to_tx();
        auto block = to_tx->mutable_block();
        auto tx_info = block->mutable_tx_list()->Add();
        tx_info->set_gid(common::CreateGID(from_pubkey_str));
        tx_info->set_from(id);
        tx_info->set_from_pubkey(from_pubkey_str);
        tx_info->set_to_add(to_add);
        tx_info->set_status(kBftSuccess);
        tx_info->set_type(common::kConsensusTransaction);
        security::PrivateKey to_private_key(to_prikey);
        security::PublicKey to_pubkey(to_private_key);
        std::string to_pubkey_str;
        ASSERT_EQ(to_pubkey.Serialize(to_pubkey_str, false), security::kPublicKeyUncompressSize);
        std::string to_id = security::Secp256k1::Instance()->ToAddressWithPublicKey(to_pubkey_str);
        tx_info->set_to(to_id);
        tx_info->set_amount(10llu * common::kTenonMiniTransportUnit);
        tx_info->set_gas_limit(1000000);

        std::string pool_hash;
        uint64_t pool_height = 0;
        uint32_t pool_index = common::GetPoolIndex(id);
        uint64_t tm;
        uint32_t last_pool_idx = common::kImmutablePoolSize;
        int res = block::AccountManager::Instance()->GetBlockInfo(
            pool_index,
            &pool_height,
            &pool_hash,
            &tm,
            &last_pool_idx);
        if (res != block::kBlockSuccess) {
            assert(false);
            return;
        }

        block->set_prehash(pool_hash);
        block->set_version(common::kTransactionVersion);
        block->set_elect_ver(common::GlobalInfo::Instance()->now_elect_version());
        block->set_network_id(common::GlobalInfo::Instance()->network_id());
        block->set_consistency_random(crand::ConsistencyRandom::Instance()->Random());
        block->set_height(pool_height + 1);
        block->set_timestamp(common::TimeStampMsec());
        block->set_hash(GetBlockHash(*block));

        auto tx_data = tx_bft.SerializeAsString();
        bft_msg.set_data(tx_data);
        security::Signature sign;
        ASSERT_TRUE(security::Schnorr::Instance()->Sign(
            block->hash(),
            from_private_key,
            from_pubkey,
            sign));
        std::string sign_challenge_str;
        std::string sign_response_str;
        sign.Serialize(sign_challenge_str, sign_response_str);
        bft_msg.set_sign_challenge(sign_challenge_str);
        bft_msg.set_sign_response(sign_response_str);
        msg.set_data(bft_msg.SerializeAsString());
    }

    static void CreateElectionBlock(uint32_t network_id, std::vector<std::string>& pri_vec) {
        std::map<uint32_t, bft::MembersPtr> in_members;
        std::map<uint32_t, bft::MembersPtr> out_members;
        std::map<uint32_t, bft::NodeIndexMapPtr> in_index_members;
        std::map<uint32_t, uint32_t> begin_index_map_;
        for (uint32_t i = 0; i < pri_vec.size(); ++i) {
            auto net_id = network_id;
            auto iter = in_members.find(net_id);
            if (iter == in_members.end()) {
                in_members[net_id] = std::make_shared<bft::Members>();
                in_index_members[net_id] = std::make_shared<
                    std::unordered_map<std::string, uint32_t>>();
                begin_index_map_[net_id] = 0;
            }

            security::PrivateKey prikey(pri_vec[i]);
            security::PublicKey pubkey(prikey);
            std::string pubkey_str;
            ASSERT_EQ(pubkey.Serialize(pubkey_str, false), security::kPublicKeyUncompressSize);
            std::string id = security::Secp256k1::Instance()->ToAddressWithPublicKey(pubkey_str);
            security::CommitSecret secret;
            in_members[net_id]->push_back(std::make_shared<bft::BftMember>(
                net_id, id, pubkey_str, begin_index_map_[net_id]));
            in_index_members[net_id]->insert(std::make_pair(id, begin_index_map_[net_id]));
            ++begin_index_map_[net_id];
        }

        for (auto iter = in_members.begin(); iter != in_members.end(); ++iter) {
            auto index_map_iter = in_index_members.find(iter->first);
            ASSERT_TRUE(index_map_iter != in_index_members.end());
            bft::BftManager::Instance()->NetworkMemberChange(
                iter->first,
                iter->second,
                index_map_iter->second);
            ASSERT_TRUE(bft::MemberManager::Instance()->network_members_[iter->first] != nullptr);
            ASSERT_TRUE(bft::MemberManager::Instance()->node_index_map_[iter->first] != nullptr);
        }
    }

    static void JoinNetwork(uint32_t network_id) {
        network::DhtManager::Instance()->UnRegisterDht(network_id);
        network::UniversalManager::Instance()->UnRegisterUniversal(network_id);
        dht::DhtKeyManager dht_key(
            network_id,
            common::GlobalInfo::Instance()->country(),
            common::GlobalInfo::Instance()->id());
        dht::NodePtr local_node = std::make_shared<dht::Node>(
            common::GlobalInfo::Instance()->id(),
            dht_key.StrKey(),
            dht::kNatTypeFullcone,
            false,
            common::GlobalInfo::Instance()->config_local_ip(),
            common::GlobalInfo::Instance()->config_local_port(),
            common::GlobalInfo::Instance()->config_local_ip(),
            common::GlobalInfo::Instance()->config_local_port(),
            security::Schnorr::Instance()->str_pubkey(),
            common::GlobalInfo::Instance()->node_tag());
        local_node->first_node = true;
        transport::TransportPtr transport;
        auto dht = std::make_shared<elect::ElectDht>(transport, local_node);
        dht->Init();
        auto base_dht = std::dynamic_pointer_cast<dht::BaseDht>(dht);
        network::DhtManager::Instance()->RegisterDht(network_id, base_dht);
        network::UniversalManager::Instance()->RegisterUniversal(network_id, base_dht);
    }

    static void InitEnv() {
        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kRootCongressNetworkId);
        {
            // root shard
            std::vector<std::string> pri_vec;
            pri_vec.push_back(common::Encode::HexDecode("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e"));
            pri_vec.push_back(common::Encode::HexDecode("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485161e"));
            pri_vec.push_back(common::Encode::HexDecode("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485162e"));
            CreateElectionBlock(network::kRootCongressNetworkId, pri_vec);
            ASSERT_TRUE(bft::MemberManager::Instance()->IsLeader(
                network::kRootCongressNetworkId,
                common::GlobalInfo::Instance()->id(),
                crand::ConsistencyRandom::Instance()->Random()));
        }

        {
            // consensus shard
            std::vector<std::string> pri_vec;
            pri_vec.push_back(common::Encode::HexDecode("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e"));
            pri_vec.push_back(common::Encode::HexDecode("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485161e"));
            pri_vec.push_back(common::Encode::HexDecode("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485162e"));
            CreateElectionBlock(network::kConsensusShardBeginNetworkId, pri_vec);
        }

        auto transport_ptr = std::dynamic_pointer_cast<transport::Transport>(
            std::make_shared<transport::TestTransport>());
        transport::MultiThreadHandler::Instance()->Init(transport_ptr, transport_ptr);
        AddGenisisBlock(common::kConsensusCreateGenesisAcount);
    }

    static void SetGloableInfo(const std::string& private_key, uint32_t network_id) {
        security::PrivateKey prikey(common::Encode::HexDecode(private_key));
        security::PublicKey pubkey(prikey);
        std::string pubkey_str;
        ASSERT_EQ(pubkey.Serialize(pubkey_str, false), security::kPublicKeyUncompressSize);
        std::string id = security::Secp256k1::Instance()->ToAddressWithPublicKey(pubkey_str);
        security::Schnorr::Instance()->set_prikey(std::make_shared<security::PrivateKey>(prikey));
        common::GlobalInfo::Instance()->set_id(id);
        common::GlobalInfo::Instance()->set_consensus_shard_count(1);
        common::GlobalInfo::Instance()->set_network_id(network_id);
        JoinNetwork(network::kRootCongressNetworkId);
        JoinNetwork(network::kUniversalNetworkId);
        JoinNetwork(network::kConsensusShardBeginNetworkId);
    }

    static std::string GetAccountIdByPrikey(const std::string& private_key) {
        security::PrivateKey prikey(private_key);
        security::PublicKey pubkey(prikey);
        std::string pubkey_str;
        EXPECT_EQ(pubkey.Serialize(pubkey_str, false), security::kPublicKeyUncompressSize);
        std::string id = security::Secp256k1::Instance()->ToAddressWithPublicKey(pubkey_str);
        return id;
    }

    static void RemoveAccountId(const std::string& id) {
        auto iter = block::AccountManager::Instance()->acc_map_.find(id);
        if (iter != block::AccountManager::Instance()->acc_map_.end()) {
            block::AccountManager::Instance()->acc_map_.erase(iter);
        }

        auto set_iter = block::DbAccountInfo::account_id_set_.find(id);
        if (set_iter != block::DbAccountInfo::account_id_set_.end()) {
            block::DbAccountInfo::account_id_set_.erase(set_iter);
        }

        std::string key = db::kGlobalDickKeyAccountIdExists + "_" + id;
        db::Db::Instance()->Delete(key);
    }

    static void AddConsensusBlocks() {

    }

    static void TearDownTestCase() {
    }

    virtual void SetUp() {
    }

    virtual void TearDown() {
    }

    void SetDefaultBroadcastParam(transport::protobuf::BroadcastParam* broad_param) {
        broad_param->set_layer_left(0);
        broad_param->set_layer_right(((std::numeric_limits<uint64_t>::max))());
        broad_param->set_ign_bloomfilter_hop(kBftBroadcastIgnBloomfilterHop);
        broad_param->set_stop_times(kBftBroadcastStopTimes);
        broad_param->set_hop_limit(kBftHopLimit);
        broad_param->set_hop_to_layer(kBftHopToLayer);
        broad_param->set_neighbor_count(kBftNeighborCount);
    }

    void AddNewTxToTxPool(const bft::protobuf::TxInfo& tx_info) {
        auto tx_ptr = std::make_shared<TxItem>(tx_info);
        GidManager::Instance()->NewGidTxValid(tx_ptr->tx.gid(), tx_ptr);
    }

    void ResetBftSecret(const std::string& bft_gid, uint32_t net_id, const std::string& id) {
        uint32_t member_index = MemberManager::Instance()->GetMemberIndex(net_id, id);
        auto mem_ptr = MemberManager::Instance()->GetMember(net_id, member_index);
        bft::BftManager::Instance()->bft_hash_map_[bft_gid]->secret_ = mem_ptr->secret;
    }

    void Transfer(
            const std::string& from_prikey,
            const std::string& to_prikey,
            uint64_t amount,
            uint64_t gas_limit,
            uint32_t tx_type,
            bool just_to_id,
            std::map<std::string, std::string>& attrs,
            transport::protobuf::Header* broadcast_msg) {
        transport::protobuf::Header msg;
        CreateNewTransaction(from_prikey, to_prikey, amount, gas_limit, tx_type, just_to_id, attrs, msg);
        bft::protobuf::BftMessage bft_msg;
        bft_msg.ParseFromString(msg.data());
        bft::protobuf::TxBft tx_bft;
        EXPECT_TRUE(tx_bft.ParseFromString(bft_msg.data()));
        
        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->HandleMessage(msg);
        usleep(bft::kBftStartDeltaTime);
        if (bft::BftManager::Instance()->StartBft("") != kBftSuccess) {
            return;
        }

        auto bft_gid = common::GlobalInfo::Instance()->gid_hash_ +
            std::to_string(common::GlobalInfo::Instance()->gid_idx_ - 1);
        auto iter = bft::BftManager::Instance()->bft_hash_map_.find(bft_gid);
        ASSERT_TRUE(iter != bft::BftManager::Instance()->bft_hash_map_.end());
        auto leader_prepare_msg = bft::BftManager::Instance()->leader_prepare_msg_;
        auto leader_prepare_msg2 = bft::BftManager::Instance()->leader_prepare_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(leader_prepare_msg.data()));
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485161e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->HandleMessage(leader_prepare_msg);
        auto backup1_prepare_msg = bft::BftManager::Instance()->backup_prepare_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(backup1_prepare_msg.data()));
            ASSERT_TRUE(bft_msg.agree());
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485162e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->HandleMessage(leader_prepare_msg2);
        auto backup2_prepare_msg = bft::BftManager::Instance()->backup_prepare_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(backup2_prepare_msg.data()));
            ASSERT_TRUE(bft_msg.agree());
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        // precommit
        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->HandleMessage(backup1_prepare_msg);
        bft::BftManager::Instance()->HandleMessage(backup2_prepare_msg);

        auto leader_precommit_msg = bft::BftManager::Instance()->leader_precommit_msg_;
        auto leader_precommit_msg2 = bft::BftManager::Instance()->leader_precommit_msg_;
        ASSERT_TRUE(leader_precommit_msg.has_data());
        ASSERT_TRUE(leader_precommit_msg2.has_data());

        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(leader_precommit_msg.data()));
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485161e", network::kConsensusShardBeginNetworkId);
        ResetBftSecret(bft_gid, network::kConsensusShardBeginNetworkId, common::GlobalInfo::Instance()->id());
        bft::BftManager::Instance()->HandleMessage(leader_precommit_msg);
        auto backup1_precommit_msg = bft::BftManager::Instance()->backup_precommit_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(backup1_precommit_msg.data()));
            ASSERT_TRUE(bft_msg.agree());
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485162e", network::kConsensusShardBeginNetworkId);
        ResetBftSecret(bft_gid, network::kConsensusShardBeginNetworkId, common::GlobalInfo::Instance()->id());
        bft::BftManager::Instance()->HandleMessage(leader_precommit_msg2);
        auto backup2_precommit_msg = bft::BftManager::Instance()->backup_precommit_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(backup2_precommit_msg.data()));
            ASSERT_TRUE(bft_msg.agree());
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        // commit
        uint32_t member_index = MemberManager::Instance()->GetMemberIndex(network::kConsensusShardBeginNetworkId, common::GlobalInfo::Instance()->id());
        auto mem_ptr = MemberManager::Instance()->GetMember(network::kConsensusShardBeginNetworkId, member_index);
        auto bft_ptr = bft::BftManager::Instance()->bft_hash_map_[bft_gid];

        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->HandleMessage(backup1_precommit_msg);
        bft::BftManager::Instance()->HandleMessage(backup2_precommit_msg);
        auto leader_commit_msg = bft::BftManager::Instance()->leader_commit_msg_;
        auto leader_commit_msg2 = bft::BftManager::Instance()->leader_commit_msg_;
        ASSERT_TRUE(leader_commit_msg.has_data());
        ASSERT_TRUE(leader_commit_msg2.has_data());
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(leader_commit_msg.data()));
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        *broadcast_msg = bft::BftManager::Instance()->to_leader_broadcast_msg_;
        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485161e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->bft_hash_map_[bft_gid] = bft_ptr;
        bft::BftManager::Instance()->HandleMessage(leader_commit_msg);
        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485162e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->bft_hash_map_[bft_gid] = bft_ptr;
        bft::BftManager::Instance()->HandleMessage(leader_commit_msg2);
    }

    void CreateNewAccount(
            const std::string& from_prikey,
            const std::string& to_prikey,
            transport::protobuf::Header& msg,
            transport::protobuf::Header* broadcast_msg) {
        bft::protobuf::BftMessage bft_msg;
        bft_msg.ParseFromString(msg.data());
        bft::protobuf::TxBft tx_bft;
        EXPECT_TRUE(tx_bft.ParseFromString(bft_msg.data()));

        // prepare
        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kRootCongressNetworkId);
        bft::BftManager::Instance()->HandleMessage(msg);
        usleep(bft::kBftStartDeltaTime);
        EXPECT_EQ(bft::BftManager::Instance()->StartBft(""), kBftSuccess);

        auto bft_gid = common::GlobalInfo::Instance()->gid_hash_ +
            std::to_string(common::GlobalInfo::Instance()->gid_idx_ - 1);
        auto iter = bft::BftManager::Instance()->bft_hash_map_.find(bft_gid);
        ASSERT_TRUE(iter != bft::BftManager::Instance()->bft_hash_map_.end());

        auto leader_prepare_msg = bft::BftManager::Instance()->leader_prepare_msg_;
        auto leader_prepare_msg2 = bft::BftManager::Instance()->leader_prepare_msg_;
        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485161e", network::kRootCongressNetworkId);
        bft::BftManager::Instance()->HandleMessage(leader_prepare_msg);
        AddNewTxToTxPool(tx_bft.to_tx().block().tx_list(0));
        auto backup1_prepare_msg = bft::BftManager::Instance()->backup_prepare_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(backup1_prepare_msg.data()));
            ASSERT_TRUE(bft_msg.agree());
        }

        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485162e", network::kRootCongressNetworkId);
        bft::BftManager::Instance()->HandleMessage(leader_prepare_msg2);
        auto backup2_prepare_msg = bft::BftManager::Instance()->backup_prepare_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(backup2_prepare_msg.data()));
            ASSERT_TRUE(bft_msg.agree());
        }

        // precommit
        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kRootCongressNetworkId);
        bft::BftManager::Instance()->HandleMessage(backup1_prepare_msg);
        bft::BftManager::Instance()->HandleMessage(backup2_prepare_msg);

        auto leader_precommit_msg = bft::BftManager::Instance()->leader_precommit_msg_;
        auto leader_precommit_msg2 = bft::BftManager::Instance()->leader_precommit_msg_;
        ASSERT_TRUE(leader_precommit_msg.has_data());
        ASSERT_TRUE(leader_precommit_msg2.has_data());

        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485161e", network::kRootCongressNetworkId);
        ResetBftSecret(bft_gid, network::kRootCongressNetworkId, common::GlobalInfo::Instance()->id());
        bft::BftManager::Instance()->HandleMessage(leader_precommit_msg);
        AddNewTxToTxPool(tx_bft.to_tx().block().tx_list(0));
        auto backup1_precommit_msg = bft::BftManager::Instance()->backup_precommit_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(backup1_precommit_msg.data()));
            ASSERT_TRUE(bft_msg.agree());
        }

        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485162e", network::kRootCongressNetworkId);
        ResetBftSecret(bft_gid, network::kRootCongressNetworkId, common::GlobalInfo::Instance()->id());
        bft::BftManager::Instance()->HandleMessage(leader_precommit_msg2);
        auto backup2_precommit_msg = bft::BftManager::Instance()->backup_precommit_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(backup2_precommit_msg.data()));
            ASSERT_TRUE(bft_msg.agree());
        }

        // commit
        uint32_t member_index = MemberManager::Instance()->GetMemberIndex(
            network::kRootCongressNetworkId,
            common::GlobalInfo::Instance()->id());
        auto mem_ptr = MemberManager::Instance()->GetMember(network::kRootCongressNetworkId, member_index);
        auto bft_ptr = bft::BftManager::Instance()->bft_hash_map_[bft_gid];

        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kRootCongressNetworkId);
        bft::BftManager::Instance()->HandleMessage(backup1_precommit_msg);
        bft::BftManager::Instance()->HandleMessage(backup2_precommit_msg);
        auto leader_commit_msg = bft::BftManager::Instance()->leader_commit_msg_;
        auto leader_commit_msg2 = bft::BftManager::Instance()->leader_commit_msg_;
        ASSERT_TRUE(leader_commit_msg.has_data());
        ASSERT_TRUE(leader_commit_msg2.has_data());

        *broadcast_msg = bft::BftManager::Instance()->root_leader_broadcast_msg_;

        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485161e", network::kRootCongressNetworkId);
        bft::BftManager::Instance()->bft_hash_map_[bft_gid] = bft_ptr;
        bft::BftManager::Instance()->HandleMessage(leader_commit_msg);
        SetGloableInfo("22345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485162e", network::kRootCongressNetworkId);
        bft::BftManager::Instance()->bft_hash_map_[bft_gid] = bft_ptr;
        bft::BftManager::Instance()->HandleMessage(leader_commit_msg2);

        // check broadcast msg
        auto leader_broadcast_msg = bft::BftManager::Instance()->root_leader_broadcast_msg_;
        ASSERT_EQ(leader_broadcast_msg.type(), common::kBftMessage);
        protobuf::BftMessage bft_msg_t;
        ASSERT_TRUE(bft_msg_t.ParseFromString(leader_broadcast_msg.data()));
        bft::protobuf::TxBft tx_bft_t;
        ASSERT_TRUE(tx_bft_t.ParseFromString(bft_msg_t.data()));
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).amount(), tx_bft_t.to_tx().block().tx_list(0).amount());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).from(), tx_bft_t.to_tx().block().tx_list(0).from());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).to(), tx_bft_t.to_tx().block().tx_list(0).to());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).from_pubkey(), tx_bft_t.to_tx().block().tx_list(0).from_pubkey());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).from_sign(), tx_bft_t.to_tx().block().tx_list(0).from_sign());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).gid(), tx_bft_t.to_tx().block().tx_list(0).gid());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).attr_size(), tx_bft_t.to_tx().block().tx_list(0).attr_size());

        // hash128(gid + from + to + amount + type + attrs(k:v))
        tx_bft_t.mutable_to_tx()->mutable_block()->mutable_tx_list(0)->set_type(tx_bft.to_tx().block().tx_list(0).type());
        ASSERT_EQ(tx_bft.to_tx().block().tx_list(0).type(), tx_bft_t.to_tx().block().tx_list(0).type());
        ASSERT_EQ(GetTxMessageHash(tx_bft.to_tx().block().tx_list(0)), GetTxMessageHash(tx_bft_t.to_tx().block().tx_list(0)));
    }

    void NewAccountDestNetworkTransfer(
            bool is_from_root,
            uint32_t tx_type,
            bool just_to_id,
            transport::protobuf::Header& root_leader_msg,
            const std::string& from_prikey,
            const std::string& to_prikey,
            std::map<std::string, std::string>& attrs,
            transport::protobuf::Header* leader_broadcast_msg) {
        // root create new account and add to consensus network
        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->HandleMessage(root_leader_msg);
        if (tx_type == common::kConsensusCreateContract) {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(root_leader_msg.data()));
            protobuf::TxBft tx_bft;
            ASSERT_TRUE(tx_bft.ParseFromString(bft_msg.data()));
            auto src_block = tx_bft.to_tx().block();
            auto& tx_list =  tx_bft.to_tx().block().tx_list();
            std::string contract_address;
            std::string tx_bytes_code;
            for (int32_t i = 0; i < tx_bft.to_tx().block().tx_list(0).attr_size(); ++i) {
                if (tx_bft.to_tx().block().tx_list(0).attr(i).key() == bft::kContractBytesCode) {
                    contract_address = security::Secp256k1::Instance()->GetContractAddress(
                        tx_bft.to_tx().block().tx_list(0).from(),
                        tx_bft.to_tx().block().tx_list(0).gid(),
                        tx_bft.to_tx().block().tx_list(0).attr(i).value());
                    tx_bytes_code = tx_bft.to_tx().block().tx_list(0).attr(i).value();
                }
            }

            ASSERT_EQ(contract_address, tx_bft.to_tx().block().tx_list(0).to());
            auto contract_addr_info = block::AccountManager::Instance()->GetAcountInfo(contract_address);
            ASSERT_TRUE(contract_addr_info != nullptr);
            uint32_t address_type = block::kNormalAddress;
            std::string bytes_code;
            std::string owner;
            ASSERT_EQ(contract_addr_info->GetAddressType(&address_type), block::kBlockSuccess);
            ASSERT_EQ(contract_addr_info->GetBytesCode(&bytes_code), block::kBlockSuccess);
//             ASSERT_EQ(contract_addr_info->GetAttrValue(block::kFieldContractOwner, &owner), block::kBlockSuccess);
            ASSERT_EQ(address_type, block::kContractAddress);
//             ASSERT_EQ(block::UnicastAddress(owner), tx_bft.to_tx().block().tx_list(0).from());
            attrs["res_contract_addr"] = contract_address;
            return;
        }

        usleep(bft::kBftStartDeltaTime);
        ASSERT_EQ(bft::BftManager::Instance()->StartBft(""), kBftSuccess);

        auto bft_gid = common::GlobalInfo::Instance()->gid_hash_ +
            std::to_string(common::GlobalInfo::Instance()->gid_idx_ - 1);
        auto iter = bft::BftManager::Instance()->bft_hash_map_.find(bft_gid);
        ASSERT_TRUE(iter != bft::BftManager::Instance()->bft_hash_map_.end());

        auto leader_prepare_msg = bft::BftManager::Instance()->leader_prepare_msg_;
        auto leader_prepare_msg2 = bft::BftManager::Instance()->leader_prepare_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(leader_prepare_msg.data()));
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485161e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->HandleMessage(leader_prepare_msg);
        auto backup1_prepare_msg = bft::BftManager::Instance()->backup_prepare_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(backup1_prepare_msg.data()));
            ASSERT_TRUE(bft_msg.agree());
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485162e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->HandleMessage(leader_prepare_msg2);
        auto backup2_prepare_msg = bft::BftManager::Instance()->backup_prepare_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(backup2_prepare_msg.data()));
            ASSERT_TRUE(bft_msg.agree());
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        // precommit
        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->HandleMessage(backup1_prepare_msg);
        bft::BftManager::Instance()->HandleMessage(backup2_prepare_msg);

        auto leader_precommit_msg = bft::BftManager::Instance()->leader_precommit_msg_;
        auto leader_precommit_msg2 = bft::BftManager::Instance()->leader_precommit_msg_;
        ASSERT_TRUE(leader_precommit_msg.has_data());
        ASSERT_TRUE(leader_precommit_msg2.has_data());

        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(leader_precommit_msg.data()));
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485161e", network::kConsensusShardBeginNetworkId);
        ResetBftSecret(bft_gid, network::kConsensusShardBeginNetworkId, common::GlobalInfo::Instance()->id());
        bft::BftManager::Instance()->HandleMessage(leader_precommit_msg);
        auto backup1_precommit_msg = bft::BftManager::Instance()->backup_precommit_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(backup1_precommit_msg.data()));
            ASSERT_TRUE(bft_msg.agree());
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485162e", network::kConsensusShardBeginNetworkId);
        ResetBftSecret(bft_gid, network::kConsensusShardBeginNetworkId, common::GlobalInfo::Instance()->id());
        bft::BftManager::Instance()->HandleMessage(leader_precommit_msg2);
        auto backup2_precommit_msg = bft::BftManager::Instance()->backup_precommit_msg_;
        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(backup2_precommit_msg.data()));
            ASSERT_TRUE(bft_msg.agree());
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        // commit
        std::string to_id = GetIdByPrikey(to_prikey);
        if (just_to_id) {
            to_id = to_prikey;
        }

        uint64_t src_balance = 0;
        {
            auto to_acc_info = block::AccountManager::Instance()->GetAcountInfo(to_id);
            ASSERT_TRUE(to_acc_info != nullptr);
            src_balance = to_acc_info->balance_;
        }

        uint32_t member_index = MemberManager::Instance()->GetMemberIndex(network::kConsensusShardBeginNetworkId, common::GlobalInfo::Instance()->id());
        auto mem_ptr = MemberManager::Instance()->GetMember(network::kConsensusShardBeginNetworkId, member_index);
        auto bft_ptr = bft::BftManager::Instance()->bft_hash_map_[bft_gid];

        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485164e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->HandleMessage(backup1_precommit_msg);
        bft::BftManager::Instance()->HandleMessage(backup2_precommit_msg);
        auto leader_commit_msg = bft::BftManager::Instance()->leader_commit_msg_;
        auto leader_commit_msg2 = bft::BftManager::Instance()->leader_commit_msg_;
        ASSERT_TRUE(leader_commit_msg.has_data());
        ASSERT_TRUE(leader_commit_msg2.has_data());

        {
            protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(leader_commit_msg.data()));
            ASSERT_EQ(bft_msg.gid(), bft_gid);
        }

        {
            auto to_acc_info = block::AccountManager::Instance()->GetAcountInfo(to_id);
            db::DbWriteBach db_batch;
            to_acc_info->SetBalance(src_balance, db_batch);
            db::Db::Instance()->Put(db_batch);
        }

        *leader_broadcast_msg = bft::BftManager::Instance()->to_leader_broadcast_msg_;
        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485161e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->bft_hash_map_[bft_gid] = bft_ptr;
        bft::BftManager::Instance()->HandleMessage(leader_commit_msg);
        {
            auto to_acc_info = block::AccountManager::Instance()->GetAcountInfo(to_id);
            db::DbWriteBach db_batch;
            to_acc_info->SetBalance(src_balance, db_batch);
            db::Db::Instance()->Put(db_batch);
        }

        SetGloableInfo("12345f72efffee770264ec22dc21c9d2bab63aec39941aad09acda57b485162e", network::kConsensusShardBeginNetworkId);
        bft::BftManager::Instance()->bft_hash_map_[bft_gid] = bft_ptr;
        bft::BftManager::Instance()->HandleMessage(leader_commit_msg2);
    }

    std::string GetIdByPrikey(const std::string& private_key) {
        security::PrivateKey prikey(private_key);
        security::PublicKey pubkey(prikey);
        std::string pubkey_str;
        EXPECT_EQ(pubkey.Serialize(pubkey_str, false), security::kPublicKeyUncompressSize);
        std::string id = security::Secp256k1::Instance()->ToAddressWithPublicKey(pubkey_str);
        return id;
    }

    void Transaction(
            const std::string& from_prikey,
            const std::string& to_prikey,
            uint64_t amount,
            uint64_t gas_limit,
            uint32_t tx_type,
            bool call_to,
            bool just_to_id,
            std::map<std::string, std::string>& attrs) {
        transport::protobuf::Header broadcast_msg;
        Transfer(from_prikey, to_prikey, amount, gas_limit, tx_type, just_to_id, attrs, &broadcast_msg);
        if (call_to) {
            bft::protobuf::BftMessage bft_msg;
            ASSERT_TRUE(bft_msg.ParseFromString(broadcast_msg.data()));
            ASSERT_TRUE(broadcast_msg.IsInitialized());
            uint32_t des_network_id = dht::DhtKeyManager::DhtKeyGetNetId(broadcast_msg.des_dht_key());
            if (des_network_id == network::kRootCongressNetworkId) {
                transport::protobuf::Header to_root_broadcast_msg;
                CreateNewAccount(from_prikey, to_prikey, broadcast_msg, &to_root_broadcast_msg);
                ASSERT_TRUE(to_root_broadcast_msg.IsInitialized());
                transport::protobuf::Header tmp_broadcast_msg;
                NewAccountDestNetworkTransfer(true, tx_type, just_to_id, to_root_broadcast_msg, from_prikey, to_prikey, attrs, &tmp_broadcast_msg);
            } else {
                transport::protobuf::Header tmp_broadcast_msg;
                NewAccountDestNetworkTransfer(false, tx_type, just_to_id, broadcast_msg, from_prikey, to_prikey, attrs, &tmp_broadcast_msg);
            }
        }
    }

    uint64_t GetBalanceByPrikey(const std::string& prikey) {
        auto account_info = block::AccountManager::Instance()->GetAcountInfo(GetIdByPrikey(prikey));
        if (account_info == nullptr) {
            return common::kInvalidUint64;
        }

        return account_info->balance_;
    }

    void InitOfflineTransferContract(
            std::string* contract_address,
            const std::string& bytes_code,
            uint64_t owner_balance,
            uint64_t contract_balance,
            uint64_t caller_balance,
            uint64_t constructor_amount) {
        {
            std::string from_prikey = common::Encode::HexDecode(
                "b6aaadbe30d002d7c532b95901949540f9213e740467461d540d9f3cc3efb4b6");
            std::string to_prikey = common::Encode::HexDecode(
                "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709");
            uint64_t init_balance = GetBalanceByPrikey(from_prikey);
            uint64_t to_balance = GetBalanceByPrikey(to_prikey);
            ASSERT_EQ(to_balance, common::kInvalidUint64);
            uint64_t all_amount = 0;
            uint64_t amount = owner_balance;
            uint64_t all_gas = 0;
            all_amount += amount;
            all_gas += bft::kTransferGas;
            std::map<std::string, std::string> attrs;
            Transaction(
                from_prikey,
                to_prikey,
                amount,
                all_gas + 1,
                common::kConsensusTransaction,
                true,
                false,
                attrs);
            auto from_balance = GetBalanceByPrikey(from_prikey);
            to_balance = GetBalanceByPrikey(to_prikey);
            ASSERT_EQ(from_balance, init_balance - all_gas * common::GlobalInfo::Instance()->gas_price() - all_amount);
            ASSERT_EQ(to_balance, all_amount);
        }

        // create contract
        {
            std::string from_prikey = common::Encode::HexDecode(
                "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709");
            uint64_t init_balance = GetBalanceByPrikey(from_prikey);
            uint64_t all_amount = 0;
            uint64_t amount = constructor_amount;
            uint64_t all_gas = 0;
            all_gas += bft::kTransferGas + bft::kCallContractDefaultUseGas;
            std::map<std::string, std::string> attrs;
            if (!contract_address->empty()) {
                attrs["contract_orignal_gid"] = *contract_address;
            }

            attrs.insert(std::make_pair(kContractBytesCode, bytes_code));
            all_gas += (kContractBytesCode.size() + attrs[kContractBytesCode].size()) *
                bft::kKeyValueStorageEachBytes;
            all_gas += 2024;
            Transaction(
                from_prikey,
                "",
                amount,
                all_gas + 10000000llu,
                common::kConsensusCreateContract,
                true,
                false,
                attrs);
            uint64_t from_balance = GetBalanceByPrikey(from_prikey);
//             EXPECT_EQ(from_balance, init_balance - (all_gas - bft::kCallContractDefaultUseGas)  * common::GlobalInfo::Instance()->gas_price() - all_amount);
            *contract_address = attrs["res_contract_addr"];
        }

        // transfer to contract address
        {
            std::string from_prikey = common::Encode::HexDecode(
                "b6aaadbe30d002d7c532b95901949540f9213e740467461d540d9f3cc3efb4b6");
            std::string to_prikey = *contract_address;
            uint64_t init_balance = GetBalanceByPrikey(from_prikey);
            uint64_t all_amount = 0;
            uint64_t amount = contract_balance;
            uint64_t all_gas = 0;
            all_amount += amount;
            all_gas += bft::kTransferGas;
            std::map<std::string, std::string> attrs;
            Transaction(from_prikey, to_prikey, amount, all_gas + 1, common::kConsensusTransaction, true, true, attrs);
            auto from_balance = GetBalanceByPrikey(from_prikey);
            auto contract_info = block::AccountManager::Instance()->GetAcountInfo(*contract_address);
            ASSERT_TRUE(contract_info != nullptr);
            uint64_t to_balance;
            ASSERT_EQ(contract_info->GetBalance(&to_balance), block::kBlockSuccess);
            ASSERT_EQ(from_balance, init_balance - all_gas * common::GlobalInfo::Instance()->gas_price() - all_amount);
            ASSERT_EQ(to_balance, all_amount);
        }

        // create contract caller
        {
            std::string from_prikey = common::Encode::HexDecode(
                "b6aaadbe30d002d7c532b95901949540f9213e740467461d540d9f3cc3efb4b6");
            std::string to_prikey = common::Encode::HexDecode(
                "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700");
            uint64_t init_balance = GetBalanceByPrikey(from_prikey);
            uint64_t to_balance = GetBalanceByPrikey(to_prikey);
            ASSERT_EQ(to_balance, common::kInvalidUint64);
            uint64_t all_amount = 0;
            uint64_t amount = caller_balance;
            uint64_t all_gas = 0;
            all_amount += amount;
            all_gas += bft::kTransferGas;
            std::map<std::string, std::string> attrs;
            Transaction(
                from_prikey,
                to_prikey,
                amount,
                all_gas + 1,
                common::kConsensusTransaction,
                true,
                false,
                attrs);
            auto from_balance = GetBalanceByPrikey(from_prikey);
            to_balance = GetBalanceByPrikey(to_prikey);
            ASSERT_EQ(from_balance, init_balance - all_gas * common::GlobalInfo::Instance()->gas_price() - all_amount);
            ASSERT_EQ(to_balance, all_amount);
        }
    }

private:
    static std::map<uint32_t, std::string> pool_index_map_;
    std::unordered_set<std::string> created_gids_;
};

std::map<uint32_t, std::string> TestBftManagerForFailCase::pool_index_map_;

// execute contract failed and out block to unlock caller
TEST_F(TestBftManagerForFailCase, TestCallContractAffterLock) {
    // contract owner: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709
    // contract caller: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700
    std::string contract_addr;
    InitOfflineTransferContract(
        &contract_addr,
        receive_pays,
        100llu * common::kTenonMiniTransportUnit,
        90llu * common::kTenonMiniTransportUnit,
        100llu * common::kTenonMiniTransportUnit,
        0);
    // call contract
    transport::protobuf::Header broadcast_msg;
    std::string from_prikey = common::Encode::HexDecode(
        "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700");
    std::map<std::string, std::string> attrs;
    attrs[bft::kContractInputCode] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    // Default caller init and lock caller
    auto caller_info = block::AccountManager::Instance()->GetAcountInfo(GetIdByPrikey(from_prikey));
    auto from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_FALSE(caller_info->locked());
    Transfer(from_prikey, contract_addr, 0, 20000000,
        common::kConsensusCallContract, true, attrs, &broadcast_msg);
    auto new_from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_EQ(new_from_balance, from_balance - kCallContractDefaultUseGas * common::GlobalInfo::Instance()->gas_price());
    ASSERT_TRUE(caller_info->locked());

    // now call transfer will fail
    {
        std::string to_prikey = common::Encode::HexDecode(
            "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8711");
        uint64_t init_balance = GetBalanceByPrikey(from_prikey);
        uint64_t to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(to_balance, common::kInvalidUint64);
        uint64_t all_amount = 0;
        uint64_t amount = 10llu * common::kTenonMiniTransportUnit;
        uint64_t all_gas = 0;
        all_amount += amount;
        all_gas += bft::kTransferGas;
        std::map<std::string, std::string> attrs;
        Transaction(
            from_prikey,
            to_prikey,
            amount,
            all_gas + 1,
            common::kConsensusTransaction,
            false,
            false,
            attrs);
        to_balance = GetBalanceByPrikey(to_prikey);
        ASSERT_EQ(to_balance, common::kInvalidUint64);
        auto from_balance = GetBalanceByPrikey(from_prikey);
        ASSERT_EQ(from_balance, init_balance);
    }

    // CallContract
    transport::protobuf::Header leader_init_msg;
    auto contract_info = block::AccountManager::Instance()->GetContractInfoByAddress(contract_addr);
    uint64_t contract_balance = 0;
    ASSERT_EQ(contract_info->GetBalance(&contract_balance), block::kBlockSuccess);
    ASSERT_TRUE(contract_info != nullptr);
    NewAccountDestNetworkTransfer(false, common::kConsensusCallContract,
        true, broadcast_msg, from_prikey, contract_addr, attrs, &leader_init_msg);
    uint64_t new_contract_balance = 0;
    ASSERT_EQ(contract_info->GetBalance(&new_contract_balance), block::kBlockSuccess);
    ASSERT_EQ(contract_balance, new_contract_balance);

    // UnlockCaller
    ASSERT_TRUE(caller_info->locked());
    from_balance = GetBalanceByPrikey(from_prikey);
    transport::protobuf::Header leader_lock_msg;
    NewAccountDestNetworkTransfer(false, common::kConsensusCallContract,
        true, leader_init_msg, from_prikey, contract_addr, attrs, &leader_lock_msg);
    new_from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_FALSE(caller_info->locked());
    ASSERT_EQ(new_from_balance, from_balance - 159 * common::GlobalInfo::Instance()->gas_price());
}

// caller transfer after caller locked
TEST_F(TestBftManagerForFailCase, TestCallContractSuccess) {
    // contract owner: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709
    // contract caller: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700
    std::string contract_addr;
    InitOfflineTransferContract(
        &contract_addr,
        receive_pays,
        100llu * common::kTenonMiniTransportUnit,
        90llu * common::kTenonMiniTransportUnit,
        100llu * common::kTenonMiniTransportUnit,
        0);
    // call contract
    transport::protobuf::Header broadcast_msg;
    std::string from_prikey = common::Encode::HexDecode(
        "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700");
    std::map<std::string, std::string> attrs;
    attrs[bft::kContractInputCode] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    // Default caller init and lock caller
    auto caller_info = block::AccountManager::Instance()->GetAcountInfo(GetIdByPrikey(from_prikey));
    auto from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_FALSE(caller_info->locked());
    Transfer(from_prikey, contract_addr, 0, 20000000,
        common::kConsensusCallContract, true, attrs, &broadcast_msg);
    auto new_from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_EQ(new_from_balance, from_balance - kCallContractDefaultUseGas * common::GlobalInfo::Instance()->gas_price());
    ASSERT_TRUE(caller_info->locked());

    // CallContract
    transport::protobuf::Header leader_init_msg;
    auto contract_info = block::AccountManager::Instance()->GetContractInfoByAddress(contract_addr);
    uint64_t contract_balance = 0;
    ASSERT_EQ(contract_info->GetBalance(&contract_balance), block::kBlockSuccess);
    ASSERT_TRUE(contract_info != nullptr);
    NewAccountDestNetworkTransfer(false, common::kConsensusCallContract,
        true, broadcast_msg, from_prikey, contract_addr, attrs, &leader_init_msg);
    uint64_t new_contract_balance = 0;
    ASSERT_EQ(contract_info->GetBalance(&new_contract_balance), block::kBlockSuccess);
    ASSERT_EQ(contract_balance, new_contract_balance);

    // UnlockCaller
    ASSERT_TRUE(caller_info->locked());
    from_balance = GetBalanceByPrikey(from_prikey);
    transport::protobuf::Header leader_lock_msg;
    NewAccountDestNetworkTransfer(false, common::kConsensusCallContract,
        true, leader_init_msg, from_prikey, contract_addr, attrs, &leader_lock_msg);
    new_from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_FALSE(caller_info->locked());
    ASSERT_EQ(new_from_balance, from_balance - 159 * common::GlobalInfo::Instance()->gas_price());
}

// gas limit >= balance
// call contract
TEST_F(TestBftManagerForFailCase, TestCallContractGasLimitBiggerThanBalance) {
    // contract owner: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709
    // contract caller: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700
    std::string contract_addr;
    InitOfflineTransferContract(
        &contract_addr,
        receive_pays,
        100llu * common::kTenonMiniTransportUnit,
        90llu * common::kTenonMiniTransportUnit,
        100llu * common::kTenonMiniTransportUnit,
        0);
    // call contract
    transport::protobuf::Header broadcast_msg;
    std::string from_prikey = common::Encode::HexDecode(
        "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700");
    std::map<std::string, std::string> attrs;
    attrs[bft::kContractInputCode] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    // Default caller init and lock caller
    auto caller_info = block::AccountManager::Instance()->GetAcountInfo(GetIdByPrikey(from_prikey));
    auto from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_FALSE(caller_info->locked());
    std::cout << "from_balance: " << from_balance << ", gas limit: " << 101llu * common::kTenonMiniTransportUnit * common::GlobalInfo::Instance()->gas_price() << std::endl;
    Transfer(from_prikey, contract_addr, 0, 101llu * common::kTenonMiniTransportUnit,
        common::kConsensusCallContract, true, attrs, &broadcast_msg);
    auto new_from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_EQ(new_from_balance, from_balance - kCallContractDefaultUseGas * common::GlobalInfo::Instance()->gas_price());
    ASSERT_FALSE(caller_info->locked());
}

// gas limit >= balance
// transaction
TEST_F(TestBftManagerForFailCase, TestTransactionGasLimitBiggerThanBalance) {
    // contract owner: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709
    // contract caller: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700
    std::string contract_addr;
    InitOfflineTransferContract(
        &contract_addr,
        receive_pays,
        100llu * common::kTenonMiniTransportUnit,
        90llu * common::kTenonMiniTransportUnit,
        100llu * common::kTenonMiniTransportUnit,
        0);
    // call contract
    transport::protobuf::Header broadcast_msg;
    std::string from_prikey = common::Encode::HexDecode(
        "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700");
    std::map<std::string, std::string> attrs;
    attrs[bft::kContractInputCode] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    // Default caller init and lock caller
    auto caller_info = block::AccountManager::Instance()->GetAcountInfo(GetIdByPrikey(from_prikey));
    auto from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_FALSE(caller_info->locked());
    Transfer(from_prikey, contract_addr, 0, 100llu * common::kTenonMiniTransportUnit,
        common::kConsensusTransaction, true, attrs, &broadcast_msg);
    auto new_from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_EQ(new_from_balance, from_balance - kTransferGas * common::GlobalInfo::Instance()->gas_price());
    ASSERT_FALSE(caller_info->locked());
}

// gas used >= gas limit
// call contract
TEST_F(TestBftManagerForFailCase, TestCallContractGasUsedBiggerThanBalance) {
    // contract owner: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709
    // contract caller: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700
    std::string contract_addr;
    InitOfflineTransferContract(
        &contract_addr,
        receive_pays,
        100llu * common::kTenonMiniTransportUnit,
        90llu * common::kTenonMiniTransportUnit,
        100llu * common::kTenonMiniTransportUnit,
        0);
    // call contract
    transport::protobuf::Header broadcast_msg;
    std::string from_prikey = common::Encode::HexDecode(
        "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700");
    std::map<std::string, std::string> attrs;
    attrs[bft::kContractInputCode] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    // Default caller init and lock caller
    auto caller_info = block::AccountManager::Instance()->GetAcountInfo(GetIdByPrikey(from_prikey));
    auto from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_FALSE(caller_info->locked());
    Transfer(from_prikey, contract_addr, 0, kCallContractDefaultUseGas - 1,
        common::kConsensusCallContract, true, attrs, &broadcast_msg);
    auto new_from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_EQ(new_from_balance, from_balance - kCallContractDefaultUseGas * common::GlobalInfo::Instance()->gas_price());
    ASSERT_FALSE(caller_info->locked());
}

// gas used >= gas limit
// transaction
TEST_F(TestBftManagerForFailCase, TestTransactionGasUsedBiggerThanBalance) {
    // contract owner: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709
    // contract caller: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700
    std::string contract_addr;
    InitOfflineTransferContract(
        &contract_addr,
        receive_pays,
        100llu * common::kTenonMiniTransportUnit,
        90llu * common::kTenonMiniTransportUnit,
        100llu * common::kTenonMiniTransportUnit,
        0);
    // call contract
    transport::protobuf::Header broadcast_msg;
    std::string from_prikey = common::Encode::HexDecode(
        "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700");
    std::map<std::string, std::string> attrs;
//     attrs[bft::kContractInputCode] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    // Default caller init and lock caller
    auto caller_info = block::AccountManager::Instance()->GetAcountInfo(GetIdByPrikey(from_prikey));
    auto from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_FALSE(caller_info->locked());
    Transfer(from_prikey, contract_addr, 0, kTransferGas - 1,
        common::kConsensusTransaction, true, attrs, &broadcast_msg);
    auto new_from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_EQ(new_from_balance, from_balance - kTransferGas * common::GlobalInfo::Instance()->gas_price());
    ASSERT_FALSE(caller_info->locked());
}

// gas used >= balance
// call contract
TEST_F(TestBftManagerForFailCase, TestCallContractGasUsedBiggerThanBalance2) {
    // contract owner: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709
    // contract caller: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700
    std::map<std::string, std::string> attrs;
    attrs[bft::kContractInputCode] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    attrs["1"] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    attrs["2"] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    attrs["3"] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    uint64_t gas_used = 0;
    for (auto iter = attrs.begin(); iter != attrs.end(); ++iter) {
        gas_used += (iter->first.size() + iter->second.size()) * kKeyValueStorageEachBytes;
    }

    std::string contract_addr;
    InitOfflineTransferContract(
        &contract_addr,
        receive_pays,
        100llu * common::kTenonMiniTransportUnit,
        90llu * common::kTenonMiniTransportUnit,
        (kCallContractDefaultUseGas + gas_used) * common::GlobalInfo::Instance()->gas_price() - 1,
        0);
    // call contract
    transport::protobuf::Header broadcast_msg;
    std::string from_prikey = common::Encode::HexDecode(
        "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700");
    // Default caller init and lock caller
    auto caller_info = block::AccountManager::Instance()->GetAcountInfo(GetIdByPrikey(from_prikey));
    auto from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_FALSE(caller_info->locked());
    Transfer(from_prikey, contract_addr, 0, (kCallContractDefaultUseGas + gas_used) * common::GlobalInfo::Instance()->gas_price() - 1000,
        common::kConsensusCallContract, true, attrs, &broadcast_msg);
    auto new_from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_EQ(new_from_balance, from_balance - kCallContractDefaultUseGas * common::GlobalInfo::Instance()->gas_price());
    ASSERT_FALSE(caller_info->locked());
}

// gas used >= balance
// transaction
TEST_F(TestBftManagerForFailCase, TestTransactionGasUsedBiggerThanBalance2) {
    // contract owner: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709
    // contract caller: 348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700
    std::map<std::string, std::string> attrs;
    attrs[bft::kContractInputCode] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    attrs["1"] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    attrs["2"] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    attrs["3"] = common::Encode::HexDecode("190ae887000000000000000000000000000000000000000000000000000000009d88fac000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004129e687739c0fd3ceb3afe3bad915dd8994f9303e5d853589397c8abadb85a9e85e9c890353c564900a7f3dc6d1b7667e5af80035f63da7a9094bb054811ec7181c00000000000000000000000000000000000000000000000000000000000000");
    // Default caller init and lock caller
    uint64_t gas_used = 0;
    for (auto iter = attrs.begin(); iter != attrs.end(); ++iter) {
        gas_used += (iter->first.size() + iter->second.size()) * kKeyValueStorageEachBytes;
    }

    std::string from_prikey = common::Encode::HexDecode(
        "348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8700");

    std::string contract_addr;
    InitOfflineTransferContract(
        &contract_addr,
        receive_pays,
        100llu * common::kTenonMiniTransportUnit,
        90llu * common::kTenonMiniTransportUnit,
        (kTransferGas + gas_used) * common::GlobalInfo::Instance()->gas_price() - 1,
        0);
    auto from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_EQ(from_balance, (kTransferGas + gas_used) * common::GlobalInfo::Instance()->gas_price() - 1);
    // call contract
    transport::protobuf::Header broadcast_msg;
    auto caller_info = block::AccountManager::Instance()->GetAcountInfo(GetIdByPrikey(from_prikey));
    from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_FALSE(caller_info->locked());
    Transfer(from_prikey, contract_addr, 0, kTransferGas + gas_used - 1,
        common::kConsensusTransaction, true, attrs, &broadcast_msg);
    auto new_from_balance = GetBalanceByPrikey(from_prikey);
    ASSERT_EQ(new_from_balance, from_balance - (kTransferGas + gas_used) * common::GlobalInfo::Instance()->gas_price());
    ASSERT_FALSE(caller_info->locked());
}

}  // namespace test

}  // namespace bft

}  // namespace tenon
