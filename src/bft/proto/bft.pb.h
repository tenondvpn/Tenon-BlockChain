// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bft/proto/bft.proto

#ifndef PROTOBUF_INCLUDED_bft_2fproto_2fbft_2eproto
#define PROTOBUF_INCLUDED_bft_2fproto_2fbft_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_bft_2fproto_2fbft_2eproto 

namespace protobuf_bft_2fproto_2fbft_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_bft_2fproto_2fbft_2eproto
namespace tenon {
namespace bft {
namespace protobuf {
class AccountAttributes;
class AccountAttributesDefaultTypeInternal;
extern AccountAttributesDefaultTypeInternal _AccountAttributes_default_instance_;
class BackupTxPreCommit;
class BackupTxPreCommitDefaultTypeInternal;
extern BackupTxPreCommitDefaultTypeInternal _BackupTxPreCommit_default_instance_;
class BackupTxPrepare;
class BackupTxPrepareDefaultTypeInternal;
extern BackupTxPrepareDefaultTypeInternal _BackupTxPrepare_default_instance_;
class BftMessage;
class BftMessageDefaultTypeInternal;
extern BftMessageDefaultTypeInternal _BftMessage_default_instance_;
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class LeaderTxCommit;
class LeaderTxCommitDefaultTypeInternal;
extern LeaderTxCommitDefaultTypeInternal _LeaderTxCommit_default_instance_;
class LeaderTxPreCommit;
class LeaderTxPreCommitDefaultTypeInternal;
extern LeaderTxPreCommitDefaultTypeInternal _LeaderTxPreCommit_default_instance_;
class LeaderTxPrepare;
class LeaderTxPrepareDefaultTypeInternal;
extern LeaderTxPrepareDefaultTypeInternal _LeaderTxPrepare_default_instance_;
class StorageItem;
class StorageItemDefaultTypeInternal;
extern StorageItemDefaultTypeInternal _StorageItem_default_instance_;
class TbftLeaderPrepare;
class TbftLeaderPrepareDefaultTypeInternal;
extern TbftLeaderPrepareDefaultTypeInternal _TbftLeaderPrepare_default_instance_;
class TbftPrepareTransactionInfo;
class TbftPrepareTransactionInfoDefaultTypeInternal;
extern TbftPrepareTransactionInfoDefaultTypeInternal _TbftPrepareTransactionInfo_default_instance_;
class ToAccountTx;
class ToAccountTxDefaultTypeInternal;
extern ToAccountTxDefaultTypeInternal _ToAccountTx_default_instance_;
class TransferItem;
class TransferItemDefaultTypeInternal;
extern TransferItemDefaultTypeInternal _TransferItem_default_instance_;
class TxBft;
class TxBftDefaultTypeInternal;
extern TxBftDefaultTypeInternal _TxBft_default_instance_;
class TxInfo;
class TxInfoDefaultTypeInternal;
extern TxInfoDefaultTypeInternal _TxInfo_default_instance_;
class TxPrepareItem;
class TxPrepareItemDefaultTypeInternal;
extern TxPrepareItemDefaultTypeInternal _TxPrepareItem_default_instance_;
}  // namespace protobuf
}  // namespace bft
}  // namespace tenon
namespace google {
namespace protobuf {
template<> ::tenon::bft::protobuf::AccountAttributes* Arena::CreateMaybeMessage<::tenon::bft::protobuf::AccountAttributes>(Arena*);
template<> ::tenon::bft::protobuf::BackupTxPreCommit* Arena::CreateMaybeMessage<::tenon::bft::protobuf::BackupTxPreCommit>(Arena*);
template<> ::tenon::bft::protobuf::BackupTxPrepare* Arena::CreateMaybeMessage<::tenon::bft::protobuf::BackupTxPrepare>(Arena*);
template<> ::tenon::bft::protobuf::BftMessage* Arena::CreateMaybeMessage<::tenon::bft::protobuf::BftMessage>(Arena*);
template<> ::tenon::bft::protobuf::Block* Arena::CreateMaybeMessage<::tenon::bft::protobuf::Block>(Arena*);
template<> ::tenon::bft::protobuf::LeaderTxCommit* Arena::CreateMaybeMessage<::tenon::bft::protobuf::LeaderTxCommit>(Arena*);
template<> ::tenon::bft::protobuf::LeaderTxPreCommit* Arena::CreateMaybeMessage<::tenon::bft::protobuf::LeaderTxPreCommit>(Arena*);
template<> ::tenon::bft::protobuf::LeaderTxPrepare* Arena::CreateMaybeMessage<::tenon::bft::protobuf::LeaderTxPrepare>(Arena*);
template<> ::tenon::bft::protobuf::StorageItem* Arena::CreateMaybeMessage<::tenon::bft::protobuf::StorageItem>(Arena*);
template<> ::tenon::bft::protobuf::TbftLeaderPrepare* Arena::CreateMaybeMessage<::tenon::bft::protobuf::TbftLeaderPrepare>(Arena*);
template<> ::tenon::bft::protobuf::TbftPrepareTransactionInfo* Arena::CreateMaybeMessage<::tenon::bft::protobuf::TbftPrepareTransactionInfo>(Arena*);
template<> ::tenon::bft::protobuf::ToAccountTx* Arena::CreateMaybeMessage<::tenon::bft::protobuf::ToAccountTx>(Arena*);
template<> ::tenon::bft::protobuf::TransferItem* Arena::CreateMaybeMessage<::tenon::bft::protobuf::TransferItem>(Arena*);
template<> ::tenon::bft::protobuf::TxBft* Arena::CreateMaybeMessage<::tenon::bft::protobuf::TxBft>(Arena*);
template<> ::tenon::bft::protobuf::TxInfo* Arena::CreateMaybeMessage<::tenon::bft::protobuf::TxInfo>(Arena*);
template<> ::tenon::bft::protobuf::TxPrepareItem* Arena::CreateMaybeMessage<::tenon::bft::protobuf::TxPrepareItem>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tenon {
namespace bft {
namespace protobuf {

// ===================================================================

class AccountAttributes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.AccountAttributes) */ {
 public:
  AccountAttributes();
  virtual ~AccountAttributes();

  AccountAttributes(const AccountAttributes& from);

  inline AccountAttributes& operator=(const AccountAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountAttributes(AccountAttributes&& from) noexcept
    : AccountAttributes() {
    *this = ::std::move(from);
  }

  inline AccountAttributes& operator=(AccountAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountAttributes* internal_default_instance() {
    return reinterpret_cast<const AccountAttributes*>(
               &_AccountAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AccountAttributes* other);
  friend void swap(AccountAttributes& a, AccountAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountAttributes* New() const final {
    return CreateMaybeMessage<AccountAttributes>(NULL);
  }

  AccountAttributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountAttributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountAttributes& from);
  void MergeFrom(const AccountAttributes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.AccountAttributes)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.StorageItem) */ {
 public:
  StorageItem();
  virtual ~StorageItem();

  StorageItem(const StorageItem& from);

  inline StorageItem& operator=(const StorageItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StorageItem(StorageItem&& from) noexcept
    : StorageItem() {
    *this = ::std::move(from);
  }

  inline StorageItem& operator=(StorageItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StorageItem* internal_default_instance() {
    return reinterpret_cast<const StorageItem*>(
               &_StorageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StorageItem* other);
  friend void swap(StorageItem& a, StorageItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StorageItem* New() const final {
    return CreateMaybeMessage<StorageItem>(NULL);
  }

  StorageItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StorageItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StorageItem& from);
  void MergeFrom(const StorageItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.StorageItem)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.TransferItem) */ {
 public:
  TransferItem();
  virtual ~TransferItem();

  TransferItem(const TransferItem& from);

  inline TransferItem& operator=(const TransferItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferItem(TransferItem&& from) noexcept
    : TransferItem() {
    *this = ::std::move(from);
  }

  inline TransferItem& operator=(TransferItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferItem* internal_default_instance() {
    return reinterpret_cast<const TransferItem*>(
               &_TransferItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TransferItem* other);
  friend void swap(TransferItem& a, TransferItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferItem* New() const final {
    return CreateMaybeMessage<TransferItem>(NULL);
  }

  TransferItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferItem& from);
  void MergeFrom(const TransferItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional bytes to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional uint64 amount = 3;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.TransferItem)
 private:
  void set_has_from();
  void clear_has_from();
  void set_has_to();
  void clear_has_to();
  void set_has_amount();
  void clear_has_amount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::uint64 amount_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.TxInfo) */ {
 public:
  TxInfo();
  virtual ~TxInfo();

  TxInfo(const TxInfo& from);

  inline TxInfo& operator=(const TxInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxInfo(TxInfo&& from) noexcept
    : TxInfo() {
    *this = ::std::move(from);
  }

  inline TxInfo& operator=(TxInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxInfo* internal_default_instance() {
    return reinterpret_cast<const TxInfo*>(
               &_TxInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TxInfo* other);
  friend void swap(TxInfo& a, TxInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxInfo* New() const final {
    return CreateMaybeMessage<TxInfo>(NULL);
  }

  TxInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxInfo& from);
  void MergeFrom(const TxInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tenon.bft.protobuf.AccountAttributes attr = 14;
  int attr_size() const;
  void clear_attr();
  static const int kAttrFieldNumber = 14;
  ::tenon::bft::protobuf::AccountAttributes* mutable_attr(int index);
  ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::AccountAttributes >*
      mutable_attr();
  const ::tenon::bft::protobuf::AccountAttributes& attr(int index) const;
  ::tenon::bft::protobuf::AccountAttributes* add_attr();
  const ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::AccountAttributes >&
      attr() const;

  // repeated .tenon.bft.protobuf.StorageItem storages = 20;
  int storages_size() const;
  void clear_storages();
  static const int kStoragesFieldNumber = 20;
  ::tenon::bft::protobuf::StorageItem* mutable_storages(int index);
  ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::StorageItem >*
      mutable_storages();
  const ::tenon::bft::protobuf::StorageItem& storages(int index) const;
  ::tenon::bft::protobuf::StorageItem* add_storages();
  const ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::StorageItem >&
      storages() const;

  // repeated .tenon.bft.protobuf.TransferItem transfers = 21;
  int transfers_size() const;
  void clear_transfers();
  static const int kTransfersFieldNumber = 21;
  ::tenon::bft::protobuf::TransferItem* mutable_transfers(int index);
  ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TransferItem >*
      mutable_transfers();
  const ::tenon::bft::protobuf::TransferItem& transfers(int index) const;
  ::tenon::bft::protobuf::TransferItem* add_transfers();
  const ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TransferItem >&
      transfers() const;

  // optional bytes gid = 2;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 2;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_gid(::std::string&& value);
  #endif
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // optional bytes from = 3;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional bytes from_pubkey = 4;
  bool has_from_pubkey() const;
  void clear_from_pubkey();
  static const int kFromPubkeyFieldNumber = 4;
  const ::std::string& from_pubkey() const;
  void set_from_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_from_pubkey(::std::string&& value);
  #endif
  void set_from_pubkey(const char* value);
  void set_from_pubkey(const void* value, size_t size);
  ::std::string* mutable_from_pubkey();
  ::std::string* release_from_pubkey();
  void set_allocated_from_pubkey(::std::string* from_pubkey);

  // optional bytes from_sign = 5;
  bool has_from_sign() const;
  void clear_from_sign();
  static const int kFromSignFieldNumber = 5;
  const ::std::string& from_sign() const;
  void set_from_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_from_sign(::std::string&& value);
  #endif
  void set_from_sign(const char* value);
  void set_from_sign(const void* value, size_t size);
  ::std::string* mutable_from_sign();
  ::std::string* release_from_sign();
  void set_allocated_from_sign(::std::string* from_sign);

  // optional bytes to = 6;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 6;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional bytes tx_hash = 16;
  bool has_tx_hash() const;
  void clear_tx_hash();
  static const int kTxHashFieldNumber = 16;
  const ::std::string& tx_hash() const;
  void set_tx_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_hash(::std::string&& value);
  #endif
  void set_tx_hash(const char* value);
  void set_tx_hash(const void* value, size_t size);
  ::std::string* mutable_tx_hash();
  ::std::string* release_tx_hash();
  void set_allocated_tx_hash(::std::string* tx_hash);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional bool to_add = 12;
  bool has_to_add() const;
  void clear_to_add();
  static const int kToAddFieldNumber = 12;
  bool to_add() const;
  void set_to_add(bool value);

  // optional uint64 amount = 7;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 7;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // optional uint64 gas_limit = 8;
  bool has_gas_limit() const;
  void clear_gas_limit();
  static const int kGasLimitFieldNumber = 8;
  ::google::protobuf::uint64 gas_limit() const;
  void set_gas_limit(::google::protobuf::uint64 value);

  // optional uint64 gas_used = 9;
  bool has_gas_used() const;
  void clear_gas_used();
  static const int kGasUsedFieldNumber = 9;
  ::google::protobuf::uint64 gas_used() const;
  void set_gas_used(::google::protobuf::uint64 value);

  // optional uint64 gas_price = 10;
  bool has_gas_price() const;
  void clear_gas_price();
  static const int kGasPriceFieldNumber = 10;
  ::google::protobuf::uint64 gas_price() const;
  void set_gas_price(::google::protobuf::uint64 value);

  // optional uint64 balance = 11;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 11;
  ::google::protobuf::uint64 balance() const;
  void set_balance(::google::protobuf::uint64 value);

  // optional uint32 type = 13;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 13;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint32 status = 15;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 15;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 network_id = 17;
  bool has_network_id() const;
  void clear_network_id();
  static const int kNetworkIdFieldNumber = 17;
  ::google::protobuf::uint32 network_id() const;
  void set_network_id(::google::protobuf::uint32 value);

  // optional uint32 call_contract_step = 19;
  bool has_call_contract_step() const;
  void clear_call_contract_step();
  static const int kCallContractStepFieldNumber = 19;
  ::google::protobuf::uint32 call_contract_step() const;
  void set_call_contract_step(::google::protobuf::uint32 value);

  // optional uint64 timestamp = 22;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 22;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional uint32 pool_index = 18 [default = 257];
  bool has_pool_index() const;
  void clear_pool_index();
  static const int kPoolIndexFieldNumber = 18;
  ::google::protobuf::uint32 pool_index() const;
  void set_pool_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.TxInfo)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_gid();
  void clear_has_gid();
  void set_has_from();
  void clear_has_from();
  void set_has_from_pubkey();
  void clear_has_from_pubkey();
  void set_has_from_sign();
  void clear_has_from_sign();
  void set_has_to();
  void clear_has_to();
  void set_has_amount();
  void clear_has_amount();
  void set_has_gas_limit();
  void clear_has_gas_limit();
  void set_has_gas_used();
  void clear_has_gas_used();
  void set_has_gas_price();
  void clear_has_gas_price();
  void set_has_balance();
  void clear_has_balance();
  void set_has_to_add();
  void clear_has_to_add();
  void set_has_type();
  void clear_has_type();
  void set_has_status();
  void clear_has_status();
  void set_has_tx_hash();
  void clear_has_tx_hash();
  void set_has_network_id();
  void clear_has_network_id();
  void set_has_pool_index();
  void clear_has_pool_index();
  void set_has_call_contract_step();
  void clear_has_call_contract_step();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::AccountAttributes > attr_;
  ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::StorageItem > storages_;
  ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TransferItem > transfers_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr from_pubkey_;
  ::google::protobuf::internal::ArenaStringPtr from_sign_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr tx_hash_;
  ::google::protobuf::uint32 version_;
  bool to_add_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 gas_limit_;
  ::google::protobuf::uint64 gas_used_;
  ::google::protobuf::uint64 gas_price_;
  ::google::protobuf::uint64 balance_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 network_id_;
  ::google::protobuf::uint32 call_contract_step_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 pool_index_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(NULL);
  }

  Block* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 bitmap = 9;
  int bitmap_size() const;
  void clear_bitmap();
  static const int kBitmapFieldNumber = 9;
  ::google::protobuf::uint64 bitmap(int index) const;
  void set_bitmap(int index, ::google::protobuf::uint64 value);
  void add_bitmap(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bitmap() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bitmap();

  // repeated .tenon.bft.protobuf.TxInfo tx_list = 10;
  int tx_list_size() const;
  void clear_tx_list();
  static const int kTxListFieldNumber = 10;
  ::tenon::bft::protobuf::TxInfo* mutable_tx_list(int index);
  ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TxInfo >*
      mutable_tx_list();
  const ::tenon::bft::protobuf::TxInfo& tx_list(int index) const;
  ::tenon::bft::protobuf::TxInfo* add_tx_list();
  const ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TxInfo >&
      tx_list() const;

  // repeated uint64 commit_bitmap = 15;
  int commit_bitmap_size() const;
  void clear_commit_bitmap();
  static const int kCommitBitmapFieldNumber = 15;
  ::google::protobuf::uint64 commit_bitmap(int index) const;
  void set_commit_bitmap(int index, ::google::protobuf::uint64 value);
  void add_commit_bitmap(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      commit_bitmap() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_commit_bitmap();

  // optional bytes prehash = 3;
  bool has_prehash() const;
  void clear_prehash();
  static const int kPrehashFieldNumber = 3;
  const ::std::string& prehash() const;
  void set_prehash(const ::std::string& value);
  #if LANG_CXX11
  void set_prehash(::std::string&& value);
  #endif
  void set_prehash(const char* value);
  void set_prehash(const void* value, size_t size);
  ::std::string* mutable_prehash();
  ::std::string* release_prehash();
  void set_allocated_prehash(::std::string* prehash);

  // optional bytes hash = 4;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 4;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // optional bytes bls_agg_sign_x = 13;
  bool has_bls_agg_sign_x() const;
  void clear_bls_agg_sign_x();
  static const int kBlsAggSignXFieldNumber = 13;
  const ::std::string& bls_agg_sign_x() const;
  void set_bls_agg_sign_x(const ::std::string& value);
  #if LANG_CXX11
  void set_bls_agg_sign_x(::std::string&& value);
  #endif
  void set_bls_agg_sign_x(const char* value);
  void set_bls_agg_sign_x(const void* value, size_t size);
  ::std::string* mutable_bls_agg_sign_x();
  ::std::string* release_bls_agg_sign_x();
  void set_allocated_bls_agg_sign_x(::std::string* bls_agg_sign_x);

  // optional bytes bls_agg_sign_y = 14;
  bool has_bls_agg_sign_y() const;
  void clear_bls_agg_sign_y();
  static const int kBlsAggSignYFieldNumber = 14;
  const ::std::string& bls_agg_sign_y() const;
  void set_bls_agg_sign_y(const ::std::string& value);
  #if LANG_CXX11
  void set_bls_agg_sign_y(::std::string&& value);
  #endif
  void set_bls_agg_sign_y(const char* value);
  void set_bls_agg_sign_y(const void* value, size_t size);
  ::std::string* mutable_bls_agg_sign_y();
  ::std::string* release_bls_agg_sign_y();
  void set_allocated_bls_agg_sign_y(::std::string* bls_agg_sign_y);

  // optional uint32 network_id = 1;
  bool has_network_id() const;
  void clear_network_id();
  static const int kNetworkIdFieldNumber = 1;
  ::google::protobuf::uint32 network_id() const;
  void set_network_id(::google::protobuf::uint32 value);

  // optional uint32 pool_index = 2;
  bool has_pool_index() const;
  void clear_pool_index();
  static const int kPoolIndexFieldNumber = 2;
  ::google::protobuf::uint32 pool_index() const;
  void set_pool_index(::google::protobuf::uint32 value);

  // optional uint64 height = 6;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // optional uint64 consistency_random = 7;
  bool has_consistency_random() const;
  void clear_consistency_random();
  static const int kConsistencyRandomFieldNumber = 7;
  ::google::protobuf::uint64 consistency_random() const;
  void set_consistency_random(::google::protobuf::uint64 value);

  // optional uint64 electblock_height = 8;
  bool has_electblock_height() const;
  void clear_electblock_height();
  static const int kElectblockHeightFieldNumber = 8;
  ::google::protobuf::uint64 electblock_height() const;
  void set_electblock_height(::google::protobuf::uint64 value);

  // optional uint64 timestamp = 11;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 11;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional uint64 timeblock_height = 12;
  bool has_timeblock_height() const;
  void clear_timeblock_height();
  static const int kTimeblockHeightFieldNumber = 12;
  ::google::protobuf::uint64 timeblock_height() const;
  void set_timeblock_height(::google::protobuf::uint64 value);

  // optional uint32 version = 5;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.Block)
 private:
  void set_has_network_id();
  void clear_has_network_id();
  void set_has_pool_index();
  void clear_has_pool_index();
  void set_has_prehash();
  void clear_has_prehash();
  void set_has_hash();
  void clear_has_hash();
  void set_has_version();
  void clear_has_version();
  void set_has_height();
  void clear_has_height();
  void set_has_consistency_random();
  void clear_has_consistency_random();
  void set_has_electblock_height();
  void clear_has_electblock_height();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_timeblock_height();
  void clear_has_timeblock_height();
  void set_has_bls_agg_sign_x();
  void clear_has_bls_agg_sign_x();
  void set_has_bls_agg_sign_y();
  void clear_has_bls_agg_sign_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bitmap_;
  ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TxInfo > tx_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > commit_bitmap_;
  ::google::protobuf::internal::ArenaStringPtr prehash_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr bls_agg_sign_x_;
  ::google::protobuf::internal::ArenaStringPtr bls_agg_sign_y_;
  ::google::protobuf::uint32 network_id_;
  ::google::protobuf::uint32 pool_index_;
  ::google::protobuf::uint64 height_;
  ::google::protobuf::uint64 consistency_random_;
  ::google::protobuf::uint64 electblock_height_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 timeblock_height_;
  ::google::protobuf::uint32 version_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TbftPrepareTransactionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.TbftPrepareTransactionInfo) */ {
 public:
  TbftPrepareTransactionInfo();
  virtual ~TbftPrepareTransactionInfo();

  TbftPrepareTransactionInfo(const TbftPrepareTransactionInfo& from);

  inline TbftPrepareTransactionInfo& operator=(const TbftPrepareTransactionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TbftPrepareTransactionInfo(TbftPrepareTransactionInfo&& from) noexcept
    : TbftPrepareTransactionInfo() {
    *this = ::std::move(from);
  }

  inline TbftPrepareTransactionInfo& operator=(TbftPrepareTransactionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TbftPrepareTransactionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TbftPrepareTransactionInfo* internal_default_instance() {
    return reinterpret_cast<const TbftPrepareTransactionInfo*>(
               &_TbftPrepareTransactionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TbftPrepareTransactionInfo* other);
  friend void swap(TbftPrepareTransactionInfo& a, TbftPrepareTransactionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TbftPrepareTransactionInfo* New() const final {
    return CreateMaybeMessage<TbftPrepareTransactionInfo>(NULL);
  }

  TbftPrepareTransactionInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TbftPrepareTransactionInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TbftPrepareTransactionInfo& from);
  void MergeFrom(const TbftPrepareTransactionInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TbftPrepareTransactionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes gid = 1;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 1;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_gid(::std::string&& value);
  #endif
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // optional bytes tx_hash = 2;
  bool has_tx_hash() const;
  void clear_tx_hash();
  static const int kTxHashFieldNumber = 2;
  const ::std::string& tx_hash() const;
  void set_tx_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_hash(::std::string&& value);
  #endif
  void set_tx_hash(const char* value);
  void set_tx_hash(const void* value, size_t size);
  ::std::string* mutable_tx_hash();
  ::std::string* release_tx_hash();
  void set_allocated_tx_hash(::std::string* tx_hash);

  // optional bytes address = 3;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional uint64 balance = 4;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 4;
  ::google::protobuf::uint64 balance() const;
  void set_balance(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.TbftPrepareTransactionInfo)
 private:
  void set_has_gid();
  void clear_has_gid();
  void set_has_tx_hash();
  void clear_has_tx_hash();
  void set_has_address();
  void clear_has_address();
  void set_has_balance();
  void clear_has_balance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  ::google::protobuf::internal::ArenaStringPtr tx_hash_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::uint64 balance_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TbftLeaderPrepare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.TbftLeaderPrepare) */ {
 public:
  TbftLeaderPrepare();
  virtual ~TbftLeaderPrepare();

  TbftLeaderPrepare(const TbftLeaderPrepare& from);

  inline TbftLeaderPrepare& operator=(const TbftLeaderPrepare& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TbftLeaderPrepare(TbftLeaderPrepare&& from) noexcept
    : TbftLeaderPrepare() {
    *this = ::std::move(from);
  }

  inline TbftLeaderPrepare& operator=(TbftLeaderPrepare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TbftLeaderPrepare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TbftLeaderPrepare* internal_default_instance() {
    return reinterpret_cast<const TbftLeaderPrepare*>(
               &_TbftLeaderPrepare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TbftLeaderPrepare* other);
  friend void swap(TbftLeaderPrepare& a, TbftLeaderPrepare& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TbftLeaderPrepare* New() const final {
    return CreateMaybeMessage<TbftLeaderPrepare>(NULL);
  }

  TbftLeaderPrepare* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TbftLeaderPrepare>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TbftLeaderPrepare& from);
  void MergeFrom(const TbftLeaderPrepare& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TbftLeaderPrepare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tenon.bft.protobuf.TbftPrepareTransactionInfo prepare_txs = 1;
  int prepare_txs_size() const;
  void clear_prepare_txs();
  static const int kPrepareTxsFieldNumber = 1;
  ::tenon::bft::protobuf::TbftPrepareTransactionInfo* mutable_prepare_txs(int index);
  ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TbftPrepareTransactionInfo >*
      mutable_prepare_txs();
  const ::tenon::bft::protobuf::TbftPrepareTransactionInfo& prepare_txs(int index) const;
  ::tenon::bft::protobuf::TbftPrepareTransactionInfo* add_prepare_txs();
  const ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TbftPrepareTransactionInfo >&
      prepare_txs() const;

  // optional bytes prepare_hash = 2;
  bool has_prepare_hash() const;
  void clear_prepare_hash();
  static const int kPrepareHashFieldNumber = 2;
  const ::std::string& prepare_hash() const;
  void set_prepare_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_prepare_hash(::std::string&& value);
  #endif
  void set_prepare_hash(const char* value);
  void set_prepare_hash(const void* value, size_t size);
  ::std::string* mutable_prepare_hash();
  ::std::string* release_prepare_hash();
  void set_allocated_prepare_hash(::std::string* prepare_hash);

  // optional bytes prepare_final_hash = 3;
  bool has_prepare_final_hash() const;
  void clear_prepare_final_hash();
  static const int kPrepareFinalHashFieldNumber = 3;
  const ::std::string& prepare_final_hash() const;
  void set_prepare_final_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_prepare_final_hash(::std::string&& value);
  #endif
  void set_prepare_final_hash(const char* value);
  void set_prepare_final_hash(const void* value, size_t size);
  ::std::string* mutable_prepare_final_hash();
  ::std::string* release_prepare_final_hash();
  void set_allocated_prepare_final_hash(::std::string* prepare_final_hash);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.TbftLeaderPrepare)
 private:
  void set_has_prepare_hash();
  void clear_has_prepare_hash();
  void set_has_prepare_final_hash();
  void clear_has_prepare_final_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TbftPrepareTransactionInfo > prepare_txs_;
  ::google::protobuf::internal::ArenaStringPtr prepare_hash_;
  ::google::protobuf::internal::ArenaStringPtr prepare_final_hash_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxPrepareItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.TxPrepareItem) */ {
 public:
  TxPrepareItem();
  virtual ~TxPrepareItem();

  TxPrepareItem(const TxPrepareItem& from);

  inline TxPrepareItem& operator=(const TxPrepareItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxPrepareItem(TxPrepareItem&& from) noexcept
    : TxPrepareItem() {
    *this = ::std::move(from);
  }

  inline TxPrepareItem& operator=(TxPrepareItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxPrepareItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxPrepareItem* internal_default_instance() {
    return reinterpret_cast<const TxPrepareItem*>(
               &_TxPrepareItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TxPrepareItem* other);
  friend void swap(TxPrepareItem& a, TxPrepareItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxPrepareItem* New() const final {
    return CreateMaybeMessage<TxPrepareItem>(NULL);
  }

  TxPrepareItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxPrepareItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxPrepareItem& from);
  void MergeFrom(const TxPrepareItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxPrepareItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes acc_addr = 1;
  bool has_acc_addr() const;
  void clear_acc_addr();
  static const int kAccAddrFieldNumber = 1;
  const ::std::string& acc_addr() const;
  void set_acc_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_acc_addr(::std::string&& value);
  #endif
  void set_acc_addr(const char* value);
  void set_acc_addr(const void* value, size_t size);
  ::std::string* mutable_acc_addr();
  ::std::string* release_acc_addr();
  void set_allocated_acc_addr(::std::string* acc_addr);

  // optional bytes gid = 2;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 2;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_gid(::std::string&& value);
  #endif
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.TxPrepareItem)
 private:
  void set_has_acc_addr();
  void clear_has_acc_addr();
  void set_has_gid();
  void clear_has_gid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr acc_addr_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaderTxPrepare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.LeaderTxPrepare) */ {
 public:
  LeaderTxPrepare();
  virtual ~LeaderTxPrepare();

  LeaderTxPrepare(const LeaderTxPrepare& from);

  inline LeaderTxPrepare& operator=(const LeaderTxPrepare& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaderTxPrepare(LeaderTxPrepare&& from) noexcept
    : LeaderTxPrepare() {
    *this = ::std::move(from);
  }

  inline LeaderTxPrepare& operator=(LeaderTxPrepare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderTxPrepare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderTxPrepare* internal_default_instance() {
    return reinterpret_cast<const LeaderTxPrepare*>(
               &_LeaderTxPrepare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LeaderTxPrepare* other);
  friend void swap(LeaderTxPrepare& a, LeaderTxPrepare& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaderTxPrepare* New() const final {
    return CreateMaybeMessage<LeaderTxPrepare>(NULL);
  }

  LeaderTxPrepare* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeaderTxPrepare>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LeaderTxPrepare& from);
  void MergeFrom(const LeaderTxPrepare& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderTxPrepare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tenon.bft.protobuf.Block block = 1;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  private:
  const ::tenon::bft::protobuf::Block& _internal_block() const;
  public:
  const ::tenon::bft::protobuf::Block& block() const;
  ::tenon::bft::protobuf::Block* release_block();
  ::tenon::bft::protobuf::Block* mutable_block();
  void set_allocated_block(::tenon::bft::protobuf::Block* block);

  // optional .tenon.bft.protobuf.TbftLeaderPrepare prepare = 2;
  bool has_prepare() const;
  void clear_prepare();
  static const int kPrepareFieldNumber = 2;
  private:
  const ::tenon::bft::protobuf::TbftLeaderPrepare& _internal_prepare() const;
  public:
  const ::tenon::bft::protobuf::TbftLeaderPrepare& prepare() const;
  ::tenon::bft::protobuf::TbftLeaderPrepare* release_prepare();
  ::tenon::bft::protobuf::TbftLeaderPrepare* mutable_prepare();
  void set_allocated_prepare(::tenon::bft::protobuf::TbftLeaderPrepare* prepare);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.LeaderTxPrepare)
 private:
  void set_has_block();
  void clear_has_block();
  void set_has_prepare();
  void clear_has_prepare();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::tenon::bft::protobuf::Block* block_;
  ::tenon::bft::protobuf::TbftLeaderPrepare* prepare_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupTxPrepare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.BackupTxPrepare) */ {
 public:
  BackupTxPrepare();
  virtual ~BackupTxPrepare();

  BackupTxPrepare(const BackupTxPrepare& from);

  inline BackupTxPrepare& operator=(const BackupTxPrepare& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BackupTxPrepare(BackupTxPrepare&& from) noexcept
    : BackupTxPrepare() {
    *this = ::std::move(from);
  }

  inline BackupTxPrepare& operator=(BackupTxPrepare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupTxPrepare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackupTxPrepare* internal_default_instance() {
    return reinterpret_cast<const BackupTxPrepare*>(
               &_BackupTxPrepare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(BackupTxPrepare* other);
  friend void swap(BackupTxPrepare& a, BackupTxPrepare& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BackupTxPrepare* New() const final {
    return CreateMaybeMessage<BackupTxPrepare>(NULL);
  }

  BackupTxPrepare* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BackupTxPrepare>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BackupTxPrepare& from);
  void MergeFrom(const BackupTxPrepare& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackupTxPrepare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.BackupTxPrepare)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 status_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaderTxPreCommit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.LeaderTxPreCommit) */ {
 public:
  LeaderTxPreCommit();
  virtual ~LeaderTxPreCommit();

  LeaderTxPreCommit(const LeaderTxPreCommit& from);

  inline LeaderTxPreCommit& operator=(const LeaderTxPreCommit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaderTxPreCommit(LeaderTxPreCommit&& from) noexcept
    : LeaderTxPreCommit() {
    *this = ::std::move(from);
  }

  inline LeaderTxPreCommit& operator=(LeaderTxPreCommit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderTxPreCommit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderTxPreCommit* internal_default_instance() {
    return reinterpret_cast<const LeaderTxPreCommit*>(
               &_LeaderTxPreCommit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(LeaderTxPreCommit* other);
  friend void swap(LeaderTxPreCommit& a, LeaderTxPreCommit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaderTxPreCommit* New() const final {
    return CreateMaybeMessage<LeaderTxPreCommit>(NULL);
  }

  LeaderTxPreCommit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeaderTxPreCommit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LeaderTxPreCommit& from);
  void MergeFrom(const LeaderTxPreCommit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderTxPreCommit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.LeaderTxPreCommit)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 status_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupTxPreCommit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.BackupTxPreCommit) */ {
 public:
  BackupTxPreCommit();
  virtual ~BackupTxPreCommit();

  BackupTxPreCommit(const BackupTxPreCommit& from);

  inline BackupTxPreCommit& operator=(const BackupTxPreCommit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BackupTxPreCommit(BackupTxPreCommit&& from) noexcept
    : BackupTxPreCommit() {
    *this = ::std::move(from);
  }

  inline BackupTxPreCommit& operator=(BackupTxPreCommit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupTxPreCommit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackupTxPreCommit* internal_default_instance() {
    return reinterpret_cast<const BackupTxPreCommit*>(
               &_BackupTxPreCommit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(BackupTxPreCommit* other);
  friend void swap(BackupTxPreCommit& a, BackupTxPreCommit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BackupTxPreCommit* New() const final {
    return CreateMaybeMessage<BackupTxPreCommit>(NULL);
  }

  BackupTxPreCommit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BackupTxPreCommit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BackupTxPreCommit& from);
  void MergeFrom(const BackupTxPreCommit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackupTxPreCommit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.BackupTxPreCommit)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 status_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaderTxCommit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.LeaderTxCommit) */ {
 public:
  LeaderTxCommit();
  virtual ~LeaderTxCommit();

  LeaderTxCommit(const LeaderTxCommit& from);

  inline LeaderTxCommit& operator=(const LeaderTxCommit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaderTxCommit(LeaderTxCommit&& from) noexcept
    : LeaderTxCommit() {
    *this = ::std::move(from);
  }

  inline LeaderTxCommit& operator=(LeaderTxCommit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderTxCommit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderTxCommit* internal_default_instance() {
    return reinterpret_cast<const LeaderTxCommit*>(
               &_LeaderTxCommit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(LeaderTxCommit* other);
  friend void swap(LeaderTxCommit& a, LeaderTxCommit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaderTxCommit* New() const final {
    return CreateMaybeMessage<LeaderTxCommit>(NULL);
  }

  LeaderTxCommit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeaderTxCommit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LeaderTxCommit& from);
  void MergeFrom(const LeaderTxCommit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderTxCommit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.LeaderTxCommit)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 status_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ToAccountTx : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.ToAccountTx) */ {
 public:
  ToAccountTx();
  virtual ~ToAccountTx();

  ToAccountTx(const ToAccountTx& from);

  inline ToAccountTx& operator=(const ToAccountTx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ToAccountTx(ToAccountTx&& from) noexcept
    : ToAccountTx() {
    *this = ::std::move(from);
  }

  inline ToAccountTx& operator=(ToAccountTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToAccountTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToAccountTx* internal_default_instance() {
    return reinterpret_cast<const ToAccountTx*>(
               &_ToAccountTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ToAccountTx* other);
  friend void swap(ToAccountTx& a, ToAccountTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ToAccountTx* New() const final {
    return CreateMaybeMessage<ToAccountTx>(NULL);
  }

  ToAccountTx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ToAccountTx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ToAccountTx& from);
  void MergeFrom(const ToAccountTx& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToAccountTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tenon.bft.protobuf.Block block = 1;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  private:
  const ::tenon::bft::protobuf::Block& _internal_block() const;
  public:
  const ::tenon::bft::protobuf::Block& block() const;
  ::tenon::bft::protobuf::Block* release_block();
  ::tenon::bft::protobuf::Block* mutable_block();
  void set_allocated_block(::tenon::bft::protobuf::Block* block);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.ToAccountTx)
 private:
  void set_has_block();
  void clear_has_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::tenon::bft::protobuf::Block* block_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxBft : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.TxBft) */ {
 public:
  TxBft();
  virtual ~TxBft();

  TxBft(const TxBft& from);

  inline TxBft& operator=(const TxBft& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxBft(TxBft&& from) noexcept
    : TxBft() {
    *this = ::std::move(from);
  }

  inline TxBft& operator=(TxBft&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxBft& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxBft* internal_default_instance() {
    return reinterpret_cast<const TxBft*>(
               &_TxBft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(TxBft* other);
  friend void swap(TxBft& a, TxBft& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxBft* New() const final {
    return CreateMaybeMessage<TxBft>(NULL);
  }

  TxBft* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxBft>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxBft& from);
  void MergeFrom(const TxBft& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxBft* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tenon.bft.protobuf.TxInfo new_tx = 1;
  bool has_new_tx() const;
  void clear_new_tx();
  static const int kNewTxFieldNumber = 1;
  private:
  const ::tenon::bft::protobuf::TxInfo& _internal_new_tx() const;
  public:
  const ::tenon::bft::protobuf::TxInfo& new_tx() const;
  ::tenon::bft::protobuf::TxInfo* release_new_tx();
  ::tenon::bft::protobuf::TxInfo* mutable_new_tx();
  void set_allocated_new_tx(::tenon::bft::protobuf::TxInfo* new_tx);

  // optional .tenon.bft.protobuf.ToAccountTx to_tx = 2;
  bool has_to_tx() const;
  void clear_to_tx();
  static const int kToTxFieldNumber = 2;
  private:
  const ::tenon::bft::protobuf::ToAccountTx& _internal_to_tx() const;
  public:
  const ::tenon::bft::protobuf::ToAccountTx& to_tx() const;
  ::tenon::bft::protobuf::ToAccountTx* release_to_tx();
  ::tenon::bft::protobuf::ToAccountTx* mutable_to_tx();
  void set_allocated_to_tx(::tenon::bft::protobuf::ToAccountTx* to_tx);

  // optional .tenon.bft.protobuf.LeaderTxPrepare ltx_prepare = 3;
  bool has_ltx_prepare() const;
  void clear_ltx_prepare();
  static const int kLtxPrepareFieldNumber = 3;
  private:
  const ::tenon::bft::protobuf::LeaderTxPrepare& _internal_ltx_prepare() const;
  public:
  const ::tenon::bft::protobuf::LeaderTxPrepare& ltx_prepare() const;
  ::tenon::bft::protobuf::LeaderTxPrepare* release_ltx_prepare();
  ::tenon::bft::protobuf::LeaderTxPrepare* mutable_ltx_prepare();
  void set_allocated_ltx_prepare(::tenon::bft::protobuf::LeaderTxPrepare* ltx_prepare);

  // optional .tenon.bft.protobuf.BackupTxPrepare btx_prepare = 4;
  bool has_btx_prepare() const;
  void clear_btx_prepare();
  static const int kBtxPrepareFieldNumber = 4;
  private:
  const ::tenon::bft::protobuf::BackupTxPrepare& _internal_btx_prepare() const;
  public:
  const ::tenon::bft::protobuf::BackupTxPrepare& btx_prepare() const;
  ::tenon::bft::protobuf::BackupTxPrepare* release_btx_prepare();
  ::tenon::bft::protobuf::BackupTxPrepare* mutable_btx_prepare();
  void set_allocated_btx_prepare(::tenon::bft::protobuf::BackupTxPrepare* btx_prepare);

  // optional .tenon.bft.protobuf.LeaderTxPreCommit ltx_precommit = 5;
  bool has_ltx_precommit() const;
  void clear_ltx_precommit();
  static const int kLtxPrecommitFieldNumber = 5;
  private:
  const ::tenon::bft::protobuf::LeaderTxPreCommit& _internal_ltx_precommit() const;
  public:
  const ::tenon::bft::protobuf::LeaderTxPreCommit& ltx_precommit() const;
  ::tenon::bft::protobuf::LeaderTxPreCommit* release_ltx_precommit();
  ::tenon::bft::protobuf::LeaderTxPreCommit* mutable_ltx_precommit();
  void set_allocated_ltx_precommit(::tenon::bft::protobuf::LeaderTxPreCommit* ltx_precommit);

  // optional .tenon.bft.protobuf.BackupTxPreCommit btx_precommit = 6;
  bool has_btx_precommit() const;
  void clear_btx_precommit();
  static const int kBtxPrecommitFieldNumber = 6;
  private:
  const ::tenon::bft::protobuf::BackupTxPreCommit& _internal_btx_precommit() const;
  public:
  const ::tenon::bft::protobuf::BackupTxPreCommit& btx_precommit() const;
  ::tenon::bft::protobuf::BackupTxPreCommit* release_btx_precommit();
  ::tenon::bft::protobuf::BackupTxPreCommit* mutable_btx_precommit();
  void set_allocated_btx_precommit(::tenon::bft::protobuf::BackupTxPreCommit* btx_precommit);

  // optional .tenon.bft.protobuf.LeaderTxCommit ltx_commit = 7;
  bool has_ltx_commit() const;
  void clear_ltx_commit();
  static const int kLtxCommitFieldNumber = 7;
  private:
  const ::tenon::bft::protobuf::LeaderTxCommit& _internal_ltx_commit() const;
  public:
  const ::tenon::bft::protobuf::LeaderTxCommit& ltx_commit() const;
  ::tenon::bft::protobuf::LeaderTxCommit* release_ltx_commit();
  ::tenon::bft::protobuf::LeaderTxCommit* mutable_ltx_commit();
  void set_allocated_ltx_commit(::tenon::bft::protobuf::LeaderTxCommit* ltx_commit);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.TxBft)
 private:
  void set_has_new_tx();
  void clear_has_new_tx();
  void set_has_to_tx();
  void clear_has_to_tx();
  void set_has_ltx_prepare();
  void clear_has_ltx_prepare();
  void set_has_btx_prepare();
  void clear_has_btx_prepare();
  void set_has_ltx_precommit();
  void clear_has_ltx_precommit();
  void set_has_btx_precommit();
  void clear_has_btx_precommit();
  void set_has_ltx_commit();
  void clear_has_ltx_commit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::tenon::bft::protobuf::TxInfo* new_tx_;
  ::tenon::bft::protobuf::ToAccountTx* to_tx_;
  ::tenon::bft::protobuf::LeaderTxPrepare* ltx_prepare_;
  ::tenon::bft::protobuf::BackupTxPrepare* btx_prepare_;
  ::tenon::bft::protobuf::LeaderTxPreCommit* ltx_precommit_;
  ::tenon::bft::protobuf::BackupTxPreCommit* btx_precommit_;
  ::tenon::bft::protobuf::LeaderTxCommit* ltx_commit_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BftMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tenon.bft.protobuf.BftMessage) */ {
 public:
  BftMessage();
  virtual ~BftMessage();

  BftMessage(const BftMessage& from);

  inline BftMessage& operator=(const BftMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BftMessage(BftMessage&& from) noexcept
    : BftMessage() {
    *this = ::std::move(from);
  }

  inline BftMessage& operator=(BftMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BftMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BftMessage* internal_default_instance() {
    return reinterpret_cast<const BftMessage*>(
               &_BftMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(BftMessage* other);
  friend void swap(BftMessage& a, BftMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BftMessage* New() const final {
    return CreateMaybeMessage<BftMessage>(NULL);
  }

  BftMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BftMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BftMessage& from);
  void MergeFrom(const BftMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BftMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 bitmap = 7;
  int bitmap_size() const;
  void clear_bitmap();
  static const int kBitmapFieldNumber = 7;
  ::google::protobuf::uint64 bitmap(int index) const;
  void set_bitmap(int index, ::google::protobuf::uint64 value);
  void add_bitmap(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bitmap() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bitmap();

  // repeated uint64 commit_bitmap = 22;
  int commit_bitmap_size() const;
  void clear_commit_bitmap();
  static const int kCommitBitmapFieldNumber = 22;
  ::google::protobuf::uint64 commit_bitmap(int index) const;
  void set_commit_bitmap(int index, ::google::protobuf::uint64 value);
  void add_commit_bitmap(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      commit_bitmap() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_commit_bitmap();

  // optional bytes gid = 1;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 1;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_gid(::std::string&& value);
  #endif
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // optional bytes sign_challenge = 5;
  bool has_sign_challenge() const;
  void clear_sign_challenge();
  static const int kSignChallengeFieldNumber = 5;
  const ::std::string& sign_challenge() const;
  void set_sign_challenge(const ::std::string& value);
  #if LANG_CXX11
  void set_sign_challenge(::std::string&& value);
  #endif
  void set_sign_challenge(const char* value);
  void set_sign_challenge(const void* value, size_t size);
  ::std::string* mutable_sign_challenge();
  ::std::string* release_sign_challenge();
  void set_allocated_sign_challenge(::std::string* sign_challenge);

  // optional bytes sign_response = 6;
  bool has_sign_response() const;
  void clear_sign_response();
  static const int kSignResponseFieldNumber = 6;
  const ::std::string& sign_response() const;
  void set_sign_response(const ::std::string& value);
  #if LANG_CXX11
  void set_sign_response(::std::string&& value);
  #endif
  void set_sign_response(const char* value);
  void set_sign_response(const void* value, size_t size);
  ::std::string* mutable_sign_response();
  ::std::string* release_sign_response();
  void set_allocated_sign_response(::std::string* sign_response);

  // optional bytes data = 11;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 11;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional bytes prepare_hash = 12;
  bool has_prepare_hash() const;
  void clear_prepare_hash();
  static const int kPrepareHashFieldNumber = 12;
  const ::std::string& prepare_hash() const;
  void set_prepare_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_prepare_hash(::std::string&& value);
  #endif
  void set_prepare_hash(const char* value);
  void set_prepare_hash(const void* value, size_t size);
  ::std::string* mutable_prepare_hash();
  ::std::string* release_prepare_hash();
  void set_allocated_prepare_hash(::std::string* prepare_hash);

  // optional bytes node_ip = 13;
  bool has_node_ip() const;
  void clear_node_ip();
  static const int kNodeIpFieldNumber = 13;
  const ::std::string& node_ip() const;
  void set_node_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_node_ip(::std::string&& value);
  #endif
  void set_node_ip(const char* value);
  void set_node_ip(const void* value, size_t size);
  ::std::string* mutable_node_ip();
  ::std::string* release_node_ip();
  void set_allocated_node_ip(::std::string* node_ip);

  // optional bytes pubkey = 17;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 17;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional bytes backup_enc_data = 18;
  bool has_backup_enc_data() const;
  void clear_backup_enc_data();
  static const int kBackupEncDataFieldNumber = 18;
  const ::std::string& backup_enc_data() const;
  void set_backup_enc_data(const ::std::string& value);
  #if LANG_CXX11
  void set_backup_enc_data(::std::string&& value);
  #endif
  void set_backup_enc_data(const char* value);
  void set_backup_enc_data(const void* value, size_t size);
  ::std::string* mutable_backup_enc_data();
  ::std::string* release_backup_enc_data();
  void set_allocated_backup_enc_data(::std::string* backup_enc_data);

  // optional bytes bls_sign_x = 20;
  bool has_bls_sign_x() const;
  void clear_bls_sign_x();
  static const int kBlsSignXFieldNumber = 20;
  const ::std::string& bls_sign_x() const;
  void set_bls_sign_x(const ::std::string& value);
  #if LANG_CXX11
  void set_bls_sign_x(::std::string&& value);
  #endif
  void set_bls_sign_x(const char* value);
  void set_bls_sign_x(const void* value, size_t size);
  ::std::string* mutable_bls_sign_x();
  ::std::string* release_bls_sign_x();
  void set_allocated_bls_sign_x(::std::string* bls_sign_x);

  // optional bytes bls_sign_y = 21;
  bool has_bls_sign_y() const;
  void clear_bls_sign_y();
  static const int kBlsSignYFieldNumber = 21;
  const ::std::string& bls_sign_y() const;
  void set_bls_sign_y(const ::std::string& value);
  #if LANG_CXX11
  void set_bls_sign_y(::std::string&& value);
  #endif
  void set_bls_sign_y(const char* value);
  void set_bls_sign_y(const void* value, size_t size);
  ::std::string* mutable_bls_sign_y();
  ::std::string* release_bls_sign_y();
  void set_allocated_bls_sign_y(::std::string* bls_sign_y);

  // optional int32 bft_step = 2;
  bool has_bft_step() const;
  void clear_bft_step();
  static const int kBftStepFieldNumber = 2;
  ::google::protobuf::int32 bft_step() const;
  void set_bft_step(::google::protobuf::int32 value);

  // optional uint32 net_id = 4;
  bool has_net_id() const;
  void clear_net_id();
  static const int kNetIdFieldNumber = 4;
  ::google::protobuf::uint32 net_id() const;
  void set_net_id(::google::protobuf::uint32 value);

  // optional bool leader = 3;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 3;
  bool leader() const;
  void set_leader(bool value);

  // optional bool agree = 8;
  bool has_agree() const;
  void clear_agree();
  static const int kAgreeFieldNumber = 8;
  bool agree() const;
  void set_agree(bool value);

  // optional uint32 pool_index = 9;
  bool has_pool_index() const;
  void clear_pool_index();
  static const int kPoolIndexFieldNumber = 9;
  ::google::protobuf::uint32 pool_index() const;
  void set_pool_index(::google::protobuf::uint32 value);

  // optional int32 error = 10;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 10;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // optional uint32 node_port = 14;
  bool has_node_port() const;
  void clear_node_port();
  static const int kNodePortFieldNumber = 14;
  ::google::protobuf::uint32 node_port() const;
  void set_node_port(::google::protobuf::uint32 value);

  // optional uint32 epoch = 15;
  bool has_epoch() const;
  void clear_epoch();
  static const int kEpochFieldNumber = 15;
  ::google::protobuf::uint32 epoch() const;
  void set_epoch(::google::protobuf::uint32 value);

  // optional uint32 member_index = 16;
  bool has_member_index() const;
  void clear_member_index();
  static const int kMemberIndexFieldNumber = 16;
  ::google::protobuf::uint32 member_index() const;
  void set_member_index(::google::protobuf::uint32 value);

  // optional uint64 elect_height = 19;
  bool has_elect_height() const;
  void clear_elect_height();
  static const int kElectHeightFieldNumber = 19;
  ::google::protobuf::uint64 elect_height() const;
  void set_elect_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tenon.bft.protobuf.BftMessage)
 private:
  void set_has_gid();
  void clear_has_gid();
  void set_has_bft_step();
  void clear_has_bft_step();
  void set_has_leader();
  void clear_has_leader();
  void set_has_net_id();
  void clear_has_net_id();
  void set_has_sign_challenge();
  void clear_has_sign_challenge();
  void set_has_sign_response();
  void clear_has_sign_response();
  void set_has_agree();
  void clear_has_agree();
  void set_has_pool_index();
  void clear_has_pool_index();
  void set_has_error();
  void clear_has_error();
  void set_has_data();
  void clear_has_data();
  void set_has_prepare_hash();
  void clear_has_prepare_hash();
  void set_has_node_ip();
  void clear_has_node_ip();
  void set_has_node_port();
  void clear_has_node_port();
  void set_has_epoch();
  void clear_has_epoch();
  void set_has_member_index();
  void clear_has_member_index();
  void set_has_pubkey();
  void clear_has_pubkey();
  void set_has_backup_enc_data();
  void clear_has_backup_enc_data();
  void set_has_elect_height();
  void clear_has_elect_height();
  void set_has_bls_sign_x();
  void clear_has_bls_sign_x();
  void set_has_bls_sign_y();
  void clear_has_bls_sign_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bitmap_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > commit_bitmap_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  ::google::protobuf::internal::ArenaStringPtr sign_challenge_;
  ::google::protobuf::internal::ArenaStringPtr sign_response_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr prepare_hash_;
  ::google::protobuf::internal::ArenaStringPtr node_ip_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr backup_enc_data_;
  ::google::protobuf::internal::ArenaStringPtr bls_sign_x_;
  ::google::protobuf::internal::ArenaStringPtr bls_sign_y_;
  ::google::protobuf::int32 bft_step_;
  ::google::protobuf::uint32 net_id_;
  bool leader_;
  bool agree_;
  ::google::protobuf::uint32 pool_index_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::uint32 node_port_;
  ::google::protobuf::uint32 epoch_;
  ::google::protobuf::uint32 member_index_;
  ::google::protobuf::uint64 elect_height_;
  friend struct ::protobuf_bft_2fproto_2fbft_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountAttributes

// optional bytes key = 1;
inline bool AccountAttributes::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountAttributes::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountAttributes::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountAttributes::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& AccountAttributes::key() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.AccountAttributes.key)
  return key_.GetNoArena();
}
inline void AccountAttributes::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.AccountAttributes.key)
}
#if LANG_CXX11
inline void AccountAttributes::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.AccountAttributes.key)
}
#endif
inline void AccountAttributes::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.AccountAttributes.key)
}
inline void AccountAttributes::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.AccountAttributes.key)
}
inline ::std::string* AccountAttributes::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.AccountAttributes.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountAttributes::release_key() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.AccountAttributes.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountAttributes::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.AccountAttributes.key)
}

// optional bytes value = 2;
inline bool AccountAttributes::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountAttributes::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountAttributes::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountAttributes::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& AccountAttributes::value() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.AccountAttributes.value)
  return value_.GetNoArena();
}
inline void AccountAttributes::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.AccountAttributes.value)
}
#if LANG_CXX11
inline void AccountAttributes::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.AccountAttributes.value)
}
#endif
inline void AccountAttributes::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.AccountAttributes.value)
}
inline void AccountAttributes::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.AccountAttributes.value)
}
inline ::std::string* AccountAttributes::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.AccountAttributes.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountAttributes::release_value() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.AccountAttributes.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountAttributes::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.AccountAttributes.value)
}

// -------------------------------------------------------------------

// StorageItem

// optional bytes id = 1;
inline bool StorageItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageItem::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& StorageItem::id() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.StorageItem.id)
  return id_.GetNoArena();
}
inline void StorageItem::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.StorageItem.id)
}
#if LANG_CXX11
inline void StorageItem::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.StorageItem.id)
}
#endif
inline void StorageItem::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.StorageItem.id)
}
inline void StorageItem::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.StorageItem.id)
}
inline ::std::string* StorageItem::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.StorageItem.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItem::release_id() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.StorageItem.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItem::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.StorageItem.id)
}

// optional bytes key = 2;
inline bool StorageItem::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageItem::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageItem::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageItem::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& StorageItem::key() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.StorageItem.key)
  return key_.GetNoArena();
}
inline void StorageItem::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.StorageItem.key)
}
#if LANG_CXX11
inline void StorageItem::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.StorageItem.key)
}
#endif
inline void StorageItem::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.StorageItem.key)
}
inline void StorageItem::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.StorageItem.key)
}
inline ::std::string* StorageItem::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.StorageItem.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItem::release_key() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.StorageItem.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItem::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.StorageItem.key)
}

// optional bytes value = 3;
inline bool StorageItem::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StorageItem::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StorageItem::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StorageItem::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& StorageItem::value() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.StorageItem.value)
  return value_.GetNoArena();
}
inline void StorageItem::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.StorageItem.value)
}
#if LANG_CXX11
inline void StorageItem::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.StorageItem.value)
}
#endif
inline void StorageItem::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.StorageItem.value)
}
inline void StorageItem::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.StorageItem.value)
}
inline ::std::string* StorageItem::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.StorageItem.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageItem::release_value() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.StorageItem.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageItem::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.StorageItem.value)
}

// -------------------------------------------------------------------

// TransferItem

// optional bytes from = 1;
inline bool TransferItem::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferItem::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferItem::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferItem::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
inline const ::std::string& TransferItem::from() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TransferItem.from)
  return from_.GetNoArena();
}
inline void TransferItem::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TransferItem.from)
}
#if LANG_CXX11
inline void TransferItem::set_from(::std::string&& value) {
  set_has_from();
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TransferItem.from)
}
#endif
inline void TransferItem::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TransferItem.from)
}
inline void TransferItem::set_from(const void* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TransferItem.from)
}
inline ::std::string* TransferItem::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TransferItem.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferItem::release_from() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TransferItem.from)
  if (!has_from()) {
    return NULL;
  }
  clear_has_from();
  return from_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferItem::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TransferItem.from)
}

// optional bytes to = 2;
inline bool TransferItem::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferItem::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferItem::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferItem::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to();
}
inline const ::std::string& TransferItem::to() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TransferItem.to)
  return to_.GetNoArena();
}
inline void TransferItem::set_to(const ::std::string& value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TransferItem.to)
}
#if LANG_CXX11
inline void TransferItem::set_to(::std::string&& value) {
  set_has_to();
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TransferItem.to)
}
#endif
inline void TransferItem::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TransferItem.to)
}
inline void TransferItem::set_to(const void* value, size_t size) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TransferItem.to)
}
inline ::std::string* TransferItem::mutable_to() {
  set_has_to();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TransferItem.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferItem::release_to() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TransferItem.to)
  if (!has_to()) {
    return NULL;
  }
  clear_has_to();
  return to_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferItem::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    set_has_to();
  } else {
    clear_has_to();
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TransferItem.to)
}

// optional uint64 amount = 3;
inline bool TransferItem::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransferItem::set_has_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransferItem::clear_has_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransferItem::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 TransferItem::amount() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TransferItem.amount)
  return amount_;
}
inline void TransferItem::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TransferItem.amount)
}

// -------------------------------------------------------------------

// TxInfo

// optional uint32 version = 1;
inline bool TxInfo::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TxInfo::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TxInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TxInfo::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TxInfo::version() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.version)
  return version_;
}
inline void TxInfo::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.version)
}

// optional bytes gid = 2;
inline bool TxInfo::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxInfo::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxInfo::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxInfo::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& TxInfo::gid() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.gid)
  return gid_.GetNoArena();
}
inline void TxInfo::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.gid)
}
#if LANG_CXX11
inline void TxInfo::set_gid(::std::string&& value) {
  set_has_gid();
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TxInfo.gid)
}
#endif
inline void TxInfo::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TxInfo.gid)
}
inline void TxInfo::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TxInfo.gid)
}
inline ::std::string* TxInfo::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxInfo.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_gid() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxInfo.gid)
  if (!has_gid()) {
    return NULL;
  }
  clear_has_gid();
  return gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxInfo.gid)
}

// optional bytes from = 3;
inline bool TxInfo::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxInfo::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxInfo::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxInfo::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
inline const ::std::string& TxInfo::from() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.from)
  return from_.GetNoArena();
}
inline void TxInfo::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.from)
}
#if LANG_CXX11
inline void TxInfo::set_from(::std::string&& value) {
  set_has_from();
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TxInfo.from)
}
#endif
inline void TxInfo::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TxInfo.from)
}
inline void TxInfo::set_from(const void* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TxInfo.from)
}
inline ::std::string* TxInfo::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxInfo.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_from() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxInfo.from)
  if (!has_from()) {
    return NULL;
  }
  clear_has_from();
  return from_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxInfo.from)
}

// optional bytes from_pubkey = 4;
inline bool TxInfo::has_from_pubkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxInfo::set_has_from_pubkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxInfo::clear_has_from_pubkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxInfo::clear_from_pubkey() {
  from_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_pubkey();
}
inline const ::std::string& TxInfo::from_pubkey() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.from_pubkey)
  return from_pubkey_.GetNoArena();
}
inline void TxInfo::set_from_pubkey(const ::std::string& value) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.from_pubkey)
}
#if LANG_CXX11
inline void TxInfo::set_from_pubkey(::std::string&& value) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TxInfo.from_pubkey)
}
#endif
inline void TxInfo::set_from_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TxInfo.from_pubkey)
}
inline void TxInfo::set_from_pubkey(const void* value, size_t size) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TxInfo.from_pubkey)
}
inline ::std::string* TxInfo::mutable_from_pubkey() {
  set_has_from_pubkey();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxInfo.from_pubkey)
  return from_pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_from_pubkey() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxInfo.from_pubkey)
  if (!has_from_pubkey()) {
    return NULL;
  }
  clear_has_from_pubkey();
  return from_pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_from_pubkey(::std::string* from_pubkey) {
  if (from_pubkey != NULL) {
    set_has_from_pubkey();
  } else {
    clear_has_from_pubkey();
  }
  from_pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_pubkey);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxInfo.from_pubkey)
}

// optional bytes from_sign = 5;
inline bool TxInfo::has_from_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxInfo::set_has_from_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxInfo::clear_has_from_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxInfo::clear_from_sign() {
  from_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_sign();
}
inline const ::std::string& TxInfo::from_sign() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.from_sign)
  return from_sign_.GetNoArena();
}
inline void TxInfo::set_from_sign(const ::std::string& value) {
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.from_sign)
}
#if LANG_CXX11
inline void TxInfo::set_from_sign(::std::string&& value) {
  set_has_from_sign();
  from_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TxInfo.from_sign)
}
#endif
inline void TxInfo::set_from_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TxInfo.from_sign)
}
inline void TxInfo::set_from_sign(const void* value, size_t size) {
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TxInfo.from_sign)
}
inline ::std::string* TxInfo::mutable_from_sign() {
  set_has_from_sign();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxInfo.from_sign)
  return from_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_from_sign() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxInfo.from_sign)
  if (!has_from_sign()) {
    return NULL;
  }
  clear_has_from_sign();
  return from_sign_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_from_sign(::std::string* from_sign) {
  if (from_sign != NULL) {
    set_has_from_sign();
  } else {
    clear_has_from_sign();
  }
  from_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_sign);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxInfo.from_sign)
}

// optional bytes to = 6;
inline bool TxInfo::has_to() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxInfo::set_has_to() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxInfo::clear_has_to() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxInfo::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to();
}
inline const ::std::string& TxInfo::to() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.to)
  return to_.GetNoArena();
}
inline void TxInfo::set_to(const ::std::string& value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.to)
}
#if LANG_CXX11
inline void TxInfo::set_to(::std::string&& value) {
  set_has_to();
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TxInfo.to)
}
#endif
inline void TxInfo::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TxInfo.to)
}
inline void TxInfo::set_to(const void* value, size_t size) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TxInfo.to)
}
inline ::std::string* TxInfo::mutable_to() {
  set_has_to();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxInfo.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_to() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxInfo.to)
  if (!has_to()) {
    return NULL;
  }
  clear_has_to();
  return to_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    set_has_to();
  } else {
    clear_has_to();
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxInfo.to)
}

// optional uint64 amount = 7;
inline bool TxInfo::has_amount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TxInfo::set_has_amount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TxInfo::clear_has_amount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TxInfo::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 TxInfo::amount() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.amount)
  return amount_;
}
inline void TxInfo::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.amount)
}

// optional uint64 gas_limit = 8;
inline bool TxInfo::has_gas_limit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TxInfo::set_has_gas_limit() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TxInfo::clear_has_gas_limit() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TxInfo::clear_gas_limit() {
  gas_limit_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_limit();
}
inline ::google::protobuf::uint64 TxInfo::gas_limit() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.gas_limit)
  return gas_limit_;
}
inline void TxInfo::set_gas_limit(::google::protobuf::uint64 value) {
  set_has_gas_limit();
  gas_limit_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.gas_limit)
}

// optional uint64 gas_used = 9;
inline bool TxInfo::has_gas_used() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TxInfo::set_has_gas_used() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TxInfo::clear_has_gas_used() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TxInfo::clear_gas_used() {
  gas_used_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_used();
}
inline ::google::protobuf::uint64 TxInfo::gas_used() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.gas_used)
  return gas_used_;
}
inline void TxInfo::set_gas_used(::google::protobuf::uint64 value) {
  set_has_gas_used();
  gas_used_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.gas_used)
}

// optional uint64 gas_price = 10;
inline bool TxInfo::has_gas_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TxInfo::set_has_gas_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TxInfo::clear_has_gas_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TxInfo::clear_gas_price() {
  gas_price_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_price();
}
inline ::google::protobuf::uint64 TxInfo::gas_price() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.gas_price)
  return gas_price_;
}
inline void TxInfo::set_gas_price(::google::protobuf::uint64 value) {
  set_has_gas_price();
  gas_price_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.gas_price)
}

// optional uint64 balance = 11;
inline bool TxInfo::has_balance() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TxInfo::set_has_balance() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TxInfo::clear_has_balance() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TxInfo::clear_balance() {
  balance_ = GOOGLE_ULONGLONG(0);
  clear_has_balance();
}
inline ::google::protobuf::uint64 TxInfo::balance() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.balance)
  return balance_;
}
inline void TxInfo::set_balance(::google::protobuf::uint64 value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.balance)
}

// optional bool to_add = 12;
inline bool TxInfo::has_to_add() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TxInfo::set_has_to_add() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TxInfo::clear_has_to_add() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TxInfo::clear_to_add() {
  to_add_ = false;
  clear_has_to_add();
}
inline bool TxInfo::to_add() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.to_add)
  return to_add_;
}
inline void TxInfo::set_to_add(bool value) {
  set_has_to_add();
  to_add_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.to_add)
}

// optional uint32 type = 13;
inline bool TxInfo::has_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TxInfo::set_has_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TxInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TxInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TxInfo::type() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.type)
  return type_;
}
inline void TxInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.type)
}

// repeated .tenon.bft.protobuf.AccountAttributes attr = 14;
inline int TxInfo::attr_size() const {
  return attr_.size();
}
inline void TxInfo::clear_attr() {
  attr_.Clear();
}
inline ::tenon::bft::protobuf::AccountAttributes* TxInfo::mutable_attr(int index) {
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxInfo.attr)
  return attr_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::AccountAttributes >*
TxInfo::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:tenon.bft.protobuf.TxInfo.attr)
  return &attr_;
}
inline const ::tenon::bft::protobuf::AccountAttributes& TxInfo::attr(int index) const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.attr)
  return attr_.Get(index);
}
inline ::tenon::bft::protobuf::AccountAttributes* TxInfo::add_attr() {
  // @@protoc_insertion_point(field_add:tenon.bft.protobuf.TxInfo.attr)
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::AccountAttributes >&
TxInfo::attr() const {
  // @@protoc_insertion_point(field_list:tenon.bft.protobuf.TxInfo.attr)
  return attr_;
}

// optional uint32 status = 15;
inline bool TxInfo::has_status() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TxInfo::set_has_status() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TxInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TxInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 TxInfo::status() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.status)
  return status_;
}
inline void TxInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.status)
}

// optional bytes tx_hash = 16;
inline bool TxInfo::has_tx_hash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TxInfo::set_has_tx_hash() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TxInfo::clear_has_tx_hash() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TxInfo::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tx_hash();
}
inline const ::std::string& TxInfo::tx_hash() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.tx_hash)
  return tx_hash_.GetNoArena();
}
inline void TxInfo::set_tx_hash(const ::std::string& value) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.tx_hash)
}
#if LANG_CXX11
inline void TxInfo::set_tx_hash(::std::string&& value) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TxInfo.tx_hash)
}
#endif
inline void TxInfo::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TxInfo.tx_hash)
}
inline void TxInfo::set_tx_hash(const void* value, size_t size) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TxInfo.tx_hash)
}
inline ::std::string* TxInfo::mutable_tx_hash() {
  set_has_tx_hash();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxInfo.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_tx_hash() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxInfo.tx_hash)
  if (!has_tx_hash()) {
    return NULL;
  }
  clear_has_tx_hash();
  return tx_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    set_has_tx_hash();
  } else {
    clear_has_tx_hash();
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxInfo.tx_hash)
}

// optional uint32 network_id = 17;
inline bool TxInfo::has_network_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TxInfo::set_has_network_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TxInfo::clear_has_network_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TxInfo::clear_network_id() {
  network_id_ = 0u;
  clear_has_network_id();
}
inline ::google::protobuf::uint32 TxInfo::network_id() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.network_id)
  return network_id_;
}
inline void TxInfo::set_network_id(::google::protobuf::uint32 value) {
  set_has_network_id();
  network_id_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.network_id)
}

// optional uint32 pool_index = 18 [default = 257];
inline bool TxInfo::has_pool_index() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TxInfo::set_has_pool_index() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TxInfo::clear_has_pool_index() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TxInfo::clear_pool_index() {
  pool_index_ = 257u;
  clear_has_pool_index();
}
inline ::google::protobuf::uint32 TxInfo::pool_index() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.pool_index)
  return pool_index_;
}
inline void TxInfo::set_pool_index(::google::protobuf::uint32 value) {
  set_has_pool_index();
  pool_index_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.pool_index)
}

// optional uint32 call_contract_step = 19;
inline bool TxInfo::has_call_contract_step() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TxInfo::set_has_call_contract_step() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TxInfo::clear_has_call_contract_step() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TxInfo::clear_call_contract_step() {
  call_contract_step_ = 0u;
  clear_has_call_contract_step();
}
inline ::google::protobuf::uint32 TxInfo::call_contract_step() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.call_contract_step)
  return call_contract_step_;
}
inline void TxInfo::set_call_contract_step(::google::protobuf::uint32 value) {
  set_has_call_contract_step();
  call_contract_step_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.call_contract_step)
}

// repeated .tenon.bft.protobuf.StorageItem storages = 20;
inline int TxInfo::storages_size() const {
  return storages_.size();
}
inline void TxInfo::clear_storages() {
  storages_.Clear();
}
inline ::tenon::bft::protobuf::StorageItem* TxInfo::mutable_storages(int index) {
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxInfo.storages)
  return storages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::StorageItem >*
TxInfo::mutable_storages() {
  // @@protoc_insertion_point(field_mutable_list:tenon.bft.protobuf.TxInfo.storages)
  return &storages_;
}
inline const ::tenon::bft::protobuf::StorageItem& TxInfo::storages(int index) const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.storages)
  return storages_.Get(index);
}
inline ::tenon::bft::protobuf::StorageItem* TxInfo::add_storages() {
  // @@protoc_insertion_point(field_add:tenon.bft.protobuf.TxInfo.storages)
  return storages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::StorageItem >&
TxInfo::storages() const {
  // @@protoc_insertion_point(field_list:tenon.bft.protobuf.TxInfo.storages)
  return storages_;
}

// repeated .tenon.bft.protobuf.TransferItem transfers = 21;
inline int TxInfo::transfers_size() const {
  return transfers_.size();
}
inline void TxInfo::clear_transfers() {
  transfers_.Clear();
}
inline ::tenon::bft::protobuf::TransferItem* TxInfo::mutable_transfers(int index) {
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxInfo.transfers)
  return transfers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TransferItem >*
TxInfo::mutable_transfers() {
  // @@protoc_insertion_point(field_mutable_list:tenon.bft.protobuf.TxInfo.transfers)
  return &transfers_;
}
inline const ::tenon::bft::protobuf::TransferItem& TxInfo::transfers(int index) const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.transfers)
  return transfers_.Get(index);
}
inline ::tenon::bft::protobuf::TransferItem* TxInfo::add_transfers() {
  // @@protoc_insertion_point(field_add:tenon.bft.protobuf.TxInfo.transfers)
  return transfers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TransferItem >&
TxInfo::transfers() const {
  // @@protoc_insertion_point(field_list:tenon.bft.protobuf.TxInfo.transfers)
  return transfers_;
}

// optional uint64 timestamp = 22;
inline bool TxInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TxInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TxInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TxInfo::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 TxInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxInfo.timestamp)
  return timestamp_;
}
inline void TxInfo::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxInfo.timestamp)
}

// -------------------------------------------------------------------

// Block

// optional uint32 network_id = 1;
inline bool Block::has_network_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Block::set_has_network_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Block::clear_has_network_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Block::clear_network_id() {
  network_id_ = 0u;
  clear_has_network_id();
}
inline ::google::protobuf::uint32 Block::network_id() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.network_id)
  return network_id_;
}
inline void Block::set_network_id(::google::protobuf::uint32 value) {
  set_has_network_id();
  network_id_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.network_id)
}

// optional uint32 pool_index = 2;
inline bool Block::has_pool_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Block::set_has_pool_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Block::clear_has_pool_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Block::clear_pool_index() {
  pool_index_ = 0u;
  clear_has_pool_index();
}
inline ::google::protobuf::uint32 Block::pool_index() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.pool_index)
  return pool_index_;
}
inline void Block::set_pool_index(::google::protobuf::uint32 value) {
  set_has_pool_index();
  pool_index_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.pool_index)
}

// optional bytes prehash = 3;
inline bool Block::has_prehash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Block::set_has_prehash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Block::clear_has_prehash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Block::clear_prehash() {
  prehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prehash();
}
inline const ::std::string& Block::prehash() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.prehash)
  return prehash_.GetNoArena();
}
inline void Block::set_prehash(const ::std::string& value) {
  set_has_prehash();
  prehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.prehash)
}
#if LANG_CXX11
inline void Block::set_prehash(::std::string&& value) {
  set_has_prehash();
  prehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.Block.prehash)
}
#endif
inline void Block::set_prehash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prehash();
  prehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.Block.prehash)
}
inline void Block::set_prehash(const void* value, size_t size) {
  set_has_prehash();
  prehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.Block.prehash)
}
inline ::std::string* Block::mutable_prehash() {
  set_has_prehash();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.Block.prehash)
  return prehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_prehash() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.Block.prehash)
  if (!has_prehash()) {
    return NULL;
  }
  clear_has_prehash();
  return prehash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_prehash(::std::string* prehash) {
  if (prehash != NULL) {
    set_has_prehash();
  } else {
    clear_has_prehash();
  }
  prehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prehash);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.Block.prehash)
}

// optional bytes hash = 4;
inline bool Block::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Block::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Block::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Block::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
inline const ::std::string& Block::hash() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.hash)
  return hash_.GetNoArena();
}
inline void Block::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.hash)
}
#if LANG_CXX11
inline void Block::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.Block.hash)
}
#endif
inline void Block::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.Block.hash)
}
inline void Block::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.Block.hash)
}
inline ::std::string* Block::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.Block.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_hash() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.Block.hash)
  if (!has_hash()) {
    return NULL;
  }
  clear_has_hash();
  return hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.Block.hash)
}

// optional uint32 version = 5;
inline bool Block::has_version() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Block::set_has_version() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Block::clear_has_version() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Block::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Block::version() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.version)
  return version_;
}
inline void Block::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.version)
}

// optional uint64 height = 6;
inline bool Block::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Block::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Block::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Block::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 Block::height() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.height)
  return height_;
}
inline void Block::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.height)
}

// optional uint64 consistency_random = 7;
inline bool Block::has_consistency_random() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Block::set_has_consistency_random() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Block::clear_has_consistency_random() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Block::clear_consistency_random() {
  consistency_random_ = GOOGLE_ULONGLONG(0);
  clear_has_consistency_random();
}
inline ::google::protobuf::uint64 Block::consistency_random() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.consistency_random)
  return consistency_random_;
}
inline void Block::set_consistency_random(::google::protobuf::uint64 value) {
  set_has_consistency_random();
  consistency_random_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.consistency_random)
}

// optional uint64 electblock_height = 8;
inline bool Block::has_electblock_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Block::set_has_electblock_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Block::clear_has_electblock_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Block::clear_electblock_height() {
  electblock_height_ = GOOGLE_ULONGLONG(0);
  clear_has_electblock_height();
}
inline ::google::protobuf::uint64 Block::electblock_height() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.electblock_height)
  return electblock_height_;
}
inline void Block::set_electblock_height(::google::protobuf::uint64 value) {
  set_has_electblock_height();
  electblock_height_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.electblock_height)
}

// repeated uint64 bitmap = 9;
inline int Block::bitmap_size() const {
  return bitmap_.size();
}
inline void Block::clear_bitmap() {
  bitmap_.Clear();
}
inline ::google::protobuf::uint64 Block::bitmap(int index) const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.bitmap)
  return bitmap_.Get(index);
}
inline void Block::set_bitmap(int index, ::google::protobuf::uint64 value) {
  bitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.bitmap)
}
inline void Block::add_bitmap(::google::protobuf::uint64 value) {
  bitmap_.Add(value);
  // @@protoc_insertion_point(field_add:tenon.bft.protobuf.Block.bitmap)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Block::bitmap() const {
  // @@protoc_insertion_point(field_list:tenon.bft.protobuf.Block.bitmap)
  return bitmap_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Block::mutable_bitmap() {
  // @@protoc_insertion_point(field_mutable_list:tenon.bft.protobuf.Block.bitmap)
  return &bitmap_;
}

// repeated .tenon.bft.protobuf.TxInfo tx_list = 10;
inline int Block::tx_list_size() const {
  return tx_list_.size();
}
inline void Block::clear_tx_list() {
  tx_list_.Clear();
}
inline ::tenon::bft::protobuf::TxInfo* Block::mutable_tx_list(int index) {
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.Block.tx_list)
  return tx_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TxInfo >*
Block::mutable_tx_list() {
  // @@protoc_insertion_point(field_mutable_list:tenon.bft.protobuf.Block.tx_list)
  return &tx_list_;
}
inline const ::tenon::bft::protobuf::TxInfo& Block::tx_list(int index) const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.tx_list)
  return tx_list_.Get(index);
}
inline ::tenon::bft::protobuf::TxInfo* Block::add_tx_list() {
  // @@protoc_insertion_point(field_add:tenon.bft.protobuf.Block.tx_list)
  return tx_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TxInfo >&
Block::tx_list() const {
  // @@protoc_insertion_point(field_list:tenon.bft.protobuf.Block.tx_list)
  return tx_list_;
}

// optional uint64 timestamp = 11;
inline bool Block::has_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Block::set_has_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Block::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Block::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Block::timestamp() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.timestamp)
  return timestamp_;
}
inline void Block::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.timestamp)
}

// optional uint64 timeblock_height = 12;
inline bool Block::has_timeblock_height() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Block::set_has_timeblock_height() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Block::clear_has_timeblock_height() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Block::clear_timeblock_height() {
  timeblock_height_ = GOOGLE_ULONGLONG(0);
  clear_has_timeblock_height();
}
inline ::google::protobuf::uint64 Block::timeblock_height() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.timeblock_height)
  return timeblock_height_;
}
inline void Block::set_timeblock_height(::google::protobuf::uint64 value) {
  set_has_timeblock_height();
  timeblock_height_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.timeblock_height)
}

// optional bytes bls_agg_sign_x = 13;
inline bool Block::has_bls_agg_sign_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Block::set_has_bls_agg_sign_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Block::clear_has_bls_agg_sign_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Block::clear_bls_agg_sign_x() {
  bls_agg_sign_x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bls_agg_sign_x();
}
inline const ::std::string& Block::bls_agg_sign_x() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.bls_agg_sign_x)
  return bls_agg_sign_x_.GetNoArena();
}
inline void Block::set_bls_agg_sign_x(const ::std::string& value) {
  set_has_bls_agg_sign_x();
  bls_agg_sign_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.bls_agg_sign_x)
}
#if LANG_CXX11
inline void Block::set_bls_agg_sign_x(::std::string&& value) {
  set_has_bls_agg_sign_x();
  bls_agg_sign_x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.Block.bls_agg_sign_x)
}
#endif
inline void Block::set_bls_agg_sign_x(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bls_agg_sign_x();
  bls_agg_sign_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.Block.bls_agg_sign_x)
}
inline void Block::set_bls_agg_sign_x(const void* value, size_t size) {
  set_has_bls_agg_sign_x();
  bls_agg_sign_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.Block.bls_agg_sign_x)
}
inline ::std::string* Block::mutable_bls_agg_sign_x() {
  set_has_bls_agg_sign_x();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.Block.bls_agg_sign_x)
  return bls_agg_sign_x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_bls_agg_sign_x() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.Block.bls_agg_sign_x)
  if (!has_bls_agg_sign_x()) {
    return NULL;
  }
  clear_has_bls_agg_sign_x();
  return bls_agg_sign_x_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_bls_agg_sign_x(::std::string* bls_agg_sign_x) {
  if (bls_agg_sign_x != NULL) {
    set_has_bls_agg_sign_x();
  } else {
    clear_has_bls_agg_sign_x();
  }
  bls_agg_sign_x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bls_agg_sign_x);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.Block.bls_agg_sign_x)
}

// optional bytes bls_agg_sign_y = 14;
inline bool Block::has_bls_agg_sign_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Block::set_has_bls_agg_sign_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Block::clear_has_bls_agg_sign_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Block::clear_bls_agg_sign_y() {
  bls_agg_sign_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bls_agg_sign_y();
}
inline const ::std::string& Block::bls_agg_sign_y() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.bls_agg_sign_y)
  return bls_agg_sign_y_.GetNoArena();
}
inline void Block::set_bls_agg_sign_y(const ::std::string& value) {
  set_has_bls_agg_sign_y();
  bls_agg_sign_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.bls_agg_sign_y)
}
#if LANG_CXX11
inline void Block::set_bls_agg_sign_y(::std::string&& value) {
  set_has_bls_agg_sign_y();
  bls_agg_sign_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.Block.bls_agg_sign_y)
}
#endif
inline void Block::set_bls_agg_sign_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bls_agg_sign_y();
  bls_agg_sign_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.Block.bls_agg_sign_y)
}
inline void Block::set_bls_agg_sign_y(const void* value, size_t size) {
  set_has_bls_agg_sign_y();
  bls_agg_sign_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.Block.bls_agg_sign_y)
}
inline ::std::string* Block::mutable_bls_agg_sign_y() {
  set_has_bls_agg_sign_y();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.Block.bls_agg_sign_y)
  return bls_agg_sign_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_bls_agg_sign_y() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.Block.bls_agg_sign_y)
  if (!has_bls_agg_sign_y()) {
    return NULL;
  }
  clear_has_bls_agg_sign_y();
  return bls_agg_sign_y_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_bls_agg_sign_y(::std::string* bls_agg_sign_y) {
  if (bls_agg_sign_y != NULL) {
    set_has_bls_agg_sign_y();
  } else {
    clear_has_bls_agg_sign_y();
  }
  bls_agg_sign_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bls_agg_sign_y);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.Block.bls_agg_sign_y)
}

// repeated uint64 commit_bitmap = 15;
inline int Block::commit_bitmap_size() const {
  return commit_bitmap_.size();
}
inline void Block::clear_commit_bitmap() {
  commit_bitmap_.Clear();
}
inline ::google::protobuf::uint64 Block::commit_bitmap(int index) const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.Block.commit_bitmap)
  return commit_bitmap_.Get(index);
}
inline void Block::set_commit_bitmap(int index, ::google::protobuf::uint64 value) {
  commit_bitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.Block.commit_bitmap)
}
inline void Block::add_commit_bitmap(::google::protobuf::uint64 value) {
  commit_bitmap_.Add(value);
  // @@protoc_insertion_point(field_add:tenon.bft.protobuf.Block.commit_bitmap)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Block::commit_bitmap() const {
  // @@protoc_insertion_point(field_list:tenon.bft.protobuf.Block.commit_bitmap)
  return commit_bitmap_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Block::mutable_commit_bitmap() {
  // @@protoc_insertion_point(field_mutable_list:tenon.bft.protobuf.Block.commit_bitmap)
  return &commit_bitmap_;
}

// -------------------------------------------------------------------

// TbftPrepareTransactionInfo

// optional bytes gid = 1;
inline bool TbftPrepareTransactionInfo::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TbftPrepareTransactionInfo::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TbftPrepareTransactionInfo::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TbftPrepareTransactionInfo::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& TbftPrepareTransactionInfo::gid() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TbftPrepareTransactionInfo.gid)
  return gid_.GetNoArena();
}
inline void TbftPrepareTransactionInfo::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TbftPrepareTransactionInfo.gid)
}
#if LANG_CXX11
inline void TbftPrepareTransactionInfo::set_gid(::std::string&& value) {
  set_has_gid();
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TbftPrepareTransactionInfo.gid)
}
#endif
inline void TbftPrepareTransactionInfo::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TbftPrepareTransactionInfo.gid)
}
inline void TbftPrepareTransactionInfo::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TbftPrepareTransactionInfo.gid)
}
inline ::std::string* TbftPrepareTransactionInfo::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TbftPrepareTransactionInfo.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TbftPrepareTransactionInfo::release_gid() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TbftPrepareTransactionInfo.gid)
  if (!has_gid()) {
    return NULL;
  }
  clear_has_gid();
  return gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TbftPrepareTransactionInfo::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TbftPrepareTransactionInfo.gid)
}

// optional bytes tx_hash = 2;
inline bool TbftPrepareTransactionInfo::has_tx_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TbftPrepareTransactionInfo::set_has_tx_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TbftPrepareTransactionInfo::clear_has_tx_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TbftPrepareTransactionInfo::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tx_hash();
}
inline const ::std::string& TbftPrepareTransactionInfo::tx_hash() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TbftPrepareTransactionInfo.tx_hash)
  return tx_hash_.GetNoArena();
}
inline void TbftPrepareTransactionInfo::set_tx_hash(const ::std::string& value) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TbftPrepareTransactionInfo.tx_hash)
}
#if LANG_CXX11
inline void TbftPrepareTransactionInfo::set_tx_hash(::std::string&& value) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TbftPrepareTransactionInfo.tx_hash)
}
#endif
inline void TbftPrepareTransactionInfo::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TbftPrepareTransactionInfo.tx_hash)
}
inline void TbftPrepareTransactionInfo::set_tx_hash(const void* value, size_t size) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TbftPrepareTransactionInfo.tx_hash)
}
inline ::std::string* TbftPrepareTransactionInfo::mutable_tx_hash() {
  set_has_tx_hash();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TbftPrepareTransactionInfo.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TbftPrepareTransactionInfo::release_tx_hash() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TbftPrepareTransactionInfo.tx_hash)
  if (!has_tx_hash()) {
    return NULL;
  }
  clear_has_tx_hash();
  return tx_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TbftPrepareTransactionInfo::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    set_has_tx_hash();
  } else {
    clear_has_tx_hash();
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TbftPrepareTransactionInfo.tx_hash)
}

// optional bytes address = 3;
inline bool TbftPrepareTransactionInfo::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TbftPrepareTransactionInfo::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TbftPrepareTransactionInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TbftPrepareTransactionInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& TbftPrepareTransactionInfo::address() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TbftPrepareTransactionInfo.address)
  return address_.GetNoArena();
}
inline void TbftPrepareTransactionInfo::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TbftPrepareTransactionInfo.address)
}
#if LANG_CXX11
inline void TbftPrepareTransactionInfo::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TbftPrepareTransactionInfo.address)
}
#endif
inline void TbftPrepareTransactionInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TbftPrepareTransactionInfo.address)
}
inline void TbftPrepareTransactionInfo::set_address(const void* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TbftPrepareTransactionInfo.address)
}
inline ::std::string* TbftPrepareTransactionInfo::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TbftPrepareTransactionInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TbftPrepareTransactionInfo::release_address() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TbftPrepareTransactionInfo.address)
  if (!has_address()) {
    return NULL;
  }
  clear_has_address();
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TbftPrepareTransactionInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TbftPrepareTransactionInfo.address)
}

// optional uint64 balance = 4;
inline bool TbftPrepareTransactionInfo::has_balance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TbftPrepareTransactionInfo::set_has_balance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TbftPrepareTransactionInfo::clear_has_balance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TbftPrepareTransactionInfo::clear_balance() {
  balance_ = GOOGLE_ULONGLONG(0);
  clear_has_balance();
}
inline ::google::protobuf::uint64 TbftPrepareTransactionInfo::balance() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TbftPrepareTransactionInfo.balance)
  return balance_;
}
inline void TbftPrepareTransactionInfo::set_balance(::google::protobuf::uint64 value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TbftPrepareTransactionInfo.balance)
}

// -------------------------------------------------------------------

// TbftLeaderPrepare

// repeated .tenon.bft.protobuf.TbftPrepareTransactionInfo prepare_txs = 1;
inline int TbftLeaderPrepare::prepare_txs_size() const {
  return prepare_txs_.size();
}
inline void TbftLeaderPrepare::clear_prepare_txs() {
  prepare_txs_.Clear();
}
inline ::tenon::bft::protobuf::TbftPrepareTransactionInfo* TbftLeaderPrepare::mutable_prepare_txs(int index) {
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TbftLeaderPrepare.prepare_txs)
  return prepare_txs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TbftPrepareTransactionInfo >*
TbftLeaderPrepare::mutable_prepare_txs() {
  // @@protoc_insertion_point(field_mutable_list:tenon.bft.protobuf.TbftLeaderPrepare.prepare_txs)
  return &prepare_txs_;
}
inline const ::tenon::bft::protobuf::TbftPrepareTransactionInfo& TbftLeaderPrepare::prepare_txs(int index) const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TbftLeaderPrepare.prepare_txs)
  return prepare_txs_.Get(index);
}
inline ::tenon::bft::protobuf::TbftPrepareTransactionInfo* TbftLeaderPrepare::add_prepare_txs() {
  // @@protoc_insertion_point(field_add:tenon.bft.protobuf.TbftLeaderPrepare.prepare_txs)
  return prepare_txs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tenon::bft::protobuf::TbftPrepareTransactionInfo >&
TbftLeaderPrepare::prepare_txs() const {
  // @@protoc_insertion_point(field_list:tenon.bft.protobuf.TbftLeaderPrepare.prepare_txs)
  return prepare_txs_;
}

// optional bytes prepare_hash = 2;
inline bool TbftLeaderPrepare::has_prepare_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TbftLeaderPrepare::set_has_prepare_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TbftLeaderPrepare::clear_has_prepare_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TbftLeaderPrepare::clear_prepare_hash() {
  prepare_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prepare_hash();
}
inline const ::std::string& TbftLeaderPrepare::prepare_hash() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TbftLeaderPrepare.prepare_hash)
  return prepare_hash_.GetNoArena();
}
inline void TbftLeaderPrepare::set_prepare_hash(const ::std::string& value) {
  set_has_prepare_hash();
  prepare_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TbftLeaderPrepare.prepare_hash)
}
#if LANG_CXX11
inline void TbftLeaderPrepare::set_prepare_hash(::std::string&& value) {
  set_has_prepare_hash();
  prepare_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TbftLeaderPrepare.prepare_hash)
}
#endif
inline void TbftLeaderPrepare::set_prepare_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prepare_hash();
  prepare_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TbftLeaderPrepare.prepare_hash)
}
inline void TbftLeaderPrepare::set_prepare_hash(const void* value, size_t size) {
  set_has_prepare_hash();
  prepare_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TbftLeaderPrepare.prepare_hash)
}
inline ::std::string* TbftLeaderPrepare::mutable_prepare_hash() {
  set_has_prepare_hash();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TbftLeaderPrepare.prepare_hash)
  return prepare_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TbftLeaderPrepare::release_prepare_hash() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TbftLeaderPrepare.prepare_hash)
  if (!has_prepare_hash()) {
    return NULL;
  }
  clear_has_prepare_hash();
  return prepare_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TbftLeaderPrepare::set_allocated_prepare_hash(::std::string* prepare_hash) {
  if (prepare_hash != NULL) {
    set_has_prepare_hash();
  } else {
    clear_has_prepare_hash();
  }
  prepare_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prepare_hash);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TbftLeaderPrepare.prepare_hash)
}

// optional bytes prepare_final_hash = 3;
inline bool TbftLeaderPrepare::has_prepare_final_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TbftLeaderPrepare::set_has_prepare_final_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TbftLeaderPrepare::clear_has_prepare_final_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TbftLeaderPrepare::clear_prepare_final_hash() {
  prepare_final_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prepare_final_hash();
}
inline const ::std::string& TbftLeaderPrepare::prepare_final_hash() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TbftLeaderPrepare.prepare_final_hash)
  return prepare_final_hash_.GetNoArena();
}
inline void TbftLeaderPrepare::set_prepare_final_hash(const ::std::string& value) {
  set_has_prepare_final_hash();
  prepare_final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TbftLeaderPrepare.prepare_final_hash)
}
#if LANG_CXX11
inline void TbftLeaderPrepare::set_prepare_final_hash(::std::string&& value) {
  set_has_prepare_final_hash();
  prepare_final_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TbftLeaderPrepare.prepare_final_hash)
}
#endif
inline void TbftLeaderPrepare::set_prepare_final_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prepare_final_hash();
  prepare_final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TbftLeaderPrepare.prepare_final_hash)
}
inline void TbftLeaderPrepare::set_prepare_final_hash(const void* value, size_t size) {
  set_has_prepare_final_hash();
  prepare_final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TbftLeaderPrepare.prepare_final_hash)
}
inline ::std::string* TbftLeaderPrepare::mutable_prepare_final_hash() {
  set_has_prepare_final_hash();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TbftLeaderPrepare.prepare_final_hash)
  return prepare_final_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TbftLeaderPrepare::release_prepare_final_hash() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TbftLeaderPrepare.prepare_final_hash)
  if (!has_prepare_final_hash()) {
    return NULL;
  }
  clear_has_prepare_final_hash();
  return prepare_final_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TbftLeaderPrepare::set_allocated_prepare_final_hash(::std::string* prepare_final_hash) {
  if (prepare_final_hash != NULL) {
    set_has_prepare_final_hash();
  } else {
    clear_has_prepare_final_hash();
  }
  prepare_final_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prepare_final_hash);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TbftLeaderPrepare.prepare_final_hash)
}

// -------------------------------------------------------------------

// TxPrepareItem

// optional bytes acc_addr = 1;
inline bool TxPrepareItem::has_acc_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxPrepareItem::set_has_acc_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxPrepareItem::clear_has_acc_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxPrepareItem::clear_acc_addr() {
  acc_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_acc_addr();
}
inline const ::std::string& TxPrepareItem::acc_addr() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxPrepareItem.acc_addr)
  return acc_addr_.GetNoArena();
}
inline void TxPrepareItem::set_acc_addr(const ::std::string& value) {
  set_has_acc_addr();
  acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxPrepareItem.acc_addr)
}
#if LANG_CXX11
inline void TxPrepareItem::set_acc_addr(::std::string&& value) {
  set_has_acc_addr();
  acc_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TxPrepareItem.acc_addr)
}
#endif
inline void TxPrepareItem::set_acc_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_acc_addr();
  acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TxPrepareItem.acc_addr)
}
inline void TxPrepareItem::set_acc_addr(const void* value, size_t size) {
  set_has_acc_addr();
  acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TxPrepareItem.acc_addr)
}
inline ::std::string* TxPrepareItem::mutable_acc_addr() {
  set_has_acc_addr();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxPrepareItem.acc_addr)
  return acc_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxPrepareItem::release_acc_addr() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxPrepareItem.acc_addr)
  if (!has_acc_addr()) {
    return NULL;
  }
  clear_has_acc_addr();
  return acc_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxPrepareItem::set_allocated_acc_addr(::std::string* acc_addr) {
  if (acc_addr != NULL) {
    set_has_acc_addr();
  } else {
    clear_has_acc_addr();
  }
  acc_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acc_addr);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxPrepareItem.acc_addr)
}

// optional bytes gid = 2;
inline bool TxPrepareItem::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxPrepareItem::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxPrepareItem::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxPrepareItem::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& TxPrepareItem::gid() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxPrepareItem.gid)
  return gid_.GetNoArena();
}
inline void TxPrepareItem::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.TxPrepareItem.gid)
}
#if LANG_CXX11
inline void TxPrepareItem::set_gid(::std::string&& value) {
  set_has_gid();
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.TxPrepareItem.gid)
}
#endif
inline void TxPrepareItem::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.TxPrepareItem.gid)
}
inline void TxPrepareItem::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.TxPrepareItem.gid)
}
inline ::std::string* TxPrepareItem::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxPrepareItem.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxPrepareItem::release_gid() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxPrepareItem.gid)
  if (!has_gid()) {
    return NULL;
  }
  clear_has_gid();
  return gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxPrepareItem::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxPrepareItem.gid)
}

// -------------------------------------------------------------------

// LeaderTxPrepare

// optional .tenon.bft.protobuf.Block block = 1;
inline bool LeaderTxPrepare::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaderTxPrepare::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaderTxPrepare::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaderTxPrepare::clear_block() {
  if (block_ != NULL) block_->Clear();
  clear_has_block();
}
inline const ::tenon::bft::protobuf::Block& LeaderTxPrepare::_internal_block() const {
  return *block_;
}
inline const ::tenon::bft::protobuf::Block& LeaderTxPrepare::block() const {
  const ::tenon::bft::protobuf::Block* p = block_;
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.LeaderTxPrepare.block)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bft::protobuf::Block*>(
      &::tenon::bft::protobuf::_Block_default_instance_);
}
inline ::tenon::bft::protobuf::Block* LeaderTxPrepare::release_block() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.LeaderTxPrepare.block)
  clear_has_block();
  ::tenon::bft::protobuf::Block* temp = block_;
  block_ = NULL;
  return temp;
}
inline ::tenon::bft::protobuf::Block* LeaderTxPrepare::mutable_block() {
  set_has_block();
  if (block_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bft::protobuf::Block>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.LeaderTxPrepare.block)
  return block_;
}
inline void LeaderTxPrepare::set_allocated_block(::tenon::bft::protobuf::Block* block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete block_;
  }
  if (block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    set_has_block();
  } else {
    clear_has_block();
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.LeaderTxPrepare.block)
}

// optional .tenon.bft.protobuf.TbftLeaderPrepare prepare = 2;
inline bool LeaderTxPrepare::has_prepare() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeaderTxPrepare::set_has_prepare() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeaderTxPrepare::clear_has_prepare() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeaderTxPrepare::clear_prepare() {
  if (prepare_ != NULL) prepare_->Clear();
  clear_has_prepare();
}
inline const ::tenon::bft::protobuf::TbftLeaderPrepare& LeaderTxPrepare::_internal_prepare() const {
  return *prepare_;
}
inline const ::tenon::bft::protobuf::TbftLeaderPrepare& LeaderTxPrepare::prepare() const {
  const ::tenon::bft::protobuf::TbftLeaderPrepare* p = prepare_;
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.LeaderTxPrepare.prepare)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bft::protobuf::TbftLeaderPrepare*>(
      &::tenon::bft::protobuf::_TbftLeaderPrepare_default_instance_);
}
inline ::tenon::bft::protobuf::TbftLeaderPrepare* LeaderTxPrepare::release_prepare() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.LeaderTxPrepare.prepare)
  clear_has_prepare();
  ::tenon::bft::protobuf::TbftLeaderPrepare* temp = prepare_;
  prepare_ = NULL;
  return temp;
}
inline ::tenon::bft::protobuf::TbftLeaderPrepare* LeaderTxPrepare::mutable_prepare() {
  set_has_prepare();
  if (prepare_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bft::protobuf::TbftLeaderPrepare>(GetArenaNoVirtual());
    prepare_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.LeaderTxPrepare.prepare)
  return prepare_;
}
inline void LeaderTxPrepare::set_allocated_prepare(::tenon::bft::protobuf::TbftLeaderPrepare* prepare) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prepare_;
  }
  if (prepare) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prepare = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prepare, submessage_arena);
    }
    set_has_prepare();
  } else {
    clear_has_prepare();
  }
  prepare_ = prepare;
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.LeaderTxPrepare.prepare)
}

// -------------------------------------------------------------------

// BackupTxPrepare

// optional int32 status = 1;
inline bool BackupTxPrepare::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupTxPrepare::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupTxPrepare::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupTxPrepare::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 BackupTxPrepare::status() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BackupTxPrepare.status)
  return status_;
}
inline void BackupTxPrepare::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BackupTxPrepare.status)
}

// -------------------------------------------------------------------

// LeaderTxPreCommit

// optional int32 status = 1;
inline bool LeaderTxPreCommit::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaderTxPreCommit::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaderTxPreCommit::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaderTxPreCommit::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 LeaderTxPreCommit::status() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.LeaderTxPreCommit.status)
  return status_;
}
inline void LeaderTxPreCommit::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.LeaderTxPreCommit.status)
}

// -------------------------------------------------------------------

// BackupTxPreCommit

// optional int32 status = 1;
inline bool BackupTxPreCommit::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupTxPreCommit::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupTxPreCommit::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupTxPreCommit::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 BackupTxPreCommit::status() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BackupTxPreCommit.status)
  return status_;
}
inline void BackupTxPreCommit::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BackupTxPreCommit.status)
}

// -------------------------------------------------------------------

// LeaderTxCommit

// optional int32 status = 1;
inline bool LeaderTxCommit::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaderTxCommit::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaderTxCommit::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaderTxCommit::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 LeaderTxCommit::status() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.LeaderTxCommit.status)
  return status_;
}
inline void LeaderTxCommit::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.LeaderTxCommit.status)
}

// -------------------------------------------------------------------

// ToAccountTx

// optional .tenon.bft.protobuf.Block block = 1;
inline bool ToAccountTx::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToAccountTx::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToAccountTx::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToAccountTx::clear_block() {
  if (block_ != NULL) block_->Clear();
  clear_has_block();
}
inline const ::tenon::bft::protobuf::Block& ToAccountTx::_internal_block() const {
  return *block_;
}
inline const ::tenon::bft::protobuf::Block& ToAccountTx::block() const {
  const ::tenon::bft::protobuf::Block* p = block_;
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.ToAccountTx.block)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bft::protobuf::Block*>(
      &::tenon::bft::protobuf::_Block_default_instance_);
}
inline ::tenon::bft::protobuf::Block* ToAccountTx::release_block() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.ToAccountTx.block)
  clear_has_block();
  ::tenon::bft::protobuf::Block* temp = block_;
  block_ = NULL;
  return temp;
}
inline ::tenon::bft::protobuf::Block* ToAccountTx::mutable_block() {
  set_has_block();
  if (block_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bft::protobuf::Block>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.ToAccountTx.block)
  return block_;
}
inline void ToAccountTx::set_allocated_block(::tenon::bft::protobuf::Block* block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete block_;
  }
  if (block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    set_has_block();
  } else {
    clear_has_block();
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.ToAccountTx.block)
}

// -------------------------------------------------------------------

// TxBft

// optional .tenon.bft.protobuf.TxInfo new_tx = 1;
inline bool TxBft::has_new_tx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxBft::set_has_new_tx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxBft::clear_has_new_tx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxBft::clear_new_tx() {
  if (new_tx_ != NULL) new_tx_->Clear();
  clear_has_new_tx();
}
inline const ::tenon::bft::protobuf::TxInfo& TxBft::_internal_new_tx() const {
  return *new_tx_;
}
inline const ::tenon::bft::protobuf::TxInfo& TxBft::new_tx() const {
  const ::tenon::bft::protobuf::TxInfo* p = new_tx_;
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxBft.new_tx)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bft::protobuf::TxInfo*>(
      &::tenon::bft::protobuf::_TxInfo_default_instance_);
}
inline ::tenon::bft::protobuf::TxInfo* TxBft::release_new_tx() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxBft.new_tx)
  clear_has_new_tx();
  ::tenon::bft::protobuf::TxInfo* temp = new_tx_;
  new_tx_ = NULL;
  return temp;
}
inline ::tenon::bft::protobuf::TxInfo* TxBft::mutable_new_tx() {
  set_has_new_tx();
  if (new_tx_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bft::protobuf::TxInfo>(GetArenaNoVirtual());
    new_tx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxBft.new_tx)
  return new_tx_;
}
inline void TxBft::set_allocated_new_tx(::tenon::bft::protobuf::TxInfo* new_tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete new_tx_;
  }
  if (new_tx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_tx, submessage_arena);
    }
    set_has_new_tx();
  } else {
    clear_has_new_tx();
  }
  new_tx_ = new_tx;
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxBft.new_tx)
}

// optional .tenon.bft.protobuf.ToAccountTx to_tx = 2;
inline bool TxBft::has_to_tx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxBft::set_has_to_tx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxBft::clear_has_to_tx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxBft::clear_to_tx() {
  if (to_tx_ != NULL) to_tx_->Clear();
  clear_has_to_tx();
}
inline const ::tenon::bft::protobuf::ToAccountTx& TxBft::_internal_to_tx() const {
  return *to_tx_;
}
inline const ::tenon::bft::protobuf::ToAccountTx& TxBft::to_tx() const {
  const ::tenon::bft::protobuf::ToAccountTx* p = to_tx_;
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxBft.to_tx)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bft::protobuf::ToAccountTx*>(
      &::tenon::bft::protobuf::_ToAccountTx_default_instance_);
}
inline ::tenon::bft::protobuf::ToAccountTx* TxBft::release_to_tx() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxBft.to_tx)
  clear_has_to_tx();
  ::tenon::bft::protobuf::ToAccountTx* temp = to_tx_;
  to_tx_ = NULL;
  return temp;
}
inline ::tenon::bft::protobuf::ToAccountTx* TxBft::mutable_to_tx() {
  set_has_to_tx();
  if (to_tx_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bft::protobuf::ToAccountTx>(GetArenaNoVirtual());
    to_tx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxBft.to_tx)
  return to_tx_;
}
inline void TxBft::set_allocated_to_tx(::tenon::bft::protobuf::ToAccountTx* to_tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete to_tx_;
  }
  if (to_tx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      to_tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to_tx, submessage_arena);
    }
    set_has_to_tx();
  } else {
    clear_has_to_tx();
  }
  to_tx_ = to_tx;
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxBft.to_tx)
}

// optional .tenon.bft.protobuf.LeaderTxPrepare ltx_prepare = 3;
inline bool TxBft::has_ltx_prepare() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxBft::set_has_ltx_prepare() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxBft::clear_has_ltx_prepare() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxBft::clear_ltx_prepare() {
  if (ltx_prepare_ != NULL) ltx_prepare_->Clear();
  clear_has_ltx_prepare();
}
inline const ::tenon::bft::protobuf::LeaderTxPrepare& TxBft::_internal_ltx_prepare() const {
  return *ltx_prepare_;
}
inline const ::tenon::bft::protobuf::LeaderTxPrepare& TxBft::ltx_prepare() const {
  const ::tenon::bft::protobuf::LeaderTxPrepare* p = ltx_prepare_;
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxBft.ltx_prepare)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bft::protobuf::LeaderTxPrepare*>(
      &::tenon::bft::protobuf::_LeaderTxPrepare_default_instance_);
}
inline ::tenon::bft::protobuf::LeaderTxPrepare* TxBft::release_ltx_prepare() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxBft.ltx_prepare)
  clear_has_ltx_prepare();
  ::tenon::bft::protobuf::LeaderTxPrepare* temp = ltx_prepare_;
  ltx_prepare_ = NULL;
  return temp;
}
inline ::tenon::bft::protobuf::LeaderTxPrepare* TxBft::mutable_ltx_prepare() {
  set_has_ltx_prepare();
  if (ltx_prepare_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bft::protobuf::LeaderTxPrepare>(GetArenaNoVirtual());
    ltx_prepare_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxBft.ltx_prepare)
  return ltx_prepare_;
}
inline void TxBft::set_allocated_ltx_prepare(::tenon::bft::protobuf::LeaderTxPrepare* ltx_prepare) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ltx_prepare_;
  }
  if (ltx_prepare) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ltx_prepare = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ltx_prepare, submessage_arena);
    }
    set_has_ltx_prepare();
  } else {
    clear_has_ltx_prepare();
  }
  ltx_prepare_ = ltx_prepare;
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxBft.ltx_prepare)
}

// optional .tenon.bft.protobuf.BackupTxPrepare btx_prepare = 4;
inline bool TxBft::has_btx_prepare() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxBft::set_has_btx_prepare() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxBft::clear_has_btx_prepare() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxBft::clear_btx_prepare() {
  if (btx_prepare_ != NULL) btx_prepare_->Clear();
  clear_has_btx_prepare();
}
inline const ::tenon::bft::protobuf::BackupTxPrepare& TxBft::_internal_btx_prepare() const {
  return *btx_prepare_;
}
inline const ::tenon::bft::protobuf::BackupTxPrepare& TxBft::btx_prepare() const {
  const ::tenon::bft::protobuf::BackupTxPrepare* p = btx_prepare_;
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxBft.btx_prepare)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bft::protobuf::BackupTxPrepare*>(
      &::tenon::bft::protobuf::_BackupTxPrepare_default_instance_);
}
inline ::tenon::bft::protobuf::BackupTxPrepare* TxBft::release_btx_prepare() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxBft.btx_prepare)
  clear_has_btx_prepare();
  ::tenon::bft::protobuf::BackupTxPrepare* temp = btx_prepare_;
  btx_prepare_ = NULL;
  return temp;
}
inline ::tenon::bft::protobuf::BackupTxPrepare* TxBft::mutable_btx_prepare() {
  set_has_btx_prepare();
  if (btx_prepare_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bft::protobuf::BackupTxPrepare>(GetArenaNoVirtual());
    btx_prepare_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxBft.btx_prepare)
  return btx_prepare_;
}
inline void TxBft::set_allocated_btx_prepare(::tenon::bft::protobuf::BackupTxPrepare* btx_prepare) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete btx_prepare_;
  }
  if (btx_prepare) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      btx_prepare = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, btx_prepare, submessage_arena);
    }
    set_has_btx_prepare();
  } else {
    clear_has_btx_prepare();
  }
  btx_prepare_ = btx_prepare;
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxBft.btx_prepare)
}

// optional .tenon.bft.protobuf.LeaderTxPreCommit ltx_precommit = 5;
inline bool TxBft::has_ltx_precommit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxBft::set_has_ltx_precommit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxBft::clear_has_ltx_precommit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxBft::clear_ltx_precommit() {
  if (ltx_precommit_ != NULL) ltx_precommit_->Clear();
  clear_has_ltx_precommit();
}
inline const ::tenon::bft::protobuf::LeaderTxPreCommit& TxBft::_internal_ltx_precommit() const {
  return *ltx_precommit_;
}
inline const ::tenon::bft::protobuf::LeaderTxPreCommit& TxBft::ltx_precommit() const {
  const ::tenon::bft::protobuf::LeaderTxPreCommit* p = ltx_precommit_;
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxBft.ltx_precommit)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bft::protobuf::LeaderTxPreCommit*>(
      &::tenon::bft::protobuf::_LeaderTxPreCommit_default_instance_);
}
inline ::tenon::bft::protobuf::LeaderTxPreCommit* TxBft::release_ltx_precommit() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxBft.ltx_precommit)
  clear_has_ltx_precommit();
  ::tenon::bft::protobuf::LeaderTxPreCommit* temp = ltx_precommit_;
  ltx_precommit_ = NULL;
  return temp;
}
inline ::tenon::bft::protobuf::LeaderTxPreCommit* TxBft::mutable_ltx_precommit() {
  set_has_ltx_precommit();
  if (ltx_precommit_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bft::protobuf::LeaderTxPreCommit>(GetArenaNoVirtual());
    ltx_precommit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxBft.ltx_precommit)
  return ltx_precommit_;
}
inline void TxBft::set_allocated_ltx_precommit(::tenon::bft::protobuf::LeaderTxPreCommit* ltx_precommit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ltx_precommit_;
  }
  if (ltx_precommit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ltx_precommit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ltx_precommit, submessage_arena);
    }
    set_has_ltx_precommit();
  } else {
    clear_has_ltx_precommit();
  }
  ltx_precommit_ = ltx_precommit;
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxBft.ltx_precommit)
}

// optional .tenon.bft.protobuf.BackupTxPreCommit btx_precommit = 6;
inline bool TxBft::has_btx_precommit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TxBft::set_has_btx_precommit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TxBft::clear_has_btx_precommit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TxBft::clear_btx_precommit() {
  if (btx_precommit_ != NULL) btx_precommit_->Clear();
  clear_has_btx_precommit();
}
inline const ::tenon::bft::protobuf::BackupTxPreCommit& TxBft::_internal_btx_precommit() const {
  return *btx_precommit_;
}
inline const ::tenon::bft::protobuf::BackupTxPreCommit& TxBft::btx_precommit() const {
  const ::tenon::bft::protobuf::BackupTxPreCommit* p = btx_precommit_;
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxBft.btx_precommit)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bft::protobuf::BackupTxPreCommit*>(
      &::tenon::bft::protobuf::_BackupTxPreCommit_default_instance_);
}
inline ::tenon::bft::protobuf::BackupTxPreCommit* TxBft::release_btx_precommit() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxBft.btx_precommit)
  clear_has_btx_precommit();
  ::tenon::bft::protobuf::BackupTxPreCommit* temp = btx_precommit_;
  btx_precommit_ = NULL;
  return temp;
}
inline ::tenon::bft::protobuf::BackupTxPreCommit* TxBft::mutable_btx_precommit() {
  set_has_btx_precommit();
  if (btx_precommit_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bft::protobuf::BackupTxPreCommit>(GetArenaNoVirtual());
    btx_precommit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxBft.btx_precommit)
  return btx_precommit_;
}
inline void TxBft::set_allocated_btx_precommit(::tenon::bft::protobuf::BackupTxPreCommit* btx_precommit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete btx_precommit_;
  }
  if (btx_precommit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      btx_precommit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, btx_precommit, submessage_arena);
    }
    set_has_btx_precommit();
  } else {
    clear_has_btx_precommit();
  }
  btx_precommit_ = btx_precommit;
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxBft.btx_precommit)
}

// optional .tenon.bft.protobuf.LeaderTxCommit ltx_commit = 7;
inline bool TxBft::has_ltx_commit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TxBft::set_has_ltx_commit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TxBft::clear_has_ltx_commit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TxBft::clear_ltx_commit() {
  if (ltx_commit_ != NULL) ltx_commit_->Clear();
  clear_has_ltx_commit();
}
inline const ::tenon::bft::protobuf::LeaderTxCommit& TxBft::_internal_ltx_commit() const {
  return *ltx_commit_;
}
inline const ::tenon::bft::protobuf::LeaderTxCommit& TxBft::ltx_commit() const {
  const ::tenon::bft::protobuf::LeaderTxCommit* p = ltx_commit_;
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.TxBft.ltx_commit)
  return p != NULL ? *p : *reinterpret_cast<const ::tenon::bft::protobuf::LeaderTxCommit*>(
      &::tenon::bft::protobuf::_LeaderTxCommit_default_instance_);
}
inline ::tenon::bft::protobuf::LeaderTxCommit* TxBft::release_ltx_commit() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.TxBft.ltx_commit)
  clear_has_ltx_commit();
  ::tenon::bft::protobuf::LeaderTxCommit* temp = ltx_commit_;
  ltx_commit_ = NULL;
  return temp;
}
inline ::tenon::bft::protobuf::LeaderTxCommit* TxBft::mutable_ltx_commit() {
  set_has_ltx_commit();
  if (ltx_commit_ == NULL) {
    auto* p = CreateMaybeMessage<::tenon::bft::protobuf::LeaderTxCommit>(GetArenaNoVirtual());
    ltx_commit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.TxBft.ltx_commit)
  return ltx_commit_;
}
inline void TxBft::set_allocated_ltx_commit(::tenon::bft::protobuf::LeaderTxCommit* ltx_commit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ltx_commit_;
  }
  if (ltx_commit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ltx_commit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ltx_commit, submessage_arena);
    }
    set_has_ltx_commit();
  } else {
    clear_has_ltx_commit();
  }
  ltx_commit_ = ltx_commit;
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.TxBft.ltx_commit)
}

// -------------------------------------------------------------------

// BftMessage

// optional bytes gid = 1;
inline bool BftMessage::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BftMessage::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BftMessage::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BftMessage::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& BftMessage::gid() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.gid)
  return gid_.GetNoArena();
}
inline void BftMessage::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.gid)
}
#if LANG_CXX11
inline void BftMessage::set_gid(::std::string&& value) {
  set_has_gid();
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.BftMessage.gid)
}
#endif
inline void BftMessage::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.BftMessage.gid)
}
inline void BftMessage::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.BftMessage.gid)
}
inline ::std::string* BftMessage::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.BftMessage.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_gid() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.BftMessage.gid)
  if (!has_gid()) {
    return NULL;
  }
  clear_has_gid();
  return gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.BftMessage.gid)
}

// optional int32 bft_step = 2;
inline bool BftMessage::has_bft_step() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BftMessage::set_has_bft_step() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BftMessage::clear_has_bft_step() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BftMessage::clear_bft_step() {
  bft_step_ = 0;
  clear_has_bft_step();
}
inline ::google::protobuf::int32 BftMessage::bft_step() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.bft_step)
  return bft_step_;
}
inline void BftMessage::set_bft_step(::google::protobuf::int32 value) {
  set_has_bft_step();
  bft_step_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.bft_step)
}

// optional bool leader = 3;
inline bool BftMessage::has_leader() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BftMessage::set_has_leader() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BftMessage::clear_has_leader() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BftMessage::clear_leader() {
  leader_ = false;
  clear_has_leader();
}
inline bool BftMessage::leader() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.leader)
  return leader_;
}
inline void BftMessage::set_leader(bool value) {
  set_has_leader();
  leader_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.leader)
}

// optional uint32 net_id = 4;
inline bool BftMessage::has_net_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BftMessage::set_has_net_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BftMessage::clear_has_net_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BftMessage::clear_net_id() {
  net_id_ = 0u;
  clear_has_net_id();
}
inline ::google::protobuf::uint32 BftMessage::net_id() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.net_id)
  return net_id_;
}
inline void BftMessage::set_net_id(::google::protobuf::uint32 value) {
  set_has_net_id();
  net_id_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.net_id)
}

// optional bytes sign_challenge = 5;
inline bool BftMessage::has_sign_challenge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BftMessage::set_has_sign_challenge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BftMessage::clear_has_sign_challenge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BftMessage::clear_sign_challenge() {
  sign_challenge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign_challenge();
}
inline const ::std::string& BftMessage::sign_challenge() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.sign_challenge)
  return sign_challenge_.GetNoArena();
}
inline void BftMessage::set_sign_challenge(const ::std::string& value) {
  set_has_sign_challenge();
  sign_challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.sign_challenge)
}
#if LANG_CXX11
inline void BftMessage::set_sign_challenge(::std::string&& value) {
  set_has_sign_challenge();
  sign_challenge_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.BftMessage.sign_challenge)
}
#endif
inline void BftMessage::set_sign_challenge(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign_challenge();
  sign_challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.BftMessage.sign_challenge)
}
inline void BftMessage::set_sign_challenge(const void* value, size_t size) {
  set_has_sign_challenge();
  sign_challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.BftMessage.sign_challenge)
}
inline ::std::string* BftMessage::mutable_sign_challenge() {
  set_has_sign_challenge();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.BftMessage.sign_challenge)
  return sign_challenge_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_sign_challenge() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.BftMessage.sign_challenge)
  if (!has_sign_challenge()) {
    return NULL;
  }
  clear_has_sign_challenge();
  return sign_challenge_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_sign_challenge(::std::string* sign_challenge) {
  if (sign_challenge != NULL) {
    set_has_sign_challenge();
  } else {
    clear_has_sign_challenge();
  }
  sign_challenge_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_challenge);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.BftMessage.sign_challenge)
}

// optional bytes sign_response = 6;
inline bool BftMessage::has_sign_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BftMessage::set_has_sign_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BftMessage::clear_has_sign_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BftMessage::clear_sign_response() {
  sign_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign_response();
}
inline const ::std::string& BftMessage::sign_response() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.sign_response)
  return sign_response_.GetNoArena();
}
inline void BftMessage::set_sign_response(const ::std::string& value) {
  set_has_sign_response();
  sign_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.sign_response)
}
#if LANG_CXX11
inline void BftMessage::set_sign_response(::std::string&& value) {
  set_has_sign_response();
  sign_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.BftMessage.sign_response)
}
#endif
inline void BftMessage::set_sign_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign_response();
  sign_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.BftMessage.sign_response)
}
inline void BftMessage::set_sign_response(const void* value, size_t size) {
  set_has_sign_response();
  sign_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.BftMessage.sign_response)
}
inline ::std::string* BftMessage::mutable_sign_response() {
  set_has_sign_response();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.BftMessage.sign_response)
  return sign_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_sign_response() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.BftMessage.sign_response)
  if (!has_sign_response()) {
    return NULL;
  }
  clear_has_sign_response();
  return sign_response_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_sign_response(::std::string* sign_response) {
  if (sign_response != NULL) {
    set_has_sign_response();
  } else {
    clear_has_sign_response();
  }
  sign_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_response);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.BftMessage.sign_response)
}

// repeated uint64 bitmap = 7;
inline int BftMessage::bitmap_size() const {
  return bitmap_.size();
}
inline void BftMessage::clear_bitmap() {
  bitmap_.Clear();
}
inline ::google::protobuf::uint64 BftMessage::bitmap(int index) const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.bitmap)
  return bitmap_.Get(index);
}
inline void BftMessage::set_bitmap(int index, ::google::protobuf::uint64 value) {
  bitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.bitmap)
}
inline void BftMessage::add_bitmap(::google::protobuf::uint64 value) {
  bitmap_.Add(value);
  // @@protoc_insertion_point(field_add:tenon.bft.protobuf.BftMessage.bitmap)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BftMessage::bitmap() const {
  // @@protoc_insertion_point(field_list:tenon.bft.protobuf.BftMessage.bitmap)
  return bitmap_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BftMessage::mutable_bitmap() {
  // @@protoc_insertion_point(field_mutable_list:tenon.bft.protobuf.BftMessage.bitmap)
  return &bitmap_;
}

// optional bool agree = 8;
inline bool BftMessage::has_agree() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BftMessage::set_has_agree() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BftMessage::clear_has_agree() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BftMessage::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool BftMessage::agree() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.agree)
  return agree_;
}
inline void BftMessage::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.agree)
}

// optional uint32 pool_index = 9;
inline bool BftMessage::has_pool_index() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BftMessage::set_has_pool_index() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BftMessage::clear_has_pool_index() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BftMessage::clear_pool_index() {
  pool_index_ = 0u;
  clear_has_pool_index();
}
inline ::google::protobuf::uint32 BftMessage::pool_index() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.pool_index)
  return pool_index_;
}
inline void BftMessage::set_pool_index(::google::protobuf::uint32 value) {
  set_has_pool_index();
  pool_index_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.pool_index)
}

// optional int32 error = 10;
inline bool BftMessage::has_error() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BftMessage::set_has_error() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BftMessage::clear_has_error() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BftMessage::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google::protobuf::int32 BftMessage::error() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.error)
  return error_;
}
inline void BftMessage::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.error)
}

// optional bytes data = 11;
inline bool BftMessage::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BftMessage::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BftMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BftMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& BftMessage::data() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.data)
  return data_.GetNoArena();
}
inline void BftMessage::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.data)
}
#if LANG_CXX11
inline void BftMessage::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.BftMessage.data)
}
#endif
inline void BftMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.BftMessage.data)
}
inline void BftMessage::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.BftMessage.data)
}
inline ::std::string* BftMessage::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.BftMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_data() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.BftMessage.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.BftMessage.data)
}

// optional bytes prepare_hash = 12;
inline bool BftMessage::has_prepare_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BftMessage::set_has_prepare_hash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BftMessage::clear_has_prepare_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BftMessage::clear_prepare_hash() {
  prepare_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prepare_hash();
}
inline const ::std::string& BftMessage::prepare_hash() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.prepare_hash)
  return prepare_hash_.GetNoArena();
}
inline void BftMessage::set_prepare_hash(const ::std::string& value) {
  set_has_prepare_hash();
  prepare_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.prepare_hash)
}
#if LANG_CXX11
inline void BftMessage::set_prepare_hash(::std::string&& value) {
  set_has_prepare_hash();
  prepare_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.BftMessage.prepare_hash)
}
#endif
inline void BftMessage::set_prepare_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prepare_hash();
  prepare_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.BftMessage.prepare_hash)
}
inline void BftMessage::set_prepare_hash(const void* value, size_t size) {
  set_has_prepare_hash();
  prepare_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.BftMessage.prepare_hash)
}
inline ::std::string* BftMessage::mutable_prepare_hash() {
  set_has_prepare_hash();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.BftMessage.prepare_hash)
  return prepare_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_prepare_hash() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.BftMessage.prepare_hash)
  if (!has_prepare_hash()) {
    return NULL;
  }
  clear_has_prepare_hash();
  return prepare_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_prepare_hash(::std::string* prepare_hash) {
  if (prepare_hash != NULL) {
    set_has_prepare_hash();
  } else {
    clear_has_prepare_hash();
  }
  prepare_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prepare_hash);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.BftMessage.prepare_hash)
}

// optional bytes node_ip = 13;
inline bool BftMessage::has_node_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BftMessage::set_has_node_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BftMessage::clear_has_node_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BftMessage::clear_node_ip() {
  node_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_node_ip();
}
inline const ::std::string& BftMessage::node_ip() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.node_ip)
  return node_ip_.GetNoArena();
}
inline void BftMessage::set_node_ip(const ::std::string& value) {
  set_has_node_ip();
  node_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.node_ip)
}
#if LANG_CXX11
inline void BftMessage::set_node_ip(::std::string&& value) {
  set_has_node_ip();
  node_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.BftMessage.node_ip)
}
#endif
inline void BftMessage::set_node_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_node_ip();
  node_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.BftMessage.node_ip)
}
inline void BftMessage::set_node_ip(const void* value, size_t size) {
  set_has_node_ip();
  node_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.BftMessage.node_ip)
}
inline ::std::string* BftMessage::mutable_node_ip() {
  set_has_node_ip();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.BftMessage.node_ip)
  return node_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_node_ip() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.BftMessage.node_ip)
  if (!has_node_ip()) {
    return NULL;
  }
  clear_has_node_ip();
  return node_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_node_ip(::std::string* node_ip) {
  if (node_ip != NULL) {
    set_has_node_ip();
  } else {
    clear_has_node_ip();
  }
  node_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_ip);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.BftMessage.node_ip)
}

// optional uint32 node_port = 14;
inline bool BftMessage::has_node_port() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BftMessage::set_has_node_port() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BftMessage::clear_has_node_port() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BftMessage::clear_node_port() {
  node_port_ = 0u;
  clear_has_node_port();
}
inline ::google::protobuf::uint32 BftMessage::node_port() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.node_port)
  return node_port_;
}
inline void BftMessage::set_node_port(::google::protobuf::uint32 value) {
  set_has_node_port();
  node_port_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.node_port)
}

// optional uint32 epoch = 15;
inline bool BftMessage::has_epoch() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BftMessage::set_has_epoch() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BftMessage::clear_has_epoch() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BftMessage::clear_epoch() {
  epoch_ = 0u;
  clear_has_epoch();
}
inline ::google::protobuf::uint32 BftMessage::epoch() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.epoch)
  return epoch_;
}
inline void BftMessage::set_epoch(::google::protobuf::uint32 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.epoch)
}

// optional uint32 member_index = 16;
inline bool BftMessage::has_member_index() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BftMessage::set_has_member_index() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BftMessage::clear_has_member_index() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BftMessage::clear_member_index() {
  member_index_ = 0u;
  clear_has_member_index();
}
inline ::google::protobuf::uint32 BftMessage::member_index() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.member_index)
  return member_index_;
}
inline void BftMessage::set_member_index(::google::protobuf::uint32 value) {
  set_has_member_index();
  member_index_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.member_index)
}

// optional bytes pubkey = 17;
inline bool BftMessage::has_pubkey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BftMessage::set_has_pubkey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BftMessage::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BftMessage::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& BftMessage::pubkey() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.pubkey)
  return pubkey_.GetNoArena();
}
inline void BftMessage::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.pubkey)
}
#if LANG_CXX11
inline void BftMessage::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.BftMessage.pubkey)
}
#endif
inline void BftMessage::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.BftMessage.pubkey)
}
inline void BftMessage::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.BftMessage.pubkey)
}
inline ::std::string* BftMessage::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.BftMessage.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_pubkey() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.BftMessage.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.BftMessage.pubkey)
}

// optional bytes backup_enc_data = 18;
inline bool BftMessage::has_backup_enc_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BftMessage::set_has_backup_enc_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BftMessage::clear_has_backup_enc_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BftMessage::clear_backup_enc_data() {
  backup_enc_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_backup_enc_data();
}
inline const ::std::string& BftMessage::backup_enc_data() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.backup_enc_data)
  return backup_enc_data_.GetNoArena();
}
inline void BftMessage::set_backup_enc_data(const ::std::string& value) {
  set_has_backup_enc_data();
  backup_enc_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.backup_enc_data)
}
#if LANG_CXX11
inline void BftMessage::set_backup_enc_data(::std::string&& value) {
  set_has_backup_enc_data();
  backup_enc_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.BftMessage.backup_enc_data)
}
#endif
inline void BftMessage::set_backup_enc_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_backup_enc_data();
  backup_enc_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.BftMessage.backup_enc_data)
}
inline void BftMessage::set_backup_enc_data(const void* value, size_t size) {
  set_has_backup_enc_data();
  backup_enc_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.BftMessage.backup_enc_data)
}
inline ::std::string* BftMessage::mutable_backup_enc_data() {
  set_has_backup_enc_data();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.BftMessage.backup_enc_data)
  return backup_enc_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_backup_enc_data() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.BftMessage.backup_enc_data)
  if (!has_backup_enc_data()) {
    return NULL;
  }
  clear_has_backup_enc_data();
  return backup_enc_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_backup_enc_data(::std::string* backup_enc_data) {
  if (backup_enc_data != NULL) {
    set_has_backup_enc_data();
  } else {
    clear_has_backup_enc_data();
  }
  backup_enc_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backup_enc_data);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.BftMessage.backup_enc_data)
}

// optional uint64 elect_height = 19;
inline bool BftMessage::has_elect_height() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BftMessage::set_has_elect_height() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BftMessage::clear_has_elect_height() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BftMessage::clear_elect_height() {
  elect_height_ = GOOGLE_ULONGLONG(0);
  clear_has_elect_height();
}
inline ::google::protobuf::uint64 BftMessage::elect_height() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.elect_height)
  return elect_height_;
}
inline void BftMessage::set_elect_height(::google::protobuf::uint64 value) {
  set_has_elect_height();
  elect_height_ = value;
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.elect_height)
}

// optional bytes bls_sign_x = 20;
inline bool BftMessage::has_bls_sign_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BftMessage::set_has_bls_sign_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BftMessage::clear_has_bls_sign_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BftMessage::clear_bls_sign_x() {
  bls_sign_x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bls_sign_x();
}
inline const ::std::string& BftMessage::bls_sign_x() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.bls_sign_x)
  return bls_sign_x_.GetNoArena();
}
inline void BftMessage::set_bls_sign_x(const ::std::string& value) {
  set_has_bls_sign_x();
  bls_sign_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.bls_sign_x)
}
#if LANG_CXX11
inline void BftMessage::set_bls_sign_x(::std::string&& value) {
  set_has_bls_sign_x();
  bls_sign_x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.BftMessage.bls_sign_x)
}
#endif
inline void BftMessage::set_bls_sign_x(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bls_sign_x();
  bls_sign_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.BftMessage.bls_sign_x)
}
inline void BftMessage::set_bls_sign_x(const void* value, size_t size) {
  set_has_bls_sign_x();
  bls_sign_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.BftMessage.bls_sign_x)
}
inline ::std::string* BftMessage::mutable_bls_sign_x() {
  set_has_bls_sign_x();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.BftMessage.bls_sign_x)
  return bls_sign_x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_bls_sign_x() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.BftMessage.bls_sign_x)
  if (!has_bls_sign_x()) {
    return NULL;
  }
  clear_has_bls_sign_x();
  return bls_sign_x_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_bls_sign_x(::std::string* bls_sign_x) {
  if (bls_sign_x != NULL) {
    set_has_bls_sign_x();
  } else {
    clear_has_bls_sign_x();
  }
  bls_sign_x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bls_sign_x);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.BftMessage.bls_sign_x)
}

// optional bytes bls_sign_y = 21;
inline bool BftMessage::has_bls_sign_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BftMessage::set_has_bls_sign_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BftMessage::clear_has_bls_sign_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BftMessage::clear_bls_sign_y() {
  bls_sign_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bls_sign_y();
}
inline const ::std::string& BftMessage::bls_sign_y() const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.bls_sign_y)
  return bls_sign_y_.GetNoArena();
}
inline void BftMessage::set_bls_sign_y(const ::std::string& value) {
  set_has_bls_sign_y();
  bls_sign_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.bls_sign_y)
}
#if LANG_CXX11
inline void BftMessage::set_bls_sign_y(::std::string&& value) {
  set_has_bls_sign_y();
  bls_sign_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tenon.bft.protobuf.BftMessage.bls_sign_y)
}
#endif
inline void BftMessage::set_bls_sign_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bls_sign_y();
  bls_sign_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tenon.bft.protobuf.BftMessage.bls_sign_y)
}
inline void BftMessage::set_bls_sign_y(const void* value, size_t size) {
  set_has_bls_sign_y();
  bls_sign_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tenon.bft.protobuf.BftMessage.bls_sign_y)
}
inline ::std::string* BftMessage::mutable_bls_sign_y() {
  set_has_bls_sign_y();
  // @@protoc_insertion_point(field_mutable:tenon.bft.protobuf.BftMessage.bls_sign_y)
  return bls_sign_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_bls_sign_y() {
  // @@protoc_insertion_point(field_release:tenon.bft.protobuf.BftMessage.bls_sign_y)
  if (!has_bls_sign_y()) {
    return NULL;
  }
  clear_has_bls_sign_y();
  return bls_sign_y_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_bls_sign_y(::std::string* bls_sign_y) {
  if (bls_sign_y != NULL) {
    set_has_bls_sign_y();
  } else {
    clear_has_bls_sign_y();
  }
  bls_sign_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bls_sign_y);
  // @@protoc_insertion_point(field_set_allocated:tenon.bft.protobuf.BftMessage.bls_sign_y)
}

// repeated uint64 commit_bitmap = 22;
inline int BftMessage::commit_bitmap_size() const {
  return commit_bitmap_.size();
}
inline void BftMessage::clear_commit_bitmap() {
  commit_bitmap_.Clear();
}
inline ::google::protobuf::uint64 BftMessage::commit_bitmap(int index) const {
  // @@protoc_insertion_point(field_get:tenon.bft.protobuf.BftMessage.commit_bitmap)
  return commit_bitmap_.Get(index);
}
inline void BftMessage::set_commit_bitmap(int index, ::google::protobuf::uint64 value) {
  commit_bitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:tenon.bft.protobuf.BftMessage.commit_bitmap)
}
inline void BftMessage::add_commit_bitmap(::google::protobuf::uint64 value) {
  commit_bitmap_.Add(value);
  // @@protoc_insertion_point(field_add:tenon.bft.protobuf.BftMessage.commit_bitmap)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BftMessage::commit_bitmap() const {
  // @@protoc_insertion_point(field_list:tenon.bft.protobuf.BftMessage.commit_bitmap)
  return commit_bitmap_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BftMessage::mutable_commit_bitmap() {
  // @@protoc_insertion_point(field_mutable_list:tenon.bft.protobuf.BftMessage.commit_bitmap)
  return &commit_bitmap_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace bft
}  // namespace tenon

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_bft_2fproto_2fbft_2eproto
