// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bft.proto

#include "bft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_bft_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bft_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountAttributes;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bft_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BackupTxPreCommit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bft_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BackupTxPrepare;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bft_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LeaderTxCommit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bft_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LeaderTxPreCommit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bft_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StorageItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bft_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransferItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bft_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TxPrepareItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bft_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Block;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bft_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ToAccountTx;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bft_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LeaderTxPrepare;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_bft_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TxInfo;
}  // namespace protobuf_bft_2eproto
namespace tenon {
namespace bft {
namespace protobuf {
class AccountAttributesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountAttributes>
      _instance;
} _AccountAttributes_default_instance_;
class StorageItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StorageItem>
      _instance;
} _StorageItem_default_instance_;
class TransferItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferItem>
      _instance;
} _TransferItem_default_instance_;
class TxInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxInfo>
      _instance;
} _TxInfo_default_instance_;
class BlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Block>
      _instance;
} _Block_default_instance_;
class TxPrepareItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxPrepareItem>
      _instance;
} _TxPrepareItem_default_instance_;
class LeaderTxPrepareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderTxPrepare>
      _instance;
} _LeaderTxPrepare_default_instance_;
class BackupTxPrepareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BackupTxPrepare>
      _instance;
} _BackupTxPrepare_default_instance_;
class LeaderTxPreCommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderTxPreCommit>
      _instance;
} _LeaderTxPreCommit_default_instance_;
class BackupTxPreCommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BackupTxPreCommit>
      _instance;
} _BackupTxPreCommit_default_instance_;
class LeaderTxCommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaderTxCommit>
      _instance;
} _LeaderTxCommit_default_instance_;
class ToAccountTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ToAccountTx>
      _instance;
} _ToAccountTx_default_instance_;
class TxBftDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxBft>
      _instance;
} _TxBft_default_instance_;
class BftMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BftMessage>
      _instance;
} _BftMessage_default_instance_;
}  // namespace protobuf
}  // namespace bft
}  // namespace tenon
namespace protobuf_bft_2eproto {
static void InitDefaultsAccountAttributes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_AccountAttributes_default_instance_;
    new (ptr) ::tenon::bft::protobuf::AccountAttributes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::AccountAttributes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountAttributes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountAttributes}, {}};

static void InitDefaultsStorageItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_StorageItem_default_instance_;
    new (ptr) ::tenon::bft::protobuf::StorageItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::StorageItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StorageItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStorageItem}, {}};

static void InitDefaultsTransferItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_TransferItem_default_instance_;
    new (ptr) ::tenon::bft::protobuf::TransferItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::TransferItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransferItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransferItem}, {}};

static void InitDefaultsTxInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_TxInfo_default_instance_;
    new (ptr) ::tenon::bft::protobuf::TxInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::TxInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TxInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTxInfo}, {
      &protobuf_bft_2eproto::scc_info_AccountAttributes.base,
      &protobuf_bft_2eproto::scc_info_StorageItem.base,
      &protobuf_bft_2eproto::scc_info_TransferItem.base,}};

static void InitDefaultsBlock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_Block_default_instance_;
    new (ptr) ::tenon::bft::protobuf::Block();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::Block::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Block =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBlock}, {
      &protobuf_bft_2eproto::scc_info_TxInfo.base,}};

static void InitDefaultsTxPrepareItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_TxPrepareItem_default_instance_;
    new (ptr) ::tenon::bft::protobuf::TxPrepareItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::TxPrepareItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TxPrepareItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTxPrepareItem}, {}};

static void InitDefaultsLeaderTxPrepare() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_LeaderTxPrepare_default_instance_;
    new (ptr) ::tenon::bft::protobuf::LeaderTxPrepare();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::LeaderTxPrepare::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LeaderTxPrepare =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLeaderTxPrepare}, {
      &protobuf_bft_2eproto::scc_info_TxPrepareItem.base,
      &protobuf_bft_2eproto::scc_info_Block.base,}};

static void InitDefaultsBackupTxPrepare() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_BackupTxPrepare_default_instance_;
    new (ptr) ::tenon::bft::protobuf::BackupTxPrepare();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::BackupTxPrepare::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BackupTxPrepare =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBackupTxPrepare}, {}};

static void InitDefaultsLeaderTxPreCommit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_LeaderTxPreCommit_default_instance_;
    new (ptr) ::tenon::bft::protobuf::LeaderTxPreCommit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::LeaderTxPreCommit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LeaderTxPreCommit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLeaderTxPreCommit}, {}};

static void InitDefaultsBackupTxPreCommit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_BackupTxPreCommit_default_instance_;
    new (ptr) ::tenon::bft::protobuf::BackupTxPreCommit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::BackupTxPreCommit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BackupTxPreCommit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBackupTxPreCommit}, {}};

static void InitDefaultsLeaderTxCommit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_LeaderTxCommit_default_instance_;
    new (ptr) ::tenon::bft::protobuf::LeaderTxCommit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::LeaderTxCommit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LeaderTxCommit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLeaderTxCommit}, {}};

static void InitDefaultsToAccountTx() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_ToAccountTx_default_instance_;
    new (ptr) ::tenon::bft::protobuf::ToAccountTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::ToAccountTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ToAccountTx =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsToAccountTx}, {
      &protobuf_bft_2eproto::scc_info_Block.base,}};

static void InitDefaultsTxBft() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_TxBft_default_instance_;
    new (ptr) ::tenon::bft::protobuf::TxBft();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::TxBft::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_TxBft =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsTxBft}, {
      &protobuf_bft_2eproto::scc_info_TxInfo.base,
      &protobuf_bft_2eproto::scc_info_ToAccountTx.base,
      &protobuf_bft_2eproto::scc_info_LeaderTxPrepare.base,
      &protobuf_bft_2eproto::scc_info_BackupTxPrepare.base,
      &protobuf_bft_2eproto::scc_info_LeaderTxPreCommit.base,
      &protobuf_bft_2eproto::scc_info_BackupTxPreCommit.base,
      &protobuf_bft_2eproto::scc_info_LeaderTxCommit.base,}};

static void InitDefaultsBftMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::bft::protobuf::_BftMessage_default_instance_;
    new (ptr) ::tenon::bft::protobuf::BftMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::bft::protobuf::BftMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BftMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBftMessage}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AccountAttributes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StorageItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransferItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Block.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxPrepareItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaderTxPrepare.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BackupTxPrepare.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaderTxPreCommit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BackupTxPreCommit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeaderTxCommit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ToAccountTx.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxBft.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BftMessage.base);
}

::google::protobuf::Metadata file_level_metadata[14];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::AccountAttributes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::AccountAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::AccountAttributes, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::AccountAttributes, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::StorageItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::StorageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::StorageItem, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::StorageItem, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::StorageItem, value_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TransferItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TransferItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TransferItem, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TransferItem, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TransferItem, amount_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, from_pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, from_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, gas_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, gas_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, gas_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, to_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, attr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, tx_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, network_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, call_contract_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, storages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxInfo, transfers_),
  6,
  0,
  1,
  2,
  3,
  4,
  8,
  9,
  10,
  11,
  12,
  7,
  13,
  ~0u,
  14,
  5,
  15,
  16,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, network_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, pool_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, prehash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, consistency_random_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, electblock_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, bitmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, agg_pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, agg_sign_challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, agg_sign_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, tx_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::Block, timeblock_height_),
  5,
  6,
  0,
  1,
  8,
  7,
  10,
  9,
  ~0u,
  2,
  3,
  4,
  ~0u,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxPrepareItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxPrepareItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxPrepareItem, acc_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxPrepareItem, gid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::LeaderTxPrepare, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::LeaderTxPrepare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::LeaderTxPrepare, txs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::LeaderTxPrepare, block_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BackupTxPrepare, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BackupTxPrepare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BackupTxPrepare, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::LeaderTxPreCommit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::LeaderTxPreCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::LeaderTxPreCommit, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BackupTxPreCommit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BackupTxPreCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BackupTxPreCommit, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::LeaderTxCommit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::LeaderTxCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::LeaderTxCommit, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::ToAccountTx, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::ToAccountTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::ToAccountTx, block_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxBft, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxBft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxBft, new_tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxBft, to_tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxBft, ltx_prepare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxBft, btx_prepare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxBft, ltx_precommit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxBft, btx_precommit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::TxBft, ltx_commit_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, bft_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, net_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, sign_challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, sign_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, secret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, agg_sign_challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, agg_sign_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, bitmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, agree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, pool_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, prepare_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, node_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, node_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, member_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, backup_enc_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, elect_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, bls_sign_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::bft::protobuf::BftMessage, bls_sign_y_),
  0,
  15,
  17,
  16,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  18,
  19,
  8,
  9,
  10,
  20,
  21,
  23,
  11,
  12,
  22,
  13,
  14,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::tenon::bft::protobuf::AccountAttributes)},
  { 9, 17, sizeof(::tenon::bft::protobuf::StorageItem)},
  { 20, 28, sizeof(::tenon::bft::protobuf::TransferItem)},
  { 31, 56, sizeof(::tenon::bft::protobuf::TxInfo)},
  { 76, 96, sizeof(::tenon::bft::protobuf::Block)},
  { 111, 118, sizeof(::tenon::bft::protobuf::TxPrepareItem)},
  { 120, 127, sizeof(::tenon::bft::protobuf::LeaderTxPrepare)},
  { 129, 135, sizeof(::tenon::bft::protobuf::BackupTxPrepare)},
  { 136, 142, sizeof(::tenon::bft::protobuf::LeaderTxPreCommit)},
  { 143, 149, sizeof(::tenon::bft::protobuf::BackupTxPreCommit)},
  { 150, 156, sizeof(::tenon::bft::protobuf::LeaderTxCommit)},
  { 157, 163, sizeof(::tenon::bft::protobuf::ToAccountTx)},
  { 164, 176, sizeof(::tenon::bft::protobuf::TxBft)},
  { 183, 213, sizeof(::tenon::bft::protobuf::BftMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_AccountAttributes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_StorageItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_TransferItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_TxInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_Block_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_TxPrepareItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_LeaderTxPrepare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_BackupTxPrepare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_LeaderTxPreCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_BackupTxPreCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_LeaderTxCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_ToAccountTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_TxBft_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::bft::protobuf::_BftMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "bft.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tbft.proto\022\022tenon.bft.protobuf\"/\n\021Accou"
      "ntAttributes\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014"
      "\"5\n\013StorageItem\022\n\n\002id\030\001 \001(\014\022\013\n\003key\030\002 \001(\014"
      "\022\r\n\005value\030\003 \001(\014\"8\n\014TransferItem\022\014\n\004from\030"
      "\001 \001(\014\022\n\n\002to\030\002 \001(\014\022\016\n\006amount\030\003 \001(\004\"\315\003\n\006Tx"
      "Info\022\017\n\007version\030\001 \001(\r\022\013\n\003gid\030\002 \001(\014\022\014\n\004fr"
      "om\030\003 \001(\014\022\023\n\013from_pubkey\030\004 \001(\014\022\021\n\tfrom_si"
      "gn\030\005 \001(\014\022\n\n\002to\030\006 \001(\014\022\016\n\006amount\030\007 \001(\004\022\021\n\t"
      "gas_limit\030\010 \001(\004\022\020\n\010gas_used\030\t \001(\004\022\021\n\tgas"
      "_price\030\n \001(\004\022\017\n\007balance\030\013 \001(\004\022\016\n\006to_add\030"
      "\014 \001(\010\022\014\n\004type\030\r \001(\r\0223\n\004attr\030\016 \003(\0132%.teno"
      "n.bft.protobuf.AccountAttributes\022\016\n\006stat"
      "us\030\017 \001(\r\022\017\n\007tx_hash\030\020 \001(\014\022\022\n\nnetwork_id\030"
      "\021 \001(\r\022\032\n\022call_contract_step\030\022 \001(\r\0221\n\010sto"
      "rages\030\023 \003(\0132\037.tenon.bft.protobuf.Storage"
      "Item\0223\n\ttransfers\030\024 \003(\0132 .tenon.bft.prot"
      "obuf.TransferItem\"\333\002\n\005Block\022\022\n\nnetwork_i"
      "d\030\001 \001(\r\022\022\n\npool_index\030\002 \001(\r\022\017\n\007prehash\030\003"
      " \001(\014\022\014\n\004hash\030\004 \001(\014\022\017\n\007version\030\005 \001(\r\022\016\n\006h"
      "eight\030\006 \001(\004\022\032\n\022consistency_random\030\007 \001(\004\022"
      "\031\n\021electblock_height\030\010 \001(\r\022\016\n\006bitmap\030\t \003"
      "(\004\022\022\n\nagg_pubkey\030\n \001(\014\022\032\n\022agg_sign_chall"
      "enge\030\013 \001(\014\022\031\n\021agg_sign_response\030\014 \001(\014\022+\n"
      "\007tx_list\030\r \003(\0132\032.tenon.bft.protobuf.TxIn"
      "fo\022\021\n\ttimestamp\030\016 \001(\004\022\030\n\020timeblock_heigh"
      "t\030\017 \001(\004\".\n\rTxPrepareItem\022\020\n\010acc_addr\030\001 \001"
      "(\014\022\013\n\003gid\030\002 \001(\014\"k\n\017LeaderTxPrepare\022.\n\003tx"
      "s\030\001 \003(\0132!.tenon.bft.protobuf.TxPrepareIt"
      "em\022(\n\005block\030\002 \001(\0132\031.tenon.bft.protobuf.B"
      "lock\"!\n\017BackupTxPrepare\022\016\n\006status\030\001 \001(\005\""
      "#\n\021LeaderTxPreCommit\022\016\n\006status\030\001 \001(\005\"#\n\021"
      "BackupTxPreCommit\022\016\n\006status\030\001 \001(\005\" \n\016Lea"
      "derTxCommit\022\016\n\006status\030\001 \001(\005\"7\n\013ToAccount"
      "Tx\022(\n\005block\030\001 \001(\0132\031.tenon.bft.protobuf.B"
      "lock\"\213\003\n\005TxBft\022*\n\006new_tx\030\001 \001(\0132\032.tenon.b"
      "ft.protobuf.TxInfo\022.\n\005to_tx\030\002 \001(\0132\037.teno"
      "n.bft.protobuf.ToAccountTx\0228\n\013ltx_prepar"
      "e\030\003 \001(\0132#.tenon.bft.protobuf.LeaderTxPre"
      "pare\0228\n\013btx_prepare\030\004 \001(\0132#.tenon.bft.pr"
      "otobuf.BackupTxPrepare\022<\n\rltx_precommit\030"
      "\005 \001(\0132%.tenon.bft.protobuf.LeaderTxPreCo"
      "mmit\022<\n\rbtx_precommit\030\006 \001(\0132%.tenon.bft."
      "protobuf.BackupTxPreCommit\0226\n\nltx_commit"
      "\030\007 \001(\0132\".tenon.bft.protobuf.LeaderTxComm"
      "it\"\355\003\n\nBftMessage\022\013\n\003gid\030\001 \001(\014\022\020\n\010bft_st"
      "ep\030\002 \001(\005\022\016\n\006leader\030\003 \001(\010\022\016\n\006net_id\030\004 \001(\r"
      "\022\026\n\016sign_challenge\030\005 \001(\014\022\025\n\rsign_respons"
      "e\030\006 \001(\014\022\016\n\006secret\030\007 \001(\014\022\021\n\tchallenge\030\010 \001"
      "(\014\022\020\n\010response\030\t \001(\014\022\032\n\022agg_sign_challen"
      "ge\030\n \001(\014\022\031\n\021agg_sign_response\030\013 \001(\014\022\016\n\006b"
      "itmap\030\014 \003(\004\022\r\n\005agree\030\r \001(\010\022\022\n\npool_index"
      "\030\016 \001(\r\022\014\n\004data\030\017 \001(\014\022\024\n\014prepare_hash\030\020 \001"
      "(\014\022\017\n\007node_ip\030\021 \001(\014\022\021\n\tnode_port\030\022 \001(\r\022\r"
      "\n\005epoch\030\023 \001(\r\022\024\n\014member_index\030\024 \001(\r\022\016\n\006p"
      "ubkey\030\025 \001(\014\022\027\n\017backup_enc_data\030\026 \001(\014\022\024\n\014"
      "elect_height\030\027 \001(\004\022\022\n\nbls_sign_x\030\030 \001(\014\022\022"
      "\n\nbls_sign_y\030\031 \001(\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bft.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_bft_2eproto
namespace tenon {
namespace bft {
namespace protobuf {

// ===================================================================

void AccountAttributes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountAttributes::kKeyFieldNumber;
const int AccountAttributes::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountAttributes::AccountAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_AccountAttributes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.AccountAttributes)
}
AccountAttributes::AccountAttributes(const AccountAttributes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.AccountAttributes)
}

void AccountAttributes::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AccountAttributes::~AccountAttributes() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.AccountAttributes)
  SharedDtor();
}

void AccountAttributes::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountAttributes::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountAttributes& AccountAttributes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_AccountAttributes.base);
  return *internal_default_instance();
}


void AccountAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.AccountAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.AccountAttributes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.AccountAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.AccountAttributes)
  return false;
#undef DO_
}

void AccountAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.AccountAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.AccountAttributes)
}

::google::protobuf::uint8* AccountAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.AccountAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.AccountAttributes)
  return target;
}

size_t AccountAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.AccountAttributes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.AccountAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountAttributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.AccountAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.AccountAttributes)
    MergeFrom(*source);
  }
}

void AccountAttributes::MergeFrom(const AccountAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.AccountAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void AccountAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.AccountAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountAttributes::CopyFrom(const AccountAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.AccountAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountAttributes::IsInitialized() const {
  return true;
}

void AccountAttributes::Swap(AccountAttributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountAttributes::InternalSwap(AccountAttributes* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountAttributes::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StorageItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageItem::kIdFieldNumber;
const int StorageItem::kKeyFieldNumber;
const int StorageItem::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageItem::StorageItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_StorageItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.StorageItem)
}
StorageItem::StorageItem(const StorageItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.StorageItem)
}

void StorageItem::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StorageItem::~StorageItem() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.StorageItem)
  SharedDtor();
}

void StorageItem::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StorageItem::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageItem& StorageItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_StorageItem.base);
  return *internal_default_instance();
}


void StorageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.StorageItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StorageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.StorageItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.StorageItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.StorageItem)
  return false;
#undef DO_
}

void StorageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.StorageItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional bytes key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.StorageItem)
}

::google::protobuf::uint8* StorageItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.StorageItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional bytes key = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.StorageItem)
  return target;
}

size_t StorageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.StorageItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.StorageItem)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.StorageItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.StorageItem)
    MergeFrom(*source);
  }
}

void StorageItem::MergeFrom(const StorageItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.StorageItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void StorageItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.StorageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageItem::CopyFrom(const StorageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.StorageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageItem::IsInitialized() const {
  return true;
}

void StorageItem::Swap(StorageItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageItem::InternalSwap(StorageItem* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StorageItem::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransferItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferItem::kFromFieldNumber;
const int TransferItem::kToFieldNumber;
const int TransferItem::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferItem::TransferItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_TransferItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.TransferItem)
}
TransferItem::TransferItem(const TransferItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from()) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to()) {
    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.TransferItem)
}

void TransferItem::SharedCtor() {
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_ULONGLONG(0);
}

TransferItem::~TransferItem() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.TransferItem)
  SharedDtor();
}

void TransferItem::SharedDtor() {
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransferItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransferItem::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferItem& TransferItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_TransferItem.base);
  return *internal_default_instance();
}


void TransferItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.TransferItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      from_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      to_.ClearNonDefaultToEmptyNoArena();
    }
  }
  amount_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransferItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.TransferItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.TransferItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.TransferItem)
  return false;
#undef DO_
}

void TransferItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.TransferItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->from(), output);
  }

  // optional bytes to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->to(), output);
  }

  // optional uint64 amount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.TransferItem)
}

::google::protobuf::uint8* TransferItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.TransferItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes from = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->from(), target);
  }

  // optional bytes to = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->to(), target);
  }

  // optional uint64 amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.TransferItem)
  return target;
}

size_t TransferItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.TransferItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }

    // optional bytes to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to());
    }

    // optional uint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.TransferItem)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.TransferItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.TransferItem)
    MergeFrom(*source);
  }
}

void TransferItem::MergeFrom(const TransferItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.TransferItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from();
      from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to();
      to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransferItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.TransferItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferItem::CopyFrom(const TransferItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.TransferItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferItem::IsInitialized() const {
  return true;
}

void TransferItem::Swap(TransferItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferItem::InternalSwap(TransferItem* other) {
  using std::swap;
  from_.Swap(&other->from_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_.Swap(&other->to_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransferItem::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TxInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxInfo::kVersionFieldNumber;
const int TxInfo::kGidFieldNumber;
const int TxInfo::kFromFieldNumber;
const int TxInfo::kFromPubkeyFieldNumber;
const int TxInfo::kFromSignFieldNumber;
const int TxInfo::kToFieldNumber;
const int TxInfo::kAmountFieldNumber;
const int TxInfo::kGasLimitFieldNumber;
const int TxInfo::kGasUsedFieldNumber;
const int TxInfo::kGasPriceFieldNumber;
const int TxInfo::kBalanceFieldNumber;
const int TxInfo::kToAddFieldNumber;
const int TxInfo::kTypeFieldNumber;
const int TxInfo::kAttrFieldNumber;
const int TxInfo::kStatusFieldNumber;
const int TxInfo::kTxHashFieldNumber;
const int TxInfo::kNetworkIdFieldNumber;
const int TxInfo::kCallContractStepFieldNumber;
const int TxInfo::kStoragesFieldNumber;
const int TxInfo::kTransfersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxInfo::TxInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_TxInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.TxInfo)
}
TxInfo::TxInfo(const TxInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      attr_(from.attr_),
      storages_(from.storages_),
      transfers_(from.transfers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gid()) {
    gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
  }
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from()) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  from_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_pubkey()) {
    from_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_pubkey_);
  }
  from_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_sign()) {
    from_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_sign_);
  }
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to()) {
    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tx_hash()) {
    tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&call_contract_step_) -
    reinterpret_cast<char*>(&version_)) + sizeof(call_contract_step_));
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.TxInfo)
}

void TxInfo::SharedCtor() {
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_contract_step_) -
      reinterpret_cast<char*>(&version_)) + sizeof(call_contract_step_));
}

TxInfo::~TxInfo() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.TxInfo)
  SharedDtor();
}

void TxInfo::SharedDtor() {
  gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TxInfo::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxInfo& TxInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_TxInfo.base);
  return *internal_default_instance();
}


void TxInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.TxInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attr_.Clear();
  storages_.Clear();
  transfers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      gid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      from_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      from_pubkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      from_sign_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      to_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      tx_hash_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&to_add_) -
        reinterpret_cast<char*>(&version_)) + sizeof(to_add_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&network_id_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(network_id_));
  }
  call_contract_step_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.TxInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes gid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes from = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes from_pubkey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes from_sign = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes to = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 amount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gas_limit = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_gas_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gas_used = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_gas_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gas_price = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_gas_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 balance = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool to_add = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_to_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tenon.bft.protobuf.AccountAttributes attr = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes tx_hash = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 network_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_network_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 call_contract_step = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_call_contract_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_contract_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tenon.bft.protobuf.StorageItem storages = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_storages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tenon.bft.protobuf.TransferItem transfers = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_transfers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.TxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.TxInfo)
  return false;
#undef DO_
}

void TxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.TxInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional bytes gid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->gid(), output);
  }

  // optional bytes from = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->from(), output);
  }

  // optional bytes from_pubkey = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->from_pubkey(), output);
  }

  // optional bytes from_sign = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->from_sign(), output);
  }

  // optional bytes to = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->to(), output);
  }

  // optional uint64 amount = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->amount(), output);
  }

  // optional uint64 gas_limit = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->gas_limit(), output);
  }

  // optional uint64 gas_used = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->gas_used(), output);
  }

  // optional uint64 gas_price = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->gas_price(), output);
  }

  // optional uint64 balance = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->balance(), output);
  }

  // optional bool to_add = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->to_add(), output);
  }

  // optional uint32 type = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->type(), output);
  }

  // repeated .tenon.bft.protobuf.AccountAttributes attr = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->attr(static_cast<int>(i)),
      output);
  }

  // optional uint32 status = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->status(), output);
  }

  // optional bytes tx_hash = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->tx_hash(), output);
  }

  // optional uint32 network_id = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->network_id(), output);
  }

  // optional uint32 call_contract_step = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->call_contract_step(), output);
  }

  // repeated .tenon.bft.protobuf.StorageItem storages = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->storages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->storages(static_cast<int>(i)),
      output);
  }

  // repeated .tenon.bft.protobuf.TransferItem transfers = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transfers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->transfers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.TxInfo)
}

::google::protobuf::uint8* TxInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.TxInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional bytes gid = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->gid(), target);
  }

  // optional bytes from = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->from(), target);
  }

  // optional bytes from_pubkey = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->from_pubkey(), target);
  }

  // optional bytes from_sign = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->from_sign(), target);
  }

  // optional bytes to = 6;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->to(), target);
  }

  // optional uint64 amount = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->amount(), target);
  }

  // optional uint64 gas_limit = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->gas_limit(), target);
  }

  // optional uint64 gas_used = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->gas_used(), target);
  }

  // optional uint64 gas_price = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->gas_price(), target);
  }

  // optional uint64 balance = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->balance(), target);
  }

  // optional bool to_add = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->to_add(), target);
  }

  // optional uint32 type = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->type(), target);
  }

  // repeated .tenon.bft.protobuf.AccountAttributes attr = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->attr(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 status = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->status(), target);
  }

  // optional bytes tx_hash = 16;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->tx_hash(), target);
  }

  // optional uint32 network_id = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->network_id(), target);
  }

  // optional uint32 call_contract_step = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->call_contract_step(), target);
  }

  // repeated .tenon.bft.protobuf.StorageItem storages = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->storages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->storages(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tenon.bft.protobuf.TransferItem transfers = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transfers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->transfers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.TxInfo)
  return target;
}

size_t TxInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.TxInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tenon.bft.protobuf.AccountAttributes attr = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->attr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->attr(static_cast<int>(i)));
    }
  }

  // repeated .tenon.bft.protobuf.StorageItem storages = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->storages_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->storages(static_cast<int>(i)));
    }
  }

  // repeated .tenon.bft.protobuf.TransferItem transfers = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->transfers_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->transfers(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

    // optional bytes from = 3;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }

    // optional bytes from_pubkey = 4;
    if (has_from_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from_pubkey());
    }

    // optional bytes from_sign = 5;
    if (has_from_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from_sign());
    }

    // optional bytes to = 6;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to());
    }

    // optional bytes tx_hash = 16;
    if (has_tx_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tx_hash());
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional bool to_add = 12;
    if (has_to_add()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 amount = 7;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint64 gas_limit = 8;
    if (has_gas_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gas_limit());
    }

    // optional uint64 gas_used = 9;
    if (has_gas_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gas_used());
    }

    // optional uint64 gas_price = 10;
    if (has_gas_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gas_price());
    }

    // optional uint64 balance = 11;
    if (has_balance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->balance());
    }

    // optional uint32 type = 13;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 status = 15;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 network_id = 17;
    if (has_network_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_id());
    }

  }
  // optional uint32 call_contract_step = 18;
  if (has_call_contract_step()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->call_contract_step());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.TxInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TxInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.TxInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.TxInfo)
    MergeFrom(*source);
  }
}

void TxInfo::MergeFrom(const TxInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.TxInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attr_.MergeFrom(from.attr_);
  storages_.MergeFrom(from.storages_);
  transfers_.MergeFrom(from.transfers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gid();
      gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_from();
      from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_from_pubkey();
      from_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_pubkey_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_from_sign();
      from_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_sign_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_to();
      to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_tx_hash();
      tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
    }
    if (cached_has_bits & 0x00000040u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000080u) {
      to_add_ = from.to_add_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000200u) {
      gas_limit_ = from.gas_limit_;
    }
    if (cached_has_bits & 0x00000400u) {
      gas_used_ = from.gas_used_;
    }
    if (cached_has_bits & 0x00000800u) {
      gas_price_ = from.gas_price_;
    }
    if (cached_has_bits & 0x00001000u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00002000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00004000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00008000u) {
      network_id_ = from.network_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_call_contract_step(from.call_contract_step());
  }
}

void TxInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.TxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxInfo::CopyFrom(const TxInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.TxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxInfo::IsInitialized() const {
  return true;
}

void TxInfo::Swap(TxInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxInfo::InternalSwap(TxInfo* other) {
  using std::swap;
  CastToBase(&attr_)->InternalSwap(CastToBase(&other->attr_));
  CastToBase(&storages_)->InternalSwap(CastToBase(&other->storages_));
  CastToBase(&transfers_)->InternalSwap(CastToBase(&other->transfers_));
  gid_.Swap(&other->gid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_.Swap(&other->from_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_pubkey_.Swap(&other->from_pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_sign_.Swap(&other->from_sign_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_.Swap(&other->to_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tx_hash_.Swap(&other->tx_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(to_add_, other->to_add_);
  swap(amount_, other->amount_);
  swap(gas_limit_, other->gas_limit_);
  swap(gas_used_, other->gas_used_);
  swap(gas_price_, other->gas_price_);
  swap(balance_, other->balance_);
  swap(type_, other->type_);
  swap(status_, other->status_);
  swap(network_id_, other->network_id_);
  swap(call_contract_step_, other->call_contract_step_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TxInfo::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Block::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kNetworkIdFieldNumber;
const int Block::kPoolIndexFieldNumber;
const int Block::kPrehashFieldNumber;
const int Block::kHashFieldNumber;
const int Block::kVersionFieldNumber;
const int Block::kHeightFieldNumber;
const int Block::kConsistencyRandomFieldNumber;
const int Block::kElectblockHeightFieldNumber;
const int Block::kBitmapFieldNumber;
const int Block::kAggPubkeyFieldNumber;
const int Block::kAggSignChallengeFieldNumber;
const int Block::kAggSignResponseFieldNumber;
const int Block::kTxListFieldNumber;
const int Block::kTimestampFieldNumber;
const int Block::kTimeblockHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_Block.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.Block)
}
Block::Block(const Block& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bitmap_(from.bitmap_),
      tx_list_(from.tx_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prehash()) {
    prehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prehash_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  agg_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_agg_pubkey()) {
    agg_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agg_pubkey_);
  }
  agg_sign_challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_agg_sign_challenge()) {
    agg_sign_challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agg_sign_challenge_);
  }
  agg_sign_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_agg_sign_response()) {
    agg_sign_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agg_sign_response_);
  }
  ::memcpy(&network_id_, &from.network_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeblock_height_) -
    reinterpret_cast<char*>(&network_id_)) + sizeof(timeblock_height_));
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.Block)
}

void Block::SharedCtor() {
  prehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agg_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agg_sign_challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agg_sign_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&network_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeblock_height_) -
      reinterpret_cast<char*>(&network_id_)) + sizeof(timeblock_height_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  prehash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agg_pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agg_sign_challenge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agg_sign_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Block& Block::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_Block.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bitmap_.Clear();
  tx_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      prehash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      agg_pubkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      agg_sign_challenge_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      agg_sign_response_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&network_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&network_id_)) + sizeof(height_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeblock_height_) -
        reinterpret_cast<char*>(&version_)) + sizeof(timeblock_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.Block)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 network_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_network_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pool_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pool_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pool_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes prehash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prehash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 consistency_random = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_consistency_random();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &consistency_random_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 electblock_height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_electblock_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &electblock_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 bitmap = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 72u, input, this->mutable_bitmap())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bitmap())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes agg_pubkey = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_agg_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes agg_sign_challenge = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_agg_sign_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes agg_sign_response = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_agg_sign_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tenon.bft.protobuf.TxInfo tx_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tx_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timeblock_height = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_timeblock_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeblock_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.Block)
  return false;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 network_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->network_id(), output);
  }

  // optional uint32 pool_index = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pool_index(), output);
  }

  // optional bytes prehash = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->prehash(), output);
  }

  // optional bytes hash = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->hash(), output);
  }

  // optional uint32 version = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->version(), output);
  }

  // optional uint64 height = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->height(), output);
  }

  // optional uint64 consistency_random = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->consistency_random(), output);
  }

  // optional uint32 electblock_height = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->electblock_height(), output);
  }

  // repeated uint64 bitmap = 9;
  for (int i = 0, n = this->bitmap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      9, this->bitmap(i), output);
  }

  // optional bytes agg_pubkey = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->agg_pubkey(), output);
  }

  // optional bytes agg_sign_challenge = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->agg_sign_challenge(), output);
  }

  // optional bytes agg_sign_response = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->agg_sign_response(), output);
  }

  // repeated .tenon.bft.protobuf.TxInfo tx_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->tx_list(static_cast<int>(i)),
      output);
  }

  // optional uint64 timestamp = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->timestamp(), output);
  }

  // optional uint64 timeblock_height = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->timeblock_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.Block)
}

::google::protobuf::uint8* Block::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 network_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->network_id(), target);
  }

  // optional uint32 pool_index = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pool_index(), target);
  }

  // optional bytes prehash = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->prehash(), target);
  }

  // optional bytes hash = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->hash(), target);
  }

  // optional uint32 version = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->version(), target);
  }

  // optional uint64 height = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->height(), target);
  }

  // optional uint64 consistency_random = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->consistency_random(), target);
  }

  // optional uint32 electblock_height = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->electblock_height(), target);
  }

  // repeated uint64 bitmap = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(9, this->bitmap_, target);

  // optional bytes agg_pubkey = 10;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->agg_pubkey(), target);
  }

  // optional bytes agg_sign_challenge = 11;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->agg_sign_challenge(), target);
  }

  // optional bytes agg_sign_response = 12;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->agg_sign_response(), target);
  }

  // repeated .tenon.bft.protobuf.TxInfo tx_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->tx_list(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 timestamp = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->timestamp(), target);
  }

  // optional uint64 timeblock_height = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->timeblock_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.Block)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 bitmap = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->bitmap_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bitmap_size());
    total_size += data_size;
  }

  // repeated .tenon.bft.protobuf.TxInfo tx_list = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->tx_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tx_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes prehash = 3;
    if (has_prehash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prehash());
    }

    // optional bytes hash = 4;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }

    // optional bytes agg_pubkey = 10;
    if (has_agg_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->agg_pubkey());
    }

    // optional bytes agg_sign_challenge = 11;
    if (has_agg_sign_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->agg_sign_challenge());
    }

    // optional bytes agg_sign_response = 12;
    if (has_agg_sign_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->agg_sign_response());
    }

    // optional uint32 network_id = 1;
    if (has_network_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_id());
    }

    // optional uint32 pool_index = 2;
    if (has_pool_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pool_index());
    }

    // optional uint64 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 electblock_height = 8;
    if (has_electblock_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->electblock_height());
    }

    // optional uint64 consistency_random = 7;
    if (has_consistency_random()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->consistency_random());
    }

    // optional uint64 timestamp = 14;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint64 timeblock_height = 15;
    if (has_timeblock_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeblock_height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Block>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bitmap_.MergeFrom(from.bitmap_);
  tx_list_.MergeFrom(from.tx_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_prehash();
      prehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prehash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_agg_pubkey();
      agg_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agg_pubkey_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_agg_sign_challenge();
      agg_sign_challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agg_sign_challenge_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_agg_sign_response();
      agg_sign_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agg_sign_response_);
    }
    if (cached_has_bits & 0x00000020u) {
      network_id_ = from.network_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      pool_index_ = from.pool_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000200u) {
      electblock_height_ = from.electblock_height_;
    }
    if (cached_has_bits & 0x00000400u) {
      consistency_random_ = from.consistency_random_;
    }
    if (cached_has_bits & 0x00000800u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      timeblock_height_ = from.timeblock_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  using std::swap;
  bitmap_.InternalSwap(&other->bitmap_);
  CastToBase(&tx_list_)->InternalSwap(CastToBase(&other->tx_list_));
  prehash_.Swap(&other->prehash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  agg_pubkey_.Swap(&other->agg_pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  agg_sign_challenge_.Swap(&other->agg_sign_challenge_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  agg_sign_response_.Swap(&other->agg_sign_response_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(network_id_, other->network_id_);
  swap(pool_index_, other->pool_index_);
  swap(height_, other->height_);
  swap(version_, other->version_);
  swap(electblock_height_, other->electblock_height_);
  swap(consistency_random_, other->consistency_random_);
  swap(timestamp_, other->timestamp_);
  swap(timeblock_height_, other->timeblock_height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TxPrepareItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxPrepareItem::kAccAddrFieldNumber;
const int TxPrepareItem::kGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxPrepareItem::TxPrepareItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_TxPrepareItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.TxPrepareItem)
}
TxPrepareItem::TxPrepareItem(const TxPrepareItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acc_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_acc_addr()) {
    acc_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_addr_);
  }
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gid()) {
    gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
  }
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.TxPrepareItem)
}

void TxPrepareItem::SharedCtor() {
  acc_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TxPrepareItem::~TxPrepareItem() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.TxPrepareItem)
  SharedDtor();
}

void TxPrepareItem::SharedDtor() {
  acc_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxPrepareItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TxPrepareItem::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxPrepareItem& TxPrepareItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_TxPrepareItem.base);
  return *internal_default_instance();
}


void TxPrepareItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.TxPrepareItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      acc_addr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      gid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TxPrepareItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.TxPrepareItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes acc_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_acc_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes gid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.TxPrepareItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.TxPrepareItem)
  return false;
#undef DO_
}

void TxPrepareItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.TxPrepareItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes acc_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->acc_addr(), output);
  }

  // optional bytes gid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.TxPrepareItem)
}

::google::protobuf::uint8* TxPrepareItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.TxPrepareItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes acc_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->acc_addr(), target);
  }

  // optional bytes gid = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.TxPrepareItem)
  return target;
}

size_t TxPrepareItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.TxPrepareItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes acc_addr = 1;
    if (has_acc_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->acc_addr());
    }

    // optional bytes gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxPrepareItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.TxPrepareItem)
  GOOGLE_DCHECK_NE(&from, this);
  const TxPrepareItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxPrepareItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.TxPrepareItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.TxPrepareItem)
    MergeFrom(*source);
  }
}

void TxPrepareItem::MergeFrom(const TxPrepareItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.TxPrepareItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_acc_addr();
      acc_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_gid();
      gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
    }
  }
}

void TxPrepareItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.TxPrepareItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxPrepareItem::CopyFrom(const TxPrepareItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.TxPrepareItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxPrepareItem::IsInitialized() const {
  return true;
}

void TxPrepareItem::Swap(TxPrepareItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxPrepareItem::InternalSwap(TxPrepareItem* other) {
  using std::swap;
  acc_addr_.Swap(&other->acc_addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gid_.Swap(&other->gid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TxPrepareItem::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeaderTxPrepare::InitAsDefaultInstance() {
  ::tenon::bft::protobuf::_LeaderTxPrepare_default_instance_._instance.get_mutable()->block_ = const_cast< ::tenon::bft::protobuf::Block*>(
      ::tenon::bft::protobuf::Block::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderTxPrepare::kTxsFieldNumber;
const int LeaderTxPrepare::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderTxPrepare::LeaderTxPrepare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_LeaderTxPrepare.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.LeaderTxPrepare)
}
LeaderTxPrepare::LeaderTxPrepare(const LeaderTxPrepare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      txs_(from.txs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block()) {
    block_ = new ::tenon::bft::protobuf::Block(*from.block_);
  } else {
    block_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.LeaderTxPrepare)
}

void LeaderTxPrepare::SharedCtor() {
  block_ = NULL;
}

LeaderTxPrepare::~LeaderTxPrepare() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.LeaderTxPrepare)
  SharedDtor();
}

void LeaderTxPrepare::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void LeaderTxPrepare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LeaderTxPrepare::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderTxPrepare& LeaderTxPrepare::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_LeaderTxPrepare.base);
  return *internal_default_instance();
}


void LeaderTxPrepare::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.LeaderTxPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(block_ != NULL);
    block_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaderTxPrepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.LeaderTxPrepare)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tenon.bft.protobuf.TxPrepareItem txs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_txs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.bft.protobuf.Block block = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.LeaderTxPrepare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.LeaderTxPrepare)
  return false;
#undef DO_
}

void LeaderTxPrepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.LeaderTxPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tenon.bft.protobuf.TxPrepareItem txs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->txs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->txs(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .tenon.bft.protobuf.Block block = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_block(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.LeaderTxPrepare)
}

::google::protobuf::uint8* LeaderTxPrepare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.LeaderTxPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tenon.bft.protobuf.TxPrepareItem txs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->txs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->txs(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .tenon.bft.protobuf.Block block = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_block(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.LeaderTxPrepare)
  return target;
}

size_t LeaderTxPrepare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.LeaderTxPrepare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tenon.bft.protobuf.TxPrepareItem txs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->txs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->txs(static_cast<int>(i)));
    }
  }

  // optional .tenon.bft.protobuf.Block block = 2;
  if (has_block()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *block_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderTxPrepare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.LeaderTxPrepare)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderTxPrepare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderTxPrepare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.LeaderTxPrepare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.LeaderTxPrepare)
    MergeFrom(*source);
  }
}

void LeaderTxPrepare::MergeFrom(const LeaderTxPrepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.LeaderTxPrepare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  txs_.MergeFrom(from.txs_);
  if (from.has_block()) {
    mutable_block()->::tenon::bft::protobuf::Block::MergeFrom(from.block());
  }
}

void LeaderTxPrepare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.LeaderTxPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderTxPrepare::CopyFrom(const LeaderTxPrepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.LeaderTxPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderTxPrepare::IsInitialized() const {
  return true;
}

void LeaderTxPrepare::Swap(LeaderTxPrepare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderTxPrepare::InternalSwap(LeaderTxPrepare* other) {
  using std::swap;
  CastToBase(&txs_)->InternalSwap(CastToBase(&other->txs_));
  swap(block_, other->block_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LeaderTxPrepare::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BackupTxPrepare::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupTxPrepare::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupTxPrepare::BackupTxPrepare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_BackupTxPrepare.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.BackupTxPrepare)
}
BackupTxPrepare::BackupTxPrepare(const BackupTxPrepare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.BackupTxPrepare)
}

void BackupTxPrepare::SharedCtor() {
  status_ = 0;
}

BackupTxPrepare::~BackupTxPrepare() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.BackupTxPrepare)
  SharedDtor();
}

void BackupTxPrepare::SharedDtor() {
}

void BackupTxPrepare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BackupTxPrepare::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupTxPrepare& BackupTxPrepare::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_BackupTxPrepare.base);
  return *internal_default_instance();
}


void BackupTxPrepare::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.BackupTxPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupTxPrepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.BackupTxPrepare)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.BackupTxPrepare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.BackupTxPrepare)
  return false;
#undef DO_
}

void BackupTxPrepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.BackupTxPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.BackupTxPrepare)
}

::google::protobuf::uint8* BackupTxPrepare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.BackupTxPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.BackupTxPrepare)
  return target;
}

size_t BackupTxPrepare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.BackupTxPrepare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackupTxPrepare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.BackupTxPrepare)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupTxPrepare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupTxPrepare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.BackupTxPrepare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.BackupTxPrepare)
    MergeFrom(*source);
  }
}

void BackupTxPrepare::MergeFrom(const BackupTxPrepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.BackupTxPrepare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    set_status(from.status());
  }
}

void BackupTxPrepare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.BackupTxPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupTxPrepare::CopyFrom(const BackupTxPrepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.BackupTxPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupTxPrepare::IsInitialized() const {
  return true;
}

void BackupTxPrepare::Swap(BackupTxPrepare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupTxPrepare::InternalSwap(BackupTxPrepare* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BackupTxPrepare::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeaderTxPreCommit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderTxPreCommit::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderTxPreCommit::LeaderTxPreCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_LeaderTxPreCommit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.LeaderTxPreCommit)
}
LeaderTxPreCommit::LeaderTxPreCommit(const LeaderTxPreCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.LeaderTxPreCommit)
}

void LeaderTxPreCommit::SharedCtor() {
  status_ = 0;
}

LeaderTxPreCommit::~LeaderTxPreCommit() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.LeaderTxPreCommit)
  SharedDtor();
}

void LeaderTxPreCommit::SharedDtor() {
}

void LeaderTxPreCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LeaderTxPreCommit::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderTxPreCommit& LeaderTxPreCommit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_LeaderTxPreCommit.base);
  return *internal_default_instance();
}


void LeaderTxPreCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.LeaderTxPreCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaderTxPreCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.LeaderTxPreCommit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.LeaderTxPreCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.LeaderTxPreCommit)
  return false;
#undef DO_
}

void LeaderTxPreCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.LeaderTxPreCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.LeaderTxPreCommit)
}

::google::protobuf::uint8* LeaderTxPreCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.LeaderTxPreCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.LeaderTxPreCommit)
  return target;
}

size_t LeaderTxPreCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.LeaderTxPreCommit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderTxPreCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.LeaderTxPreCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderTxPreCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderTxPreCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.LeaderTxPreCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.LeaderTxPreCommit)
    MergeFrom(*source);
  }
}

void LeaderTxPreCommit::MergeFrom(const LeaderTxPreCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.LeaderTxPreCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    set_status(from.status());
  }
}

void LeaderTxPreCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.LeaderTxPreCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderTxPreCommit::CopyFrom(const LeaderTxPreCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.LeaderTxPreCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderTxPreCommit::IsInitialized() const {
  return true;
}

void LeaderTxPreCommit::Swap(LeaderTxPreCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderTxPreCommit::InternalSwap(LeaderTxPreCommit* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LeaderTxPreCommit::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BackupTxPreCommit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupTxPreCommit::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupTxPreCommit::BackupTxPreCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_BackupTxPreCommit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.BackupTxPreCommit)
}
BackupTxPreCommit::BackupTxPreCommit(const BackupTxPreCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.BackupTxPreCommit)
}

void BackupTxPreCommit::SharedCtor() {
  status_ = 0;
}

BackupTxPreCommit::~BackupTxPreCommit() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.BackupTxPreCommit)
  SharedDtor();
}

void BackupTxPreCommit::SharedDtor() {
}

void BackupTxPreCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BackupTxPreCommit::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupTxPreCommit& BackupTxPreCommit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_BackupTxPreCommit.base);
  return *internal_default_instance();
}


void BackupTxPreCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.BackupTxPreCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupTxPreCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.BackupTxPreCommit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.BackupTxPreCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.BackupTxPreCommit)
  return false;
#undef DO_
}

void BackupTxPreCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.BackupTxPreCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.BackupTxPreCommit)
}

::google::protobuf::uint8* BackupTxPreCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.BackupTxPreCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.BackupTxPreCommit)
  return target;
}

size_t BackupTxPreCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.BackupTxPreCommit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackupTxPreCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.BackupTxPreCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupTxPreCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupTxPreCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.BackupTxPreCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.BackupTxPreCommit)
    MergeFrom(*source);
  }
}

void BackupTxPreCommit::MergeFrom(const BackupTxPreCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.BackupTxPreCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    set_status(from.status());
  }
}

void BackupTxPreCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.BackupTxPreCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupTxPreCommit::CopyFrom(const BackupTxPreCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.BackupTxPreCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupTxPreCommit::IsInitialized() const {
  return true;
}

void BackupTxPreCommit::Swap(BackupTxPreCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupTxPreCommit::InternalSwap(BackupTxPreCommit* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BackupTxPreCommit::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeaderTxCommit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderTxCommit::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderTxCommit::LeaderTxCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_LeaderTxCommit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.LeaderTxCommit)
}
LeaderTxCommit::LeaderTxCommit(const LeaderTxCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.LeaderTxCommit)
}

void LeaderTxCommit::SharedCtor() {
  status_ = 0;
}

LeaderTxCommit::~LeaderTxCommit() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.LeaderTxCommit)
  SharedDtor();
}

void LeaderTxCommit::SharedDtor() {
}

void LeaderTxCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LeaderTxCommit::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderTxCommit& LeaderTxCommit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_LeaderTxCommit.base);
  return *internal_default_instance();
}


void LeaderTxCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.LeaderTxCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaderTxCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.LeaderTxCommit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.LeaderTxCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.LeaderTxCommit)
  return false;
#undef DO_
}

void LeaderTxCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.LeaderTxCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.LeaderTxCommit)
}

::google::protobuf::uint8* LeaderTxCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.LeaderTxCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.LeaderTxCommit)
  return target;
}

size_t LeaderTxCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.LeaderTxCommit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderTxCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.LeaderTxCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderTxCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderTxCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.LeaderTxCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.LeaderTxCommit)
    MergeFrom(*source);
  }
}

void LeaderTxCommit::MergeFrom(const LeaderTxCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.LeaderTxCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    set_status(from.status());
  }
}

void LeaderTxCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.LeaderTxCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderTxCommit::CopyFrom(const LeaderTxCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.LeaderTxCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderTxCommit::IsInitialized() const {
  return true;
}

void LeaderTxCommit::Swap(LeaderTxCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderTxCommit::InternalSwap(LeaderTxCommit* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LeaderTxCommit::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ToAccountTx::InitAsDefaultInstance() {
  ::tenon::bft::protobuf::_ToAccountTx_default_instance_._instance.get_mutable()->block_ = const_cast< ::tenon::bft::protobuf::Block*>(
      ::tenon::bft::protobuf::Block::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToAccountTx::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToAccountTx::ToAccountTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_ToAccountTx.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.ToAccountTx)
}
ToAccountTx::ToAccountTx(const ToAccountTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block()) {
    block_ = new ::tenon::bft::protobuf::Block(*from.block_);
  } else {
    block_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.ToAccountTx)
}

void ToAccountTx::SharedCtor() {
  block_ = NULL;
}

ToAccountTx::~ToAccountTx() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.ToAccountTx)
  SharedDtor();
}

void ToAccountTx::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void ToAccountTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ToAccountTx::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToAccountTx& ToAccountTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_ToAccountTx.base);
  return *internal_default_instance();
}


void ToAccountTx::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.ToAccountTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(block_ != NULL);
    block_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToAccountTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.ToAccountTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tenon.bft.protobuf.Block block = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.ToAccountTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.ToAccountTx)
  return false;
#undef DO_
}

void ToAccountTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.ToAccountTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.bft.protobuf.Block block = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_block(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.ToAccountTx)
}

::google::protobuf::uint8* ToAccountTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.ToAccountTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.bft.protobuf.Block block = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_block(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.ToAccountTx)
  return target;
}

size_t ToAccountTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.ToAccountTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .tenon.bft.protobuf.Block block = 1;
  if (has_block()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *block_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToAccountTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.ToAccountTx)
  GOOGLE_DCHECK_NE(&from, this);
  const ToAccountTx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToAccountTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.ToAccountTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.ToAccountTx)
    MergeFrom(*source);
  }
}

void ToAccountTx::MergeFrom(const ToAccountTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.ToAccountTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    mutable_block()->::tenon::bft::protobuf::Block::MergeFrom(from.block());
  }
}

void ToAccountTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.ToAccountTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToAccountTx::CopyFrom(const ToAccountTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.ToAccountTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToAccountTx::IsInitialized() const {
  return true;
}

void ToAccountTx::Swap(ToAccountTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToAccountTx::InternalSwap(ToAccountTx* other) {
  using std::swap;
  swap(block_, other->block_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ToAccountTx::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TxBft::InitAsDefaultInstance() {
  ::tenon::bft::protobuf::_TxBft_default_instance_._instance.get_mutable()->new_tx_ = const_cast< ::tenon::bft::protobuf::TxInfo*>(
      ::tenon::bft::protobuf::TxInfo::internal_default_instance());
  ::tenon::bft::protobuf::_TxBft_default_instance_._instance.get_mutable()->to_tx_ = const_cast< ::tenon::bft::protobuf::ToAccountTx*>(
      ::tenon::bft::protobuf::ToAccountTx::internal_default_instance());
  ::tenon::bft::protobuf::_TxBft_default_instance_._instance.get_mutable()->ltx_prepare_ = const_cast< ::tenon::bft::protobuf::LeaderTxPrepare*>(
      ::tenon::bft::protobuf::LeaderTxPrepare::internal_default_instance());
  ::tenon::bft::protobuf::_TxBft_default_instance_._instance.get_mutable()->btx_prepare_ = const_cast< ::tenon::bft::protobuf::BackupTxPrepare*>(
      ::tenon::bft::protobuf::BackupTxPrepare::internal_default_instance());
  ::tenon::bft::protobuf::_TxBft_default_instance_._instance.get_mutable()->ltx_precommit_ = const_cast< ::tenon::bft::protobuf::LeaderTxPreCommit*>(
      ::tenon::bft::protobuf::LeaderTxPreCommit::internal_default_instance());
  ::tenon::bft::protobuf::_TxBft_default_instance_._instance.get_mutable()->btx_precommit_ = const_cast< ::tenon::bft::protobuf::BackupTxPreCommit*>(
      ::tenon::bft::protobuf::BackupTxPreCommit::internal_default_instance());
  ::tenon::bft::protobuf::_TxBft_default_instance_._instance.get_mutable()->ltx_commit_ = const_cast< ::tenon::bft::protobuf::LeaderTxCommit*>(
      ::tenon::bft::protobuf::LeaderTxCommit::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxBft::kNewTxFieldNumber;
const int TxBft::kToTxFieldNumber;
const int TxBft::kLtxPrepareFieldNumber;
const int TxBft::kBtxPrepareFieldNumber;
const int TxBft::kLtxPrecommitFieldNumber;
const int TxBft::kBtxPrecommitFieldNumber;
const int TxBft::kLtxCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxBft::TxBft()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_TxBft.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.TxBft)
}
TxBft::TxBft(const TxBft& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_new_tx()) {
    new_tx_ = new ::tenon::bft::protobuf::TxInfo(*from.new_tx_);
  } else {
    new_tx_ = NULL;
  }
  if (from.has_to_tx()) {
    to_tx_ = new ::tenon::bft::protobuf::ToAccountTx(*from.to_tx_);
  } else {
    to_tx_ = NULL;
  }
  if (from.has_ltx_prepare()) {
    ltx_prepare_ = new ::tenon::bft::protobuf::LeaderTxPrepare(*from.ltx_prepare_);
  } else {
    ltx_prepare_ = NULL;
  }
  if (from.has_btx_prepare()) {
    btx_prepare_ = new ::tenon::bft::protobuf::BackupTxPrepare(*from.btx_prepare_);
  } else {
    btx_prepare_ = NULL;
  }
  if (from.has_ltx_precommit()) {
    ltx_precommit_ = new ::tenon::bft::protobuf::LeaderTxPreCommit(*from.ltx_precommit_);
  } else {
    ltx_precommit_ = NULL;
  }
  if (from.has_btx_precommit()) {
    btx_precommit_ = new ::tenon::bft::protobuf::BackupTxPreCommit(*from.btx_precommit_);
  } else {
    btx_precommit_ = NULL;
  }
  if (from.has_ltx_commit()) {
    ltx_commit_ = new ::tenon::bft::protobuf::LeaderTxCommit(*from.ltx_commit_);
  } else {
    ltx_commit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.TxBft)
}

void TxBft::SharedCtor() {
  ::memset(&new_tx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ltx_commit_) -
      reinterpret_cast<char*>(&new_tx_)) + sizeof(ltx_commit_));
}

TxBft::~TxBft() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.TxBft)
  SharedDtor();
}

void TxBft::SharedDtor() {
  if (this != internal_default_instance()) delete new_tx_;
  if (this != internal_default_instance()) delete to_tx_;
  if (this != internal_default_instance()) delete ltx_prepare_;
  if (this != internal_default_instance()) delete btx_prepare_;
  if (this != internal_default_instance()) delete ltx_precommit_;
  if (this != internal_default_instance()) delete btx_precommit_;
  if (this != internal_default_instance()) delete ltx_commit_;
}

void TxBft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TxBft::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxBft& TxBft::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_TxBft.base);
  return *internal_default_instance();
}


void TxBft::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.TxBft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(new_tx_ != NULL);
      new_tx_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(to_tx_ != NULL);
      to_tx_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ltx_prepare_ != NULL);
      ltx_prepare_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(btx_prepare_ != NULL);
      btx_prepare_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(ltx_precommit_ != NULL);
      ltx_precommit_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(btx_precommit_ != NULL);
      btx_precommit_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(ltx_commit_ != NULL);
      ltx_commit_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TxBft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.TxBft)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tenon.bft.protobuf.TxInfo new_tx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.bft.protobuf.ToAccountTx to_tx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_to_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.bft.protobuf.LeaderTxPrepare ltx_prepare = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ltx_prepare()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.bft.protobuf.BackupTxPrepare btx_prepare = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_btx_prepare()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.bft.protobuf.LeaderTxPreCommit ltx_precommit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ltx_precommit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.bft.protobuf.BackupTxPreCommit btx_precommit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_btx_precommit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.bft.protobuf.LeaderTxCommit ltx_commit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ltx_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.TxBft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.TxBft)
  return false;
#undef DO_
}

void TxBft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.TxBft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.bft.protobuf.TxInfo new_tx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_new_tx(), output);
  }

  // optional .tenon.bft.protobuf.ToAccountTx to_tx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_to_tx(), output);
  }

  // optional .tenon.bft.protobuf.LeaderTxPrepare ltx_prepare = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_ltx_prepare(), output);
  }

  // optional .tenon.bft.protobuf.BackupTxPrepare btx_prepare = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_btx_prepare(), output);
  }

  // optional .tenon.bft.protobuf.LeaderTxPreCommit ltx_precommit = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_ltx_precommit(), output);
  }

  // optional .tenon.bft.protobuf.BackupTxPreCommit btx_precommit = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_btx_precommit(), output);
  }

  // optional .tenon.bft.protobuf.LeaderTxCommit ltx_commit = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_ltx_commit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.TxBft)
}

::google::protobuf::uint8* TxBft::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.TxBft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.bft.protobuf.TxInfo new_tx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_new_tx(), deterministic, target);
  }

  // optional .tenon.bft.protobuf.ToAccountTx to_tx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_to_tx(), deterministic, target);
  }

  // optional .tenon.bft.protobuf.LeaderTxPrepare ltx_prepare = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_ltx_prepare(), deterministic, target);
  }

  // optional .tenon.bft.protobuf.BackupTxPrepare btx_prepare = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_btx_prepare(), deterministic, target);
  }

  // optional .tenon.bft.protobuf.LeaderTxPreCommit ltx_precommit = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_ltx_precommit(), deterministic, target);
  }

  // optional .tenon.bft.protobuf.BackupTxPreCommit btx_precommit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_btx_precommit(), deterministic, target);
  }

  // optional .tenon.bft.protobuf.LeaderTxCommit ltx_commit = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_ltx_commit(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.TxBft)
  return target;
}

size_t TxBft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.TxBft)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .tenon.bft.protobuf.TxInfo new_tx = 1;
    if (has_new_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *new_tx_);
    }

    // optional .tenon.bft.protobuf.ToAccountTx to_tx = 2;
    if (has_to_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *to_tx_);
    }

    // optional .tenon.bft.protobuf.LeaderTxPrepare ltx_prepare = 3;
    if (has_ltx_prepare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ltx_prepare_);
    }

    // optional .tenon.bft.protobuf.BackupTxPrepare btx_prepare = 4;
    if (has_btx_prepare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *btx_prepare_);
    }

    // optional .tenon.bft.protobuf.LeaderTxPreCommit ltx_precommit = 5;
    if (has_ltx_precommit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ltx_precommit_);
    }

    // optional .tenon.bft.protobuf.BackupTxPreCommit btx_precommit = 6;
    if (has_btx_precommit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *btx_precommit_);
    }

    // optional .tenon.bft.protobuf.LeaderTxCommit ltx_commit = 7;
    if (has_ltx_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ltx_commit_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxBft::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.TxBft)
  GOOGLE_DCHECK_NE(&from, this);
  const TxBft* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxBft>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.TxBft)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.TxBft)
    MergeFrom(*source);
  }
}

void TxBft::MergeFrom(const TxBft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.TxBft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_new_tx()->::tenon::bft::protobuf::TxInfo::MergeFrom(from.new_tx());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_to_tx()->::tenon::bft::protobuf::ToAccountTx::MergeFrom(from.to_tx());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ltx_prepare()->::tenon::bft::protobuf::LeaderTxPrepare::MergeFrom(from.ltx_prepare());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_btx_prepare()->::tenon::bft::protobuf::BackupTxPrepare::MergeFrom(from.btx_prepare());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_ltx_precommit()->::tenon::bft::protobuf::LeaderTxPreCommit::MergeFrom(from.ltx_precommit());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_btx_precommit()->::tenon::bft::protobuf::BackupTxPreCommit::MergeFrom(from.btx_precommit());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_ltx_commit()->::tenon::bft::protobuf::LeaderTxCommit::MergeFrom(from.ltx_commit());
    }
  }
}

void TxBft::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.TxBft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxBft::CopyFrom(const TxBft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.TxBft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxBft::IsInitialized() const {
  return true;
}

void TxBft::Swap(TxBft* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxBft::InternalSwap(TxBft* other) {
  using std::swap;
  swap(new_tx_, other->new_tx_);
  swap(to_tx_, other->to_tx_);
  swap(ltx_prepare_, other->ltx_prepare_);
  swap(btx_prepare_, other->btx_prepare_);
  swap(ltx_precommit_, other->ltx_precommit_);
  swap(btx_precommit_, other->btx_precommit_);
  swap(ltx_commit_, other->ltx_commit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TxBft::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BftMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BftMessage::kGidFieldNumber;
const int BftMessage::kBftStepFieldNumber;
const int BftMessage::kLeaderFieldNumber;
const int BftMessage::kNetIdFieldNumber;
const int BftMessage::kSignChallengeFieldNumber;
const int BftMessage::kSignResponseFieldNumber;
const int BftMessage::kSecretFieldNumber;
const int BftMessage::kChallengeFieldNumber;
const int BftMessage::kResponseFieldNumber;
const int BftMessage::kAggSignChallengeFieldNumber;
const int BftMessage::kAggSignResponseFieldNumber;
const int BftMessage::kBitmapFieldNumber;
const int BftMessage::kAgreeFieldNumber;
const int BftMessage::kPoolIndexFieldNumber;
const int BftMessage::kDataFieldNumber;
const int BftMessage::kPrepareHashFieldNumber;
const int BftMessage::kNodeIpFieldNumber;
const int BftMessage::kNodePortFieldNumber;
const int BftMessage::kEpochFieldNumber;
const int BftMessage::kMemberIndexFieldNumber;
const int BftMessage::kPubkeyFieldNumber;
const int BftMessage::kBackupEncDataFieldNumber;
const int BftMessage::kElectHeightFieldNumber;
const int BftMessage::kBlsSignXFieldNumber;
const int BftMessage::kBlsSignYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BftMessage::BftMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_bft_2eproto::scc_info_BftMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.bft.protobuf.BftMessage)
}
BftMessage::BftMessage(const BftMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bitmap_(from.bitmap_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gid()) {
    gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
  }
  sign_challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_challenge()) {
    sign_challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_challenge_);
  }
  sign_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_response()) {
    sign_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_response_);
  }
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secret()) {
    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_challenge()) {
    challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_);
  }
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_response()) {
    response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  agg_sign_challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_agg_sign_challenge()) {
    agg_sign_challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agg_sign_challenge_);
  }
  agg_sign_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_agg_sign_response()) {
    agg_sign_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agg_sign_response_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  prepare_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prepare_hash()) {
    prepare_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prepare_hash_);
  }
  node_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_node_ip()) {
    node_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_ip_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkey()) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  backup_enc_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_backup_enc_data()) {
    backup_enc_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backup_enc_data_);
  }
  bls_sign_x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bls_sign_x()) {
    bls_sign_x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bls_sign_x_);
  }
  bls_sign_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bls_sign_y()) {
    bls_sign_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bls_sign_y_);
  }
  ::memcpy(&bft_step_, &from.bft_step_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_index_) -
    reinterpret_cast<char*>(&bft_step_)) + sizeof(member_index_));
  // @@protoc_insertion_point(copy_constructor:tenon.bft.protobuf.BftMessage)
}

void BftMessage::SharedCtor() {
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agg_sign_challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agg_sign_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prepare_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backup_enc_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bls_sign_x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bls_sign_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bft_step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_index_) -
      reinterpret_cast<char*>(&bft_step_)) + sizeof(member_index_));
}

BftMessage::~BftMessage() {
  // @@protoc_insertion_point(destructor:tenon.bft.protobuf.BftMessage)
  SharedDtor();
}

void BftMessage::SharedDtor() {
  gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_challenge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  challenge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agg_sign_challenge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agg_sign_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prepare_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backup_enc_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bls_sign_x_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bls_sign_y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BftMessage::descriptor() {
  ::protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BftMessage& BftMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_bft_2eproto::scc_info_BftMessage.base);
  return *internal_default_instance();
}


void BftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.bft.protobuf.BftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bitmap_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      gid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sign_challenge_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      sign_response_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      secret_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      response_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      agg_sign_challenge_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      agg_sign_response_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      prepare_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      node_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      pubkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      backup_enc_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      bls_sign_x_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00004000u) {
      bls_sign_y_.ClearNonDefaultToEmptyNoArena();
    }
  }
  bft_step_ = 0;
  if (cached_has_bits & 16711680u) {
    ::memset(&net_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&member_index_) -
        reinterpret_cast<char*>(&net_id_)) + sizeof(member_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.bft.protobuf.BftMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bft_step = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bft_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bft_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool leader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_leader();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_net_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign_challenge = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign_response = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secret = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes challenge = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes response = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes agg_sign_challenge = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_agg_sign_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes agg_sign_response = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_agg_sign_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 bitmap = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 96u, input, this->mutable_bitmap())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bitmap())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool agree = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_agree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pool_index = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_pool_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pool_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes prepare_hash = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prepare_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes node_ip = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 node_port = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_node_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 epoch = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_epoch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 member_index = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_member_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pubkey = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes backup_enc_data = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_backup_enc_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 elect_height = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_elect_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &elect_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bls_sign_x = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bls_sign_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bls_sign_y = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bls_sign_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.bft.protobuf.BftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.bft.protobuf.BftMessage)
  return false;
#undef DO_
}

void BftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.bft.protobuf.BftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes gid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gid(), output);
  }

  // optional int32 bft_step = 2;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bft_step(), output);
  }

  // optional bool leader = 3;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->leader(), output);
  }

  // optional uint32 net_id = 4;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->net_id(), output);
  }

  // optional bytes sign_challenge = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sign_challenge(), output);
  }

  // optional bytes sign_response = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->sign_response(), output);
  }

  // optional bytes secret = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->secret(), output);
  }

  // optional bytes challenge = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->challenge(), output);
  }

  // optional bytes response = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->response(), output);
  }

  // optional bytes agg_sign_challenge = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->agg_sign_challenge(), output);
  }

  // optional bytes agg_sign_response = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->agg_sign_response(), output);
  }

  // repeated uint64 bitmap = 12;
  for (int i = 0, n = this->bitmap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      12, this->bitmap(i), output);
  }

  // optional bool agree = 13;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->agree(), output);
  }

  // optional uint32 pool_index = 14;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->pool_index(), output);
  }

  // optional bytes data = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->data(), output);
  }

  // optional bytes prepare_hash = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->prepare_hash(), output);
  }

  // optional bytes node_ip = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->node_ip(), output);
  }

  // optional uint32 node_port = 18;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->node_port(), output);
  }

  // optional uint32 epoch = 19;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->epoch(), output);
  }

  // optional uint32 member_index = 20;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->member_index(), output);
  }

  // optional bytes pubkey = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->pubkey(), output);
  }

  // optional bytes backup_enc_data = 22;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->backup_enc_data(), output);
  }

  // optional uint64 elect_height = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->elect_height(), output);
  }

  // optional bytes bls_sign_x = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->bls_sign_x(), output);
  }

  // optional bytes bls_sign_y = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->bls_sign_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.bft.protobuf.BftMessage)
}

::google::protobuf::uint8* BftMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.bft.protobuf.BftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gid(), target);
  }

  // optional int32 bft_step = 2;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bft_step(), target);
  }

  // optional bool leader = 3;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->leader(), target);
  }

  // optional uint32 net_id = 4;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->net_id(), target);
  }

  // optional bytes sign_challenge = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sign_challenge(), target);
  }

  // optional bytes sign_response = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sign_response(), target);
  }

  // optional bytes secret = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->secret(), target);
  }

  // optional bytes challenge = 8;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->challenge(), target);
  }

  // optional bytes response = 9;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->response(), target);
  }

  // optional bytes agg_sign_challenge = 10;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->agg_sign_challenge(), target);
  }

  // optional bytes agg_sign_response = 11;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->agg_sign_response(), target);
  }

  // repeated uint64 bitmap = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(12, this->bitmap_, target);

  // optional bool agree = 13;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->agree(), target);
  }

  // optional uint32 pool_index = 14;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->pool_index(), target);
  }

  // optional bytes data = 15;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->data(), target);
  }

  // optional bytes prepare_hash = 16;
  if (cached_has_bits & 0x00000200u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->prepare_hash(), target);
  }

  // optional bytes node_ip = 17;
  if (cached_has_bits & 0x00000400u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->node_ip(), target);
  }

  // optional uint32 node_port = 18;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->node_port(), target);
  }

  // optional uint32 epoch = 19;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->epoch(), target);
  }

  // optional uint32 member_index = 20;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->member_index(), target);
  }

  // optional bytes pubkey = 21;
  if (cached_has_bits & 0x00000800u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->pubkey(), target);
  }

  // optional bytes backup_enc_data = 22;
  if (cached_has_bits & 0x00001000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->backup_enc_data(), target);
  }

  // optional uint64 elect_height = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->elect_height(), target);
  }

  // optional bytes bls_sign_x = 24;
  if (cached_has_bits & 0x00002000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->bls_sign_x(), target);
  }

  // optional bytes bls_sign_y = 25;
  if (cached_has_bits & 0x00004000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->bls_sign_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.bft.protobuf.BftMessage)
  return target;
}

size_t BftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.bft.protobuf.BftMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 bitmap = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->bitmap_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bitmap_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

    // optional bytes sign_challenge = 5;
    if (has_sign_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_challenge());
    }

    // optional bytes sign_response = 6;
    if (has_sign_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_response());
    }

    // optional bytes secret = 7;
    if (has_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secret());
    }

    // optional bytes challenge = 8;
    if (has_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->challenge());
    }

    // optional bytes response = 9;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response());
    }

    // optional bytes agg_sign_challenge = 10;
    if (has_agg_sign_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->agg_sign_challenge());
    }

    // optional bytes agg_sign_response = 11;
    if (has_agg_sign_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->agg_sign_response());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bytes data = 15;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bytes prepare_hash = 16;
    if (has_prepare_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prepare_hash());
    }

    // optional bytes node_ip = 17;
    if (has_node_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_ip());
    }

    // optional bytes pubkey = 21;
    if (has_pubkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional bytes backup_enc_data = 22;
    if (has_backup_enc_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->backup_enc_data());
    }

    // optional bytes bls_sign_x = 24;
    if (has_bls_sign_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bls_sign_x());
    }

    // optional bytes bls_sign_y = 25;
    if (has_bls_sign_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bls_sign_y());
    }

    // optional int32 bft_step = 2;
    if (has_bft_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bft_step());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 net_id = 4;
    if (has_net_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_id());
    }

    // optional bool leader = 3;
    if (has_leader()) {
      total_size += 1 + 1;
    }

    // optional bool agree = 13;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional uint32 pool_index = 14;
    if (has_pool_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pool_index());
    }

    // optional uint32 node_port = 18;
    if (has_node_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_port());
    }

    // optional uint32 epoch = 19;
    if (has_epoch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->epoch());
    }

    // optional uint64 elect_height = 23;
    if (has_elect_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->elect_height());
    }

    // optional uint32 member_index = 20;
    if (has_member_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BftMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.bft.protobuf.BftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BftMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BftMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.bft.protobuf.BftMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.bft.protobuf.BftMessage)
    MergeFrom(*source);
  }
}

void BftMessage::MergeFrom(const BftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.bft.protobuf.BftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bitmap_.MergeFrom(from.bitmap_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gid();
      gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sign_challenge();
      sign_challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_challenge_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sign_response();
      sign_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_response_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_secret();
      secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_challenge();
      challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_response();
      response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_agg_sign_challenge();
      agg_sign_challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agg_sign_challenge_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_agg_sign_response();
      agg_sign_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agg_sign_response_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_prepare_hash();
      prepare_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prepare_hash_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_node_ip();
      node_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_ip_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_pubkey();
      pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_backup_enc_data();
      backup_enc_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backup_enc_data_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_bls_sign_x();
      bls_sign_x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bls_sign_x_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_bls_sign_y();
      bls_sign_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bls_sign_y_);
    }
    if (cached_has_bits & 0x00008000u) {
      bft_step_ = from.bft_step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      net_id_ = from.net_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      leader_ = from.leader_;
    }
    if (cached_has_bits & 0x00040000u) {
      agree_ = from.agree_;
    }
    if (cached_has_bits & 0x00080000u) {
      pool_index_ = from.pool_index_;
    }
    if (cached_has_bits & 0x00100000u) {
      node_port_ = from.node_port_;
    }
    if (cached_has_bits & 0x00200000u) {
      epoch_ = from.epoch_;
    }
    if (cached_has_bits & 0x00400000u) {
      elect_height_ = from.elect_height_;
    }
    if (cached_has_bits & 0x00800000u) {
      member_index_ = from.member_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BftMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.bft.protobuf.BftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BftMessage::CopyFrom(const BftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.bft.protobuf.BftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BftMessage::IsInitialized() const {
  return true;
}

void BftMessage::Swap(BftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BftMessage::InternalSwap(BftMessage* other) {
  using std::swap;
  bitmap_.InternalSwap(&other->bitmap_);
  gid_.Swap(&other->gid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_challenge_.Swap(&other->sign_challenge_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_response_.Swap(&other->sign_response_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  challenge_.Swap(&other->challenge_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  response_.Swap(&other->response_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  agg_sign_challenge_.Swap(&other->agg_sign_challenge_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  agg_sign_response_.Swap(&other->agg_sign_response_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prepare_hash_.Swap(&other->prepare_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_ip_.Swap(&other->node_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  backup_enc_data_.Swap(&other->backup_enc_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bls_sign_x_.Swap(&other->bls_sign_x_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bls_sign_y_.Swap(&other->bls_sign_y_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bft_step_, other->bft_step_);
  swap(net_id_, other->net_id_);
  swap(leader_, other->leader_);
  swap(agree_, other->agree_);
  swap(pool_index_, other->pool_index_);
  swap(node_port_, other->node_port_);
  swap(epoch_, other->epoch_);
  swap(elect_height_, other->elect_height_);
  swap(member_index_, other->member_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BftMessage::GetMetadata() const {
  protobuf_bft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_bft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace bft
}  // namespace tenon
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::AccountAttributes* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::AccountAttributes >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::AccountAttributes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::StorageItem* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::StorageItem >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::StorageItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::TransferItem* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::TransferItem >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::TransferItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::TxInfo* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::TxInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::TxInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::Block* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::Block >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::Block >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::TxPrepareItem* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::TxPrepareItem >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::TxPrepareItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::LeaderTxPrepare* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::LeaderTxPrepare >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::LeaderTxPrepare >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::BackupTxPrepare* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::BackupTxPrepare >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::BackupTxPrepare >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::LeaderTxPreCommit* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::LeaderTxPreCommit >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::LeaderTxPreCommit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::BackupTxPreCommit* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::BackupTxPreCommit >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::BackupTxPreCommit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::LeaderTxCommit* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::LeaderTxCommit >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::LeaderTxCommit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::ToAccountTx* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::ToAccountTx >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::ToAccountTx >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::TxBft* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::TxBft >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::TxBft >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::bft::protobuf::BftMessage* Arena::CreateMaybeMessage< ::tenon::bft::protobuf::BftMessage >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::bft::protobuf::BftMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
