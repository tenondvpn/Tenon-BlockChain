#include "stdafx.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#include "network.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_network_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_network_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetNetworkNodesRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_network_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_network_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetNetworkNodesResponse;
}  // namespace protobuf_network_2eproto
namespace tenon {
namespace network {
namespace protobuf {
class GetNetworkNodesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNetworkNodesRequest>
      _instance;
} _GetNetworkNodesRequest_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeInfo>
      _instance;
} _NodeInfo_default_instance_;
class GetNetworkNodesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNetworkNodesResponse>
      _instance;
} _GetNetworkNodesResponse_default_instance_;
class NetworkMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkMessage>
      _instance;
} _NetworkMessage_default_instance_;
}  // namespace protobuf
}  // namespace network
}  // namespace tenon
namespace protobuf_network_2eproto {
static void InitDefaultsGetNetworkNodesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::network::protobuf::_GetNetworkNodesRequest_default_instance_;
    new (ptr) ::tenon::network::protobuf::GetNetworkNodesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::network::protobuf::GetNetworkNodesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetNetworkNodesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetNetworkNodesRequest}, {}};

static void InitDefaultsNodeInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::network::protobuf::_NodeInfo_default_instance_;
    new (ptr) ::tenon::network::protobuf::NodeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::network::protobuf::NodeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeInfo}, {}};

static void InitDefaultsGetNetworkNodesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::network::protobuf::_GetNetworkNodesResponse_default_instance_;
    new (ptr) ::tenon::network::protobuf::GetNetworkNodesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::network::protobuf::GetNetworkNodesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetNetworkNodesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetNetworkNodesResponse}, {
      &protobuf_network_2eproto::scc_info_NodeInfo.base,}};

static void InitDefaultsNetworkMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tenon::network::protobuf::_NetworkMessage_default_instance_;
    new (ptr) ::tenon::network::protobuf::NetworkMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tenon::network::protobuf::NetworkMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NetworkMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNetworkMessage}, {
      &protobuf_network_2eproto::scc_info_GetNetworkNodesRequest.base,
      &protobuf_network_2eproto::scc_info_GetNetworkNodesResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetNetworkNodesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetNetworkNodesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkMessage.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::GetNetworkNodesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::GetNetworkNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::GetNetworkNodesRequest, net_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::GetNetworkNodesRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::GetNetworkNodesRequest, country_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, public_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, local_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, local_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, nat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, dht_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, min_svr_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, max_svr_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, min_route_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, max_route_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NodeInfo, node_tag_),
  0,
  6,
  1,
  7,
  2,
  8,
  3,
  4,
  9,
  10,
  11,
  12,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::GetNetworkNodesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::GetNetworkNodesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::GetNetworkNodesResponse, nodes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NetworkMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NetworkMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NetworkMessage, get_net_nodes_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tenon::network::protobuf::NetworkMessage, get_net_nodes_res_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::tenon::network::protobuf::GetNetworkNodesRequest)},
  { 11, 29, sizeof(::tenon::network::protobuf::NodeInfo)},
  { 42, 48, sizeof(::tenon::network::protobuf::GetNetworkNodesResponse)},
  { 49, 56, sizeof(::tenon::network::protobuf::NetworkMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::network::protobuf::_GetNetworkNodesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::network::protobuf::_NodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::network::protobuf::_GetNetworkNodesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tenon::network::protobuf::_NetworkMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "network.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rnetwork.proto\022\025lego.network.protobuf\"H"
      "\n\026GetNetworkNodesRequest\022\016\n\006net_id\030\001 \001(\r"
      "\022\r\n\005count\030\002 \001(\r\022\017\n\007country\030\003 \001(\r\"\205\002\n\010Nod"
      "eInfo\022\021\n\tpublic_ip\030\001 \001(\014\022\023\n\013public_port\030"
      "\002 \001(\005\022\020\n\010local_ip\030\003 \001(\014\022\022\n\nlocal_port\030\004 "
      "\001(\005\022\n\n\002id\030\005 \001(\014\022\020\n\010nat_type\030\006 \001(\005\022\017\n\007dht"
      "_key\030\007 \001(\014\022\016\n\006pubkey\030\010 \001(\014\022\024\n\014min_svr_po"
      "rt\030\t \001(\r\022\024\n\014max_svr_port\030\n \001(\r\022\026\n\016min_ro"
      "ute_port\030\013 \001(\r\022\026\n\016max_route_port\030\014 \001(\r\022\020"
      "\n\010node_tag\030\r \001(\014\"I\n\027GetNetworkNodesRespo"
      "nse\022.\n\005nodes\030\001 \003(\0132\037.tenon.network.protob"
      "uf.NodeInfo\"\245\001\n\016NetworkMessage\022H\n\021get_ne"
      "t_nodes_req\030\001 \001(\0132-.tenon.network.protobu"
      "f.GetNetworkNodesRequest\022I\n\021get_net_node"
      "s_res\030\002 \001(\0132..tenon.network.protobuf.GetN"
      "etworkNodesResponse"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 619);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "network.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_network_2eproto
namespace tenon {
namespace network {
namespace protobuf {

// ===================================================================

void GetNetworkNodesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNetworkNodesRequest::kNetIdFieldNumber;
const int GetNetworkNodesRequest::kCountFieldNumber;
const int GetNetworkNodesRequest::kCountryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNetworkNodesRequest::GetNetworkNodesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_network_2eproto::scc_info_GetNetworkNodesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.network.protobuf.GetNetworkNodesRequest)
}
GetNetworkNodesRequest::GetNetworkNodesRequest(const GetNetworkNodesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&net_id_, &from.net_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&country_) -
    reinterpret_cast<char*>(&net_id_)) + sizeof(country_));
  // @@protoc_insertion_point(copy_constructor:tenon.network.protobuf.GetNetworkNodesRequest)
}

void GetNetworkNodesRequest::SharedCtor() {
  ::memset(&net_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&country_) -
      reinterpret_cast<char*>(&net_id_)) + sizeof(country_));
}

GetNetworkNodesRequest::~GetNetworkNodesRequest() {
  // @@protoc_insertion_point(destructor:tenon.network.protobuf.GetNetworkNodesRequest)
  SharedDtor();
}

void GetNetworkNodesRequest::SharedDtor() {
}

void GetNetworkNodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetNetworkNodesRequest::descriptor() {
  ::protobuf_network_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNetworkNodesRequest& GetNetworkNodesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_network_2eproto::scc_info_GetNetworkNodesRequest.base);
  return *internal_default_instance();
}


void GetNetworkNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.network.protobuf.GetNetworkNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&net_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&country_) -
        reinterpret_cast<char*>(&net_id_)) + sizeof(country_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetNetworkNodesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.network.protobuf.GetNetworkNodesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 net_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_net_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 country = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_country();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.network.protobuf.GetNetworkNodesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.network.protobuf.GetNetworkNodesRequest)
  return false;
#undef DO_
}

void GetNetworkNodesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.network.protobuf.GetNetworkNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 net_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->net_id(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 country = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->country(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.network.protobuf.GetNetworkNodesRequest)
}

::google::protobuf::uint8* GetNetworkNodesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.network.protobuf.GetNetworkNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 net_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->net_id(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 country = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->country(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.network.protobuf.GetNetworkNodesRequest)
  return target;
}

size_t GetNetworkNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.network.protobuf.GetNetworkNodesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 net_id = 1;
    if (has_net_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkNodesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.network.protobuf.GetNetworkNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkNodesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNetworkNodesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.network.protobuf.GetNetworkNodesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.network.protobuf.GetNetworkNodesRequest)
    MergeFrom(*source);
  }
}

void GetNetworkNodesRequest::MergeFrom(const GetNetworkNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.network.protobuf.GetNetworkNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      net_id_ = from.net_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      country_ = from.country_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetNetworkNodesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.network.protobuf.GetNetworkNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkNodesRequest::CopyFrom(const GetNetworkNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.network.protobuf.GetNetworkNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkNodesRequest::IsInitialized() const {
  return true;
}

void GetNetworkNodesRequest::Swap(GetNetworkNodesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNetworkNodesRequest::InternalSwap(GetNetworkNodesRequest* other) {
  using std::swap;
  swap(net_id_, other->net_id_);
  swap(count_, other->count_);
  swap(country_, other->country_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetNetworkNodesRequest::GetMetadata() const {
  protobuf_network_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInfo::kPublicIpFieldNumber;
const int NodeInfo::kPublicPortFieldNumber;
const int NodeInfo::kLocalIpFieldNumber;
const int NodeInfo::kLocalPortFieldNumber;
const int NodeInfo::kIdFieldNumber;
const int NodeInfo::kNatTypeFieldNumber;
const int NodeInfo::kDhtKeyFieldNumber;
const int NodeInfo::kPubkeyFieldNumber;
const int NodeInfo::kMinSvrPortFieldNumber;
const int NodeInfo::kMaxSvrPortFieldNumber;
const int NodeInfo::kMinRoutePortFieldNumber;
const int NodeInfo::kMaxRoutePortFieldNumber;
const int NodeInfo::kNodeTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfo::NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_network_2eproto::scc_info_NodeInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.network.protobuf.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_ip()) {
    public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
  }
  local_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_local_ip()) {
    local_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_ip_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dht_key()) {
    dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dht_key_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkey()) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  node_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_node_tag()) {
    node_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_tag_);
  }
  ::memcpy(&public_port_, &from.public_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_route_port_) -
    reinterpret_cast<char*>(&public_port_)) + sizeof(max_route_port_));
  // @@protoc_insertion_point(copy_constructor:tenon.network.protobuf.NodeInfo)
}

void NodeInfo::SharedCtor() {
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dht_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&public_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_route_port_) -
      reinterpret_cast<char*>(&public_port_)) + sizeof(max_route_port_));
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:tenon.network.protobuf.NodeInfo)
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  public_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dht_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NodeInfo::descriptor() {
  ::protobuf_network_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeInfo& NodeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_network_2eproto::scc_info_NodeInfo.base);
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.network.protobuf.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      public_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      local_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      dht_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      pubkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      node_tag_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&public_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_port_) -
        reinterpret_cast<char*>(&public_port_)) + sizeof(local_port_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&nat_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_route_port_) -
        reinterpret_cast<char*>(&nat_type_)) + sizeof(max_route_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.network.protobuf.NodeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 public_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_public_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes local_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_local_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 local_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_local_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nat_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_nat_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nat_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes dht_key = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dht_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pubkey = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_svr_port = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_min_svr_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_svr_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_svr_port = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_max_svr_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_svr_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_route_port = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_min_route_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_route_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_route_port = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_max_route_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_route_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes node_tag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.network.protobuf.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.network.protobuf.NodeInfo)
  return false;
#undef DO_
}

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.network.protobuf.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_ip(), output);
  }

  // optional int32 public_port = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->public_port(), output);
  }

  // optional bytes local_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->local_ip(), output);
  }

  // optional int32 local_port = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->local_port(), output);
  }

  // optional bytes id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->id(), output);
  }

  // optional int32 nat_type = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nat_type(), output);
  }

  // optional bytes dht_key = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->dht_key(), output);
  }

  // optional bytes pubkey = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->pubkey(), output);
  }

  // optional uint32 min_svr_port = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->min_svr_port(), output);
  }

  // optional uint32 max_svr_port = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->max_svr_port(), output);
  }

  // optional uint32 min_route_port = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->min_route_port(), output);
  }

  // optional uint32 max_route_port = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->max_route_port(), output);
  }

  // optional bytes node_tag = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->node_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.network.protobuf.NodeInfo)
}

::google::protobuf::uint8* NodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.network.protobuf.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_ip(), target);
  }

  // optional int32 public_port = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->public_port(), target);
  }

  // optional bytes local_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->local_ip(), target);
  }

  // optional int32 local_port = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->local_port(), target);
  }

  // optional bytes id = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->id(), target);
  }

  // optional int32 nat_type = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nat_type(), target);
  }

  // optional bytes dht_key = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->dht_key(), target);
  }

  // optional bytes pubkey = 8;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->pubkey(), target);
  }

  // optional uint32 min_svr_port = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->min_svr_port(), target);
  }

  // optional uint32 max_svr_port = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->max_svr_port(), target);
  }

  // optional uint32 min_route_port = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->min_route_port(), target);
  }

  // optional uint32 max_route_port = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->max_route_port(), target);
  }

  // optional bytes node_tag = 13;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->node_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.network.protobuf.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.network.protobuf.NodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes public_ip = 1;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_ip());
    }

    // optional bytes local_ip = 3;
    if (has_local_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->local_ip());
    }

    // optional bytes id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes dht_key = 7;
    if (has_dht_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dht_key());
    }

    // optional bytes pubkey = 8;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional bytes node_tag = 13;
    if (has_node_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_tag());
    }

    // optional int32 public_port = 2;
    if (has_public_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->public_port());
    }

    // optional int32 local_port = 4;
    if (has_local_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_port());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 nat_type = 6;
    if (has_nat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nat_type());
    }

    // optional uint32 min_svr_port = 9;
    if (has_min_svr_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_svr_port());
    }

    // optional uint32 max_svr_port = 10;
    if (has_max_svr_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_svr_port());
    }

    // optional uint32 min_route_port = 11;
    if (has_min_route_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_route_port());
    }

    // optional uint32 max_route_port = 12;
    if (has_max_route_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_route_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.network.protobuf.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.network.protobuf.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.network.protobuf.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.network.protobuf.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_public_ip();
      public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_local_ip();
      local_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_dht_key();
      dht_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dht_key_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_pubkey();
      pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_node_tag();
      node_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_tag_);
    }
    if (cached_has_bits & 0x00000040u) {
      public_port_ = from.public_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      local_port_ = from.local_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      nat_type_ = from.nat_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      min_svr_port_ = from.min_svr_port_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_svr_port_ = from.max_svr_port_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_route_port_ = from.min_route_port_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_route_port_ = from.max_route_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.network.protobuf.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.network.protobuf.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  public_ip_.Swap(&other->public_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_ip_.Swap(&other->local_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dht_key_.Swap(&other->dht_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_tag_.Swap(&other->node_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(public_port_, other->public_port_);
  swap(local_port_, other->local_port_);
  swap(nat_type_, other->nat_type_);
  swap(min_svr_port_, other->min_svr_port_);
  swap(max_svr_port_, other->max_svr_port_);
  swap(min_route_port_, other->min_route_port_);
  swap(max_route_port_, other->max_route_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  protobuf_network_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetNetworkNodesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNetworkNodesResponse::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNetworkNodesResponse::GetNetworkNodesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_network_2eproto::scc_info_GetNetworkNodesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.network.protobuf.GetNetworkNodesResponse)
}
GetNetworkNodesResponse::GetNetworkNodesResponse(const GetNetworkNodesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tenon.network.protobuf.GetNetworkNodesResponse)
}

void GetNetworkNodesResponse::SharedCtor() {
}

GetNetworkNodesResponse::~GetNetworkNodesResponse() {
  // @@protoc_insertion_point(destructor:tenon.network.protobuf.GetNetworkNodesResponse)
  SharedDtor();
}

void GetNetworkNodesResponse::SharedDtor() {
}

void GetNetworkNodesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetNetworkNodesResponse::descriptor() {
  ::protobuf_network_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNetworkNodesResponse& GetNetworkNodesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_network_2eproto::scc_info_GetNetworkNodesResponse.base);
  return *internal_default_instance();
}


void GetNetworkNodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.network.protobuf.GetNetworkNodesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetNetworkNodesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.network.protobuf.GetNetworkNodesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tenon.network.protobuf.NodeInfo nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.network.protobuf.GetNetworkNodesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.network.protobuf.GetNetworkNodesResponse)
  return false;
#undef DO_
}

void GetNetworkNodesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.network.protobuf.GetNetworkNodesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tenon.network.protobuf.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->nodes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.network.protobuf.GetNetworkNodesResponse)
}

::google::protobuf::uint8* GetNetworkNodesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.network.protobuf.GetNetworkNodesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tenon.network.protobuf.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.network.protobuf.GetNetworkNodesResponse)
  return target;
}

size_t GetNetworkNodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.network.protobuf.GetNetworkNodesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tenon.network.protobuf.NodeInfo nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkNodesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.network.protobuf.GetNetworkNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkNodesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNetworkNodesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.network.protobuf.GetNetworkNodesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.network.protobuf.GetNetworkNodesResponse)
    MergeFrom(*source);
  }
}

void GetNetworkNodesResponse::MergeFrom(const GetNetworkNodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.network.protobuf.GetNetworkNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void GetNetworkNodesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.network.protobuf.GetNetworkNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkNodesResponse::CopyFrom(const GetNetworkNodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.network.protobuf.GetNetworkNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkNodesResponse::IsInitialized() const {
  return true;
}

void GetNetworkNodesResponse::Swap(GetNetworkNodesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNetworkNodesResponse::InternalSwap(GetNetworkNodesResponse* other) {
  using std::swap;
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetNetworkNodesResponse::GetMetadata() const {
  protobuf_network_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetworkMessage::InitAsDefaultInstance() {
  ::tenon::network::protobuf::_NetworkMessage_default_instance_._instance.get_mutable()->get_net_nodes_req_ = const_cast< ::tenon::network::protobuf::GetNetworkNodesRequest*>(
      ::tenon::network::protobuf::GetNetworkNodesRequest::internal_default_instance());
  ::tenon::network::protobuf::_NetworkMessage_default_instance_._instance.get_mutable()->get_net_nodes_res_ = const_cast< ::tenon::network::protobuf::GetNetworkNodesResponse*>(
      ::tenon::network::protobuf::GetNetworkNodesResponse::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkMessage::kGetNetNodesReqFieldNumber;
const int NetworkMessage::kGetNetNodesResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkMessage::NetworkMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_network_2eproto::scc_info_NetworkMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tenon.network.protobuf.NetworkMessage)
}
NetworkMessage::NetworkMessage(const NetworkMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_get_net_nodes_req()) {
    get_net_nodes_req_ = new ::tenon::network::protobuf::GetNetworkNodesRequest(*from.get_net_nodes_req_);
  } else {
    get_net_nodes_req_ = NULL;
  }
  if (from.has_get_net_nodes_res()) {
    get_net_nodes_res_ = new ::tenon::network::protobuf::GetNetworkNodesResponse(*from.get_net_nodes_res_);
  } else {
    get_net_nodes_res_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tenon.network.protobuf.NetworkMessage)
}

void NetworkMessage::SharedCtor() {
  ::memset(&get_net_nodes_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_net_nodes_res_) -
      reinterpret_cast<char*>(&get_net_nodes_req_)) + sizeof(get_net_nodes_res_));
}

NetworkMessage::~NetworkMessage() {
  // @@protoc_insertion_point(destructor:tenon.network.protobuf.NetworkMessage)
  SharedDtor();
}

void NetworkMessage::SharedDtor() {
  if (this != internal_default_instance()) delete get_net_nodes_req_;
  if (this != internal_default_instance()) delete get_net_nodes_res_;
}

void NetworkMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NetworkMessage::descriptor() {
  ::protobuf_network_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkMessage& NetworkMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_network_2eproto::scc_info_NetworkMessage.base);
  return *internal_default_instance();
}


void NetworkMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tenon.network.protobuf.NetworkMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(get_net_nodes_req_ != NULL);
      get_net_nodes_req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(get_net_nodes_res_ != NULL);
      get_net_nodes_res_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tenon.network.protobuf.NetworkMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tenon.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_net_nodes_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tenon.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_net_nodes_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tenon.network.protobuf.NetworkMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tenon.network.protobuf.NetworkMessage)
  return false;
#undef DO_
}

void NetworkMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tenon.network.protobuf.NetworkMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_get_net_nodes_req(), output);
  }

  // optional .tenon.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_get_net_nodes_res(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tenon.network.protobuf.NetworkMessage)
}

::google::protobuf::uint8* NetworkMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tenon.network.protobuf.NetworkMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tenon.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_get_net_nodes_req(), deterministic, target);
  }

  // optional .tenon.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_get_net_nodes_res(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tenon.network.protobuf.NetworkMessage)
  return target;
}

size_t NetworkMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tenon.network.protobuf.NetworkMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .tenon.network.protobuf.GetNetworkNodesRequest get_net_nodes_req = 1;
    if (has_get_net_nodes_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *get_net_nodes_req_);
    }

    // optional .tenon.network.protobuf.GetNetworkNodesResponse get_net_nodes_res = 2;
    if (has_get_net_nodes_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *get_net_nodes_res_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tenon.network.protobuf.NetworkMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tenon.network.protobuf.NetworkMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tenon.network.protobuf.NetworkMessage)
    MergeFrom(*source);
  }
}

void NetworkMessage::MergeFrom(const NetworkMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tenon.network.protobuf.NetworkMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_get_net_nodes_req()->::tenon::network::protobuf::GetNetworkNodesRequest::MergeFrom(from.get_net_nodes_req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_get_net_nodes_res()->::tenon::network::protobuf::GetNetworkNodesResponse::MergeFrom(from.get_net_nodes_res());
    }
  }
}

void NetworkMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tenon.network.protobuf.NetworkMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkMessage::CopyFrom(const NetworkMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tenon.network.protobuf.NetworkMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkMessage::IsInitialized() const {
  return true;
}

void NetworkMessage::Swap(NetworkMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkMessage::InternalSwap(NetworkMessage* other) {
  using std::swap;
  swap(get_net_nodes_req_, other->get_net_nodes_req_);
  swap(get_net_nodes_res_, other->get_net_nodes_res_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NetworkMessage::GetMetadata() const {
  protobuf_network_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_network_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace network
}  // namespace tenon
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::network::protobuf::GetNetworkNodesRequest* Arena::CreateMaybeMessage< ::tenon::network::protobuf::GetNetworkNodesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::network::protobuf::GetNetworkNodesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::network::protobuf::NodeInfo* Arena::CreateMaybeMessage< ::tenon::network::protobuf::NodeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::network::protobuf::NodeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::network::protobuf::GetNetworkNodesResponse* Arena::CreateMaybeMessage< ::tenon::network::protobuf::GetNetworkNodesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::network::protobuf::GetNetworkNodesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tenon::network::protobuf::NetworkMessage* Arena::CreateMaybeMessage< ::tenon::network::protobuf::NetworkMessage >(Arena* arena) {
  return Arena::CreateInternal< ::tenon::network::protobuf::NetworkMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
